{"version":3,"sources":["webpack:///../src/ol/format/OSMXML.js","webpack:///./vector-osm.js"],"names":["NAMESPACE_URIS","WAY_PARSERS","Object","xml","nd","node","objectStack","length","ndrefs","push","getAttribute","tag","readTag","PARSERS","const","options","state","id","coordinates","parseFloat","nodes","values","tags","NODE_PARSERS","obj","geometry","Point","format_Feature","feature","Feature","setId","setProperties","features","way","ways","OSMXML_OSMXML","XMLFeature","OSMXML","super","this","dataProjection","proj","readFeaturesFromNode","opt_options","getReadOptions","localName","j","flatCoordinates","i","ii","point","array","let","Polygon","GeometryLayout","XY","LineString","format_XMLFeature","format_OSMXML","map","styles","amenity","parking","Style","stroke","Stroke","color","width","fill","Fill","building",".*","zIndex","highway","service","landuse","forest|grass|allotments","natural","tree","image","Circle","radius","vectorSource","source_Vector","format","loader","extent","resolution","projection","epsg4326Extent","client","XMLHttpRequest","open","addEventListener","readFeatures","responseText","featureProjection","getView","getProjection","addFeatures","query","send","strategy","loadingstrategy","vector","Vector","source","style","key","value","get","undefined","regexp","RegExp","test","raster","Tile","BingMaps","imagerySet","Map","layers","target","document","getElementById","view","View","center","maxZoom","zoom"],"mappings":"4MAqBMA,EAAiB,CAAC,MAOlBC,EAAcC,OAAAC,EAAA,EAAAD,CAClBF,EAAgB,CACdI,GAuIJ,SAAgBC,EAAMC,GACkBA,EAAYA,EAAYC,OAAS,GAChEC,OAAOC,KAAKJ,EAAKK,aAAa,SAxInCC,IAAOC,IAQLC,EAAUX,OAAAC,EAAA,EAAAD,CACdF,EAAgB,CACdK,KA+EJ,SAAkBA,EAAMC,GACtBQ,IAAMC,EAA6DT,EAAY,GACzEU,EAA+BV,EAAYA,EAAYC,OAAS,GAChEU,EAAKZ,EAAKK,aAAa,MAEvBQ,EAAc,CAClBC,WAAWd,EAAKK,aAAa,QAC7BS,WAAWd,EAAKK,aAAa,SAE/BM,EAAMI,MAAMH,GAAMC,EAElBJ,IAAMO,EAASnB,OAAAC,EAAA,EAAAD,CAAgB,CAC7BoB,KAAM,IACLC,EAAclB,EAAMC,GACvB,IAAKJ,OAAAsB,EAAA,EAAAtB,CAAQmB,EAAOC,MAAO,CACzBR,IAAMW,EAAW,IAAIC,EAAA,EAAMR,GAC3BhB,OAAAyB,EAAA,EAAAzB,CAAqBuB,GAAU,EAAOV,GACtCD,IAAMc,EAAU,IAAIC,EAAA,EAAQJ,GAC5BG,EAAQE,MAAMb,GACdW,EAAQG,cAAcV,EAAOC,MAC7BN,EAAMgB,SAASvB,KAAKmB,KAlGpBK,IA2GJ,SAAiB5B,EAAMC,GACrBQ,IAAMG,EAAKZ,EAAKK,aAAa,MACvBW,EAASnB,OAAAC,EAAA,EAAAD,CAAgB,CAC7Be,GAAIA,EACJT,OAAQ,GACRc,KAAM,IACLrB,EAAaI,EAAMC,GACeA,EAAYA,EAAYC,OAAS,GAChE2B,KAAKzB,KAAKY,MAxGZc,EAAyB,SAAAC,GAC7B,SAAAC,IACEC,OAAKC,MAKLA,KAAKC,eAAiBtC,OAAAuC,EAAA,EAAAvC,CAAc,6GAMtCwC,qBAAA,SAAqBrC,EAAMsC,GACzB7B,IAAMC,EAAUwB,KAAKK,eAAevC,EAAMsC,GAC1C,GAAsB,OAAlBtC,EAAKwC,UAAoB,CAO3B,IANA/B,IAAME,EAAQd,OAAAC,EAAA,EAAAD,CAAgB,CAC5BkB,MAAO,GACPc,KAAM,GACNF,SAAU,IACTnB,EAASR,EAAM,CAACU,IAEV+B,EAAI,EAAGA,EAAI9B,EAAMkB,KAAK3B,OAAQuC,IAAK,CAI1C,IAHAhC,IAAMO,EAAgCL,EAAMkB,KAAKY,GAE3CC,EAAkB,GACfC,EAAI,EAAGC,EAAK5B,EAAOb,OAAOD,OAAQyC,EAAIC,EAAID,IAAK,CACtDlC,IAAMoC,EAAQlC,EAAMI,MAAMC,EAAOb,OAAOwC,IACxC9C,OAAAiD,EAAA,EAAAjD,CAAO6C,EAAiBG,GAE1BE,IAAI3B,OAAA,EAGFA,EAFEJ,EAAOb,OAAO,IAAMa,EAAOb,OAAOa,EAAOb,OAAOD,OAAS,GAEhD,IAAI8C,EAAA,EAAQN,EAAiBO,EAAA,EAAeC,GAAI,CAACR,EAAgBxC,SAEjE,IAAIiD,EAAA,EAAWT,EAAiBO,EAAA,EAAeC,IAE5DrD,OAAAyB,EAAA,EAAAzB,CAAqBuB,GAAU,EAAOV,GACtCD,IAAMc,EAAU,IAAIC,EAAA,EAAQJ,GAC5BG,EAAQE,MAAMT,EAAOJ,IACrBW,EAAQG,cAAcV,EAAOC,MAC7BN,EAAMgB,SAASvB,KAAKmB,GAEtB,GAAIZ,EAAMgB,SACR,OAAOhB,EAAMgB,SAGjB,MAAO,MA/CoB,CAAVyB,EAAA,GAyDflC,EAAerB,OAAAC,EAAA,EAAAD,CACnBF,EAAgB,CACdW,IAAOC,IA+DX,SAASA,EAAQP,EAAMC,GACiBA,EAAYA,EAAYC,OAAS,GAChEe,KAAKjB,EAAKK,aAAa,MAAQL,EAAKK,aAAa,KAI3C,IAAAgD,EAAA,0EC3KXC,EAAM,KAEJC,EAAS,CACbC,QAAW,CACTC,QAAW,IAAIC,EAAA,EAAM,CACnBC,OAAQ,IAAIC,EAAA,EAAO,CACjBC,MAAO,2BACPC,MAAO,IAETC,KAAM,IAAIC,EAAA,EAAK,CACbH,MAAO,gCAIbI,SAAY,CACVC,KAAM,IAAIR,EAAA,EAAM,CACdS,OAAQ,IACRR,OAAQ,IAAIC,EAAA,EAAO,CACjBC,MAAO,yBACPC,MAAO,IAETC,KAAM,IAAIC,EAAA,EAAK,CACbH,MAAO,8BAIbO,QAAW,CACTC,QAAW,IAAIX,EAAA,EAAM,CACnBC,OAAQ,IAAIC,EAAA,EAAO,CACjBC,MAAO,2BACPC,MAAO,MAGXI,KAAM,IAAIR,EAAA,EAAM,CACdC,OAAQ,IAAIC,EAAA,EAAO,CACjBC,MAAO,2BACPC,MAAO,OAIbQ,QAAW,CACTC,0BAA2B,IAAIb,EAAA,EAAM,CACnCC,OAAQ,IAAIC,EAAA,EAAO,CACjBC,MAAO,0BACPC,MAAO,IAETC,KAAM,IAAIC,EAAA,EAAK,CACbH,MAAO,+BAIbW,QAAW,CACTC,KAAQ,IAAIf,EAAA,EAAM,CAChBgB,MAAO,IAAIC,EAAA,EAAY,CACrBC,OAAQ,EACRb,KAAM,IAAIC,EAAA,EAAK,CACbH,MAAO,4BAETF,OAAQ,WAMVkB,EAAe,IAAIC,EAAA,EAAa,CACpCC,OAAQ,IAAI1B,EACZ2B,OAAQ,SAASC,EAAQC,EAAYC,GACnC1E,IAAM2E,EAAiBvF,OAAAuC,EAAA,EAAAvC,CAAgBoF,EAAQE,EAAY,aACrDE,EAAS,IAAIC,eACnBD,EAAOE,KAAK,OAAQ,2CACpBF,EAAOG,iBAAiB,OAAQ,WAC9B/E,IAAMkB,GAAW,IAAI0B,GAASoC,aAAaJ,EAAOK,aAAc,CAC9DC,kBAAmBrC,EAAIsC,UAAUC,kBAEnChB,EAAaiB,YAAYnE,KAE3BlB,IAAMsF,EAAQ,SACVX,EAAe,GAAK,IAAMA,EAAe,GAAK,IAC9CA,EAAe,GAAK,IAAMA,EAAe,GACzC,4DACJC,EAAOW,KAAKD,IAEdE,SAAUC,EAAA,IAGNC,EAAS,IAAIC,EAAA,EAAY,CAC7BC,OAAQxB,EACRyB,MAAO,SAAS/E,GACd,IAAKd,IAAM8F,KAAOhD,EAAQ,CACxB9C,IAAM+F,EAAQjF,EAAQkF,IAAIF,GAC1B,QAAcG,IAAVF,EACF,IAAK/F,IAAMkG,KAAUpD,EAAOgD,GAC1B,GAAI,IAAIK,OAAOD,GAAQE,KAAKL,GAC1B,OAAOjD,EAAOgD,GAAKI,GAK3B,OAAO,QAILG,EAAS,IAAIC,EAAA,EAAU,CAC3BV,OAAQ,IAAIW,EAAA,EAAS,CACnBC,WAAY,SACZV,IAAK,uEAITjD,EAAM,IAAI4D,EAAA,EAAI,CACZC,OAAQ,CAACL,EAAQX,GACjBiB,OAAQC,SAASC,eAAe,OAChCC,KAAM,IAAIC,EAAA,EAAK,CACbC,OAAQ,CAAC,OAAQ,SACjBC,QAAS,GACTC,KAAM","file":"vector-osm.js","sourcesContent":["/**\n * @module ol/format/OSMXML\n */\n// FIXME add typedef for stack state objects\nimport {extend} from '../array.js';\nimport Feature from '../Feature.js';\nimport {transformWithOptions} from './Feature.js';\nimport XMLFeature from './XMLFeature.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport LineString from '../geom/LineString.js';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport {isEmpty} from '../obj.js';\nimport {get as getProjection} from '../proj.js';\nimport {pushParseAndPop, makeStructureNS} from '../xml.js';\n\n\n/**\n * @const\n * @type {Array<null>}\n */\nconst NAMESPACE_URIS = [null];\n\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nconst WAY_PARSERS = makeStructureNS(\n  NAMESPACE_URIS, {\n    'nd': readNd,\n    'tag': readTag\n  });\n\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nconst PARSERS = makeStructureNS(\n  NAMESPACE_URIS, {\n    'node': readNode,\n    'way': readWay\n  });\n\n\n/**\n * @classdesc\n * Feature format for reading data in the\n * [OSMXML format](http://wiki.openstreetmap.org/wiki/OSM_XML).\n *\n * @api\n */\nclass OSMXML extends XMLFeature {\n  constructor() {\n    super();\n\n    /**\n     * @inheritDoc\n     */\n    this.dataProjection = getProjection('EPSG:4326');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  readFeaturesFromNode(node, opt_options) {\n    const options = this.getReadOptions(node, opt_options);\n    if (node.localName == 'osm') {\n      const state = pushParseAndPop({\n        nodes: {},\n        ways: [],\n        features: []\n      }, PARSERS, node, [options]);\n      // parse nodes in ways\n      for (let j = 0; j < state.ways.length; j++) {\n        const values = /** @type {Object} */ (state.ways[j]);\n        /** @type {Array<number>} */\n        const flatCoordinates = [];\n        for (let i = 0, ii = values.ndrefs.length; i < ii; i++) {\n          const point = state.nodes[values.ndrefs[i]];\n          extend(flatCoordinates, point);\n        }\n        let geometry;\n        if (values.ndrefs[0] == values.ndrefs[values.ndrefs.length - 1]) {\n          // closed way\n          geometry = new Polygon(flatCoordinates, GeometryLayout.XY, [flatCoordinates.length]);\n        } else {\n          geometry = new LineString(flatCoordinates, GeometryLayout.XY);\n        }\n        transformWithOptions(geometry, false, options);\n        const feature = new Feature(geometry);\n        feature.setId(values.id);\n        feature.setProperties(values.tags);\n        state.features.push(feature);\n      }\n      if (state.features) {\n        return state.features;\n      }\n    }\n    return [];\n  }\n\n}\n\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nconst NODE_PARSERS = makeStructureNS(\n  NAMESPACE_URIS, {\n    'tag': readTag\n  });\n\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction readNode(node, objectStack) {\n  const options = /** @type {import(\"./Feature.js\").ReadOptions} */ (objectStack[0]);\n  const state = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const id = node.getAttribute('id');\n  /** @type {import(\"../coordinate.js\").Coordinate} */\n  const coordinates = [\n    parseFloat(node.getAttribute('lon')),\n    parseFloat(node.getAttribute('lat'))\n  ];\n  state.nodes[id] = coordinates;\n\n  const values = pushParseAndPop({\n    tags: {}\n  }, NODE_PARSERS, node, objectStack);\n  if (!isEmpty(values.tags)) {\n    const geometry = new Point(coordinates);\n    transformWithOptions(geometry, false, options);\n    const feature = new Feature(geometry);\n    feature.setId(id);\n    feature.setProperties(values.tags);\n    state.features.push(feature);\n  }\n}\n\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction readWay(node, objectStack) {\n  const id = node.getAttribute('id');\n  const values = pushParseAndPop({\n    id: id,\n    ndrefs: [],\n    tags: {}\n  }, WAY_PARSERS, node, objectStack);\n  const state = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  state.ways.push(values);\n}\n\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction readNd(node, objectStack) {\n  const values = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  values.ndrefs.push(node.getAttribute('ref'));\n}\n\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction readTag(node, objectStack) {\n  const values = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  values.tags[node.getAttribute('k')] = node.getAttribute('v');\n}\n\n\nexport default OSMXML;\n","import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport OSMXML from '../src/ol/format/OSMXML.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\nimport {bbox as bboxStrategy} from '../src/ol/loadingstrategy.js';\nimport {transformExtent} from '../src/ol/proj.js';\nimport BingMaps from '../src/ol/source/BingMaps.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport {Circle as CircleStyle, Fill, Stroke, Style} from '../src/ol/style.js';\n\nlet map = null;\n\nconst styles = {\n  'amenity': {\n    'parking': new Style({\n      stroke: new Stroke({\n        color: 'rgba(170, 170, 170, 1.0)',\n        width: 1\n      }),\n      fill: new Fill({\n        color: 'rgba(170, 170, 170, 0.3)'\n      })\n    })\n  },\n  'building': {\n    '.*': new Style({\n      zIndex: 100,\n      stroke: new Stroke({\n        color: 'rgba(246, 99, 79, 1.0)',\n        width: 1\n      }),\n      fill: new Fill({\n        color: 'rgba(246, 99, 79, 0.3)'\n      })\n    })\n  },\n  'highway': {\n    'service': new Style({\n      stroke: new Stroke({\n        color: 'rgba(255, 255, 255, 1.0)',\n        width: 2\n      })\n    }),\n    '.*': new Style({\n      stroke: new Stroke({\n        color: 'rgba(255, 255, 255, 1.0)',\n        width: 3\n      })\n    })\n  },\n  'landuse': {\n    'forest|grass|allotments': new Style({\n      stroke: new Stroke({\n        color: 'rgba(140, 208, 95, 1.0)',\n        width: 1\n      }),\n      fill: new Fill({\n        color: 'rgba(140, 208, 95, 0.3)'\n      })\n    })\n  },\n  'natural': {\n    'tree': new Style({\n      image: new CircleStyle({\n        radius: 2,\n        fill: new Fill({\n          color: 'rgba(140, 208, 95, 1.0)'\n        }),\n        stroke: null\n      })\n    })\n  }\n};\n\nconst vectorSource = new VectorSource({\n  format: new OSMXML(),\n  loader: function(extent, resolution, projection) {\n    const epsg4326Extent = transformExtent(extent, projection, 'EPSG:4326');\n    const client = new XMLHttpRequest();\n    client.open('POST', 'https://overpass-api.de/api/interpreter');\n    client.addEventListener('load', function() {\n      const features = new OSMXML().readFeatures(client.responseText, {\n        featureProjection: map.getView().getProjection()\n      });\n      vectorSource.addFeatures(features);\n    });\n    const query = '(node(' +\n        epsg4326Extent[1] + ',' + epsg4326Extent[0] + ',' +\n        epsg4326Extent[3] + ',' + epsg4326Extent[2] +\n        ');rel(bn)->.foo;way(bn);node(w)->.foo;rel(bw););out meta;';\n    client.send(query);\n  },\n  strategy: bboxStrategy\n});\n\nconst vector = new VectorLayer({\n  source: vectorSource,\n  style: function(feature) {\n    for (const key in styles) {\n      const value = feature.get(key);\n      if (value !== undefined) {\n        for (const regexp in styles[key]) {\n          if (new RegExp(regexp).test(value)) {\n            return styles[key][regexp];\n          }\n        }\n      }\n    }\n    return null;\n  }\n});\n\nconst raster = new TileLayer({\n  source: new BingMaps({\n    imagerySet: 'Aerial',\n    key: 'As1HiMj1PvLPlqc_gtM7AqZfBL8ZL3VrjaS3zIb22Uvb9WKhuJObROC-qUpa81U5'\n  })\n});\n\nmap = new Map({\n  layers: [raster, vector],\n  target: document.getElementById('map'),\n  view: new View({\n    center: [739218, 5906096],\n    maxZoom: 19,\n    zoom: 17\n  })\n});\n"],"sourceRoot":""}