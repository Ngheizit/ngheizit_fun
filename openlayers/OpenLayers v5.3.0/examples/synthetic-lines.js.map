{"version":3,"sources":["webpack:///./synthetic-lines.js"],"names":["__webpack_require__","r","__webpack_exports__","endPoint","delta","deltaX","deltaY","i","_src_ol_Feature_js__WEBPACK_IMPORTED_MODULE_0__","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_1__","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_2__","_src_ol_geom_LineString_js__WEBPACK_IMPORTED_MODULE_3__","_src_ol_layer_Vector_js__WEBPACK_IMPORTED_MODULE_4__","_src_ol_source_Vector_js__WEBPACK_IMPORTED_MODULE_5__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_6__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_7__","features","Array","startPoint","signX","signY","geometry","const","vector","source","wrapX","style","stroke","color","width","view","center","zoom","layers","target"],"mappings":"4FAAAA,EAAAC,EAAAC,GAAA,IAaIC,EAEAC,EAAOC,EAAQC,EAKfC,EApBJC,EAAAR,EAAA,IAAAS,EAAAT,EAAA,GAAAU,EAAAV,EAAA,GAAAW,EAAAX,EAAA,IAAAY,EAAAZ,EAAA,IAAAa,EAAAb,EAAA,IAAAc,EAAAd,EAAA,IAAAe,EAAAf,EAAA,IAUMgB,EAAW,IAAIC,MADP,KAGVC,EAAa,CAAC,EAAG,GAIjBC,EAAQ,EACRC,GAAS,EAIb,IAAKb,EAAI,EAAGA,EAZE,MAYWA,EAEnBA,EAAI,GAAM,EACZa,IAAU,EAEVD,IAAU,EAEZd,GANAD,EAAkB,MAATG,EAAI,IAMIY,EACjBb,EAASF,EAAQgB,EACjBjB,EAAW,CAACe,EAAW,GAAKb,EAAQa,EAAW,GAAKZ,GACpDU,EAAST,GAAK,IAAIC,EAAA,EAAQ,CACxBa,SAAY,IAAIV,EAAA,EAAW,CAACO,EAAYf,MAE1Ce,EAAaf,EAGfmB,IAAMC,EAAS,IAAIX,EAAA,EAAY,CAC7BY,OAAQ,IAAIX,EAAA,EAAa,CACvBG,SAAUA,EACVS,OAAO,IAETC,MAAO,IAAIZ,EAAA,EAAM,CACfa,OAAQ,IAAIZ,EAAA,EAAO,CACjBa,MAAO,UACPC,MAAO,QAKPC,EAAO,IAAIpB,EAAA,EAAK,CACpBqB,OAAQ,CAAC,EAAG,GACZC,KAAM,IAGI,IAAIvB,EAAA,EAAI,CAClBwB,OAAQ,CAACV,GACTW,OAAQ,MACRJ,KAAMA","file":"synthetic-lines.js","sourcesContent":["import Feature from '../src/ol/Feature.js';\nimport Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport LineString from '../src/ol/geom/LineString.js';\nimport VectorLayer from '../src/ol/layer/Vector.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport {Stroke, Style} from '../src/ol/style.js';\n\n\nconst count = 10000;\nconst features = new Array(count);\n\nlet startPoint = [0, 0];\nlet endPoint;\n\nlet delta, deltaX, deltaY;\nlet signX = 1;\nlet signY = -1;\n\n// Create a square spiral.\nlet i;\nfor (i = 0; i < count; ++i) {\n  delta = (i + 1) * 2500;\n  if (i % 2 === 0) {\n    signY *= -1;\n  } else {\n    signX *= -1;\n  }\n  deltaX = delta * signX;\n  deltaY = delta * signY;\n  endPoint = [startPoint[0] + deltaX, startPoint[1] + deltaY];\n  features[i] = new Feature({\n    'geometry': new LineString([startPoint, endPoint])\n  });\n  startPoint = endPoint;\n}\n\nconst vector = new VectorLayer({\n  source: new VectorSource({\n    features: features,\n    wrapX: false\n  }),\n  style: new Style({\n    stroke: new Stroke({\n      color: '#666666',\n      width: 1\n    })\n  })\n});\n\nconst view = new View({\n  center: [0, 0],\n  zoom: 0\n});\n\nconst map = new Map({\n  layers: [vector],\n  target: 'map',\n  view: view\n});\n"],"sourceRoot":""}