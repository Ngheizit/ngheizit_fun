{"version":3,"sources":["webpack:///./cluster.js"],"names":["__webpack_require__","r","__webpack_exports__","_src_ol_Feature_js__WEBPACK_IMPORTED_MODULE_0__","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_1__","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_2__","_src_ol_geom_Point_js__WEBPACK_IMPORTED_MODULE_3__","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_4__","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_5__","_src_ol_source_js__WEBPACK_IMPORTED_MODULE_6__","_src_ol_source_js__WEBPACK_IMPORTED_MODULE_7__","_src_ol_source_js__WEBPACK_IMPORTED_MODULE_8__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_9__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_10__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_11__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_12__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_13__","distance","document","getElementById","features","Array","e","i","const","coordinates","Math","random","source","clusterSource","parseInt","value","styleCache","clusters","style","feature","size","get","length","image","radius","stroke","color","fill","text","toString","raster","layers","target","view","center","zoom","addEventListener","setDistance"],"mappings":"2FAAAA,EAAAC,EAAAC,GAcA,IAdA,IAAAC,EAAAH,EAAA,IAAAI,EAAAJ,EAAA,GAAAK,EAAAL,EAAA,GAAAM,EAAAN,EAAA,IAAAO,EAAAP,EAAA,IAAAQ,EAAAR,EAAA,GAAAS,EAAAT,EAAA,IAAAU,EAAAV,EAAA,KAAAW,EAAAX,EAAA,IAAAY,EAAAZ,EAAA,IAAAa,EAAAb,EAAA,IAAAc,EAAAd,EAAA,IAAAe,EAAAf,EAAA,IAAAgB,EAAAhB,EAAA,IASMiB,EAAWC,SAASC,eAAe,YAGnCC,EAAW,IAAIC,MADP,KAERC,EAAI,KACDC,EAAI,EAAGA,EAHF,MAGeA,EAAG,CAC9BC,IAAMC,EAAc,CAAC,IAAQC,KAAKC,SAAWL,EAAG,IAAQI,KAAKC,SAAWL,GACxEF,EAASG,GAAK,IAAIpB,EAAA,EAAQ,IAAIG,EAAA,EAAMmB,IAGtCD,IAAMI,EAAS,IAAInB,EAAA,EAAa,CAC9BW,SAAUA,IAGNS,EAAgB,IAAInB,EAAA,EAAQ,CAChCO,SAAUa,SAASb,EAASc,MAAO,IACnCH,OAAQA,IAGJI,EAAa,GACbC,EAAW,IAAI1B,EAAA,EAAY,CAC/BqB,OAAQC,EACRK,MAAO,SAASC,GACdX,IAAMY,EAAOD,EAAQE,IAAI,YAAYC,OACjCJ,EAAQF,EAAWI,GAqBvB,OApBKF,IACHA,EAAQ,IAAItB,EAAA,EAAM,CAChB2B,MAAO,IAAI1B,EAAA,EAAY,CACrB2B,OAAQ,GACRC,OAAQ,IAAI3B,EAAA,EAAO,CACjB4B,MAAO,SAETC,KAAM,IAAI5B,EAAA,EAAK,CACb2B,MAAO,cAGXE,KAAM,IAAI5B,EAAA,EAAK,CACb4B,KAAMR,EAAKS,WACXF,KAAM,IAAI5B,EAAA,EAAK,CACb2B,MAAO,aAIbV,EAAWI,GAAQF,GAEdA,KAILY,EAAS,IAAItC,EAAA,EAAU,CAC3BoB,OAAQ,IAAIjB,EAAA,IAGF,IAAIP,EAAA,EAAI,CAClB2C,OAAQ,CAACD,EAAQb,GACjBe,OAAQ,MACRC,KAAM,IAAI5C,EAAA,EAAK,CACb6C,OAAQ,CAAC,EAAG,GACZC,KAAM,MAIVlC,EAASmC,iBAAiB,QAAS,WACjCvB,EAAcwB,YAAYvB,SAASb,EAASc,MAAO","file":"cluster.js","sourcesContent":["import Feature from '../src/ol/Feature.js';\nimport Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport Point from '../src/ol/geom/Point.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\nimport {Cluster, OSM, Vector as VectorSource} from '../src/ol/source.js';\nimport {Circle as CircleStyle, Fill, Stroke, Style, Text} from '../src/ol/style.js';\n\n\nconst distance = document.getElementById('distance');\n\nconst count = 20000;\nconst features = new Array(count);\nconst e = 4500000;\nfor (let i = 0; i < count; ++i) {\n  const coordinates = [2 * e * Math.random() - e, 2 * e * Math.random() - e];\n  features[i] = new Feature(new Point(coordinates));\n}\n\nconst source = new VectorSource({\n  features: features\n});\n\nconst clusterSource = new Cluster({\n  distance: parseInt(distance.value, 10),\n  source: source\n});\n\nconst styleCache = {};\nconst clusters = new VectorLayer({\n  source: clusterSource,\n  style: function(feature) {\n    const size = feature.get('features').length;\n    let style = styleCache[size];\n    if (!style) {\n      style = new Style({\n        image: new CircleStyle({\n          radius: 10,\n          stroke: new Stroke({\n            color: '#fff'\n          }),\n          fill: new Fill({\n            color: '#3399CC'\n          })\n        }),\n        text: new Text({\n          text: size.toString(),\n          fill: new Fill({\n            color: '#fff'\n          })\n        })\n      });\n      styleCache[size] = style;\n    }\n    return style;\n  }\n});\n\nconst raster = new TileLayer({\n  source: new OSM()\n});\n\nconst map = new Map({\n  layers: [raster, clusters],\n  target: 'map',\n  view: new View({\n    center: [0, 0],\n    zoom: 2\n  })\n});\n\ndistance.addEventListener('input', function() {\n  clusterSource.setDistance(parseInt(distance.value, 10));\n});\n"],"sourceRoot":""}