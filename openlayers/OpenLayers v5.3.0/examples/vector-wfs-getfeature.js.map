{"version":3,"sources":["webpack:///../src/ol/format/filter/Filter.js","webpack:///../src/ol/format/filter/LogicalNary.js","webpack:///../src/ol/format/filter/And.js","webpack:///../src/ol/format/filter/Bbox.js","webpack:///../src/ol/format/filter/Spatial.js","webpack:///../src/ol/format/filter/Comparison.js","webpack:///../src/ol/format/filter/Contains.js","webpack:///../src/ol/format/filter/ComparisonBinary.js","webpack:///../src/ol/format/filter/During.js","webpack:///../src/ol/format/filter/EqualTo.js","webpack:///../src/ol/format/filter/IsLike.js","webpack:///../src/ol/format/filter/GreaterThan.js","webpack:///../src/ol/format/filter/GreaterThanOrEqualTo.js","webpack:///../src/ol/format/filter/Intersects.js","webpack:///../src/ol/format/filter/IsBetween.js","webpack:///../src/ol/format/filter/IsNull.js","webpack:///../src/ol/format/filter/LessThan.js","webpack:///../src/ol/format/filter/LessThanOrEqualTo.js","webpack:///../src/ol/format/filter/Not.js","webpack:///../src/ol/format/filter/NotEqualTo.js","webpack:///../src/ol/format/filter/Or.js","webpack:///../src/ol/format/filter/Within.js","webpack:///../src/ol/format/filter.js","webpack:///../src/ol/format/GML3.js","webpack:///../src/ol/format/WFS.js","webpack:///./vector-wfs-getfeature.js"],"names":["Filter_Filter","tagName","this","tagName_","prototype","getTagName","filter_Filter","filter_LogicalNary","Filter","LogicalNary","conditions","super","Object","asserts","length","constructor","filter_And","And","Array","slice","call","arguments","filter_Bbox","Bbox","geometryName","extent","opt_srsName","srsName","filter_Spatial","Spatial","geometry","filter_Comparison","Contains","Comparison","propertyName","filter_ComparisonBinary","During","begin","end","ComparisonBinary","expression","opt_matchCase","matchCase","filter_EqualTo","EqualTo","filter_IsLike","GreaterThan","GreaterThanOrEqualTo","Intersects","IsBetween","lowerBoundary","upperBoundary","IsLike","pattern","opt_wildCard","opt_singleChar","opt_escapeChar","wildCard","undefined","singleChar","escapeChar","IsNull","LessThan","LessThanOrEqualTo","Not","condition","NotEqualTo","Or","Within","and","const","params","concat","Function","bind","apply","GML3_schemaLocation","format_GMLBase","MULTIGEOMETRY_TO_MEMBER_NODENAME","MultiLineString","MultiCurve","MultiPolygon","MultiSurface","GML3_GML3","GMLBase","GML3","opt_options","options","surface_","surface","curve_","curve","multiCurve_","multiCurve","multiSurface_","multiSurface","schemaLocation","hasZ","readMultiCurve_","node","objectStack","lineStrings","xml","MULTICURVE_PARSERS_","readMultiSurface_","polygons","MULTISURFACE_PARSERS_","curveMemberParser_","CURVEMEMBER_PARSERS_","surfaceMemberParser_","SURFACEMEMBER_PARSERS_","readPatch_","PATCHES_PARSERS_","readSegment_","SEGMENTS_PARSERS_","readPolygonPatch_","FLAT_LINEAR_RINGS_PARSERS","readLineStringSegment_","GEOMETRY_FLAT_COORDINATES_PARSERS","interiorParser_","flatLinearRing","RING_PARSERS","push","exteriorParser_","readSurface_","flatLinearRings","SURFACE_PARSERS_","i","ii","flatCoordinates","ends","array","Polygon","GeometryLayout","XYZ","readCurve_","CURVE_PARSERS_","LineString","readEnvelope_","ENVELOPE_PARSERS_","ol_extent","readFlatPos_","let","m","s","re","exec","parseFloat","substr","containerSrs","axisOrientation","ol_proj","getAxisOrientation","y","x","len","readFlatPosList_","replace","context","contextDimension","z","coords","split","dim","getAttribute","xsd","writePos_","value","srsDimension","setAttribute","point","getCoordinates","getCoords_","opt_hasZ","writePosList_","points","parts","join","writePoint_","pos","namespaceURI","appendChild","writeEnvelope","values","ENVELOPE_SERIALIZERS_","writeLinearRing_","posList","RING_NODE_FACTORY_","opt_nodeName","parentNode","exteriorWritten","writeSurfaceOrPolygon_","nodeName","rings","getLinearRings","RING_SERIALIZERS_","patches","writeSurfacePatches_","writeCurveOrLineString_","segments","writeCurveSegments_","writeMultiSurfaceOrPolygon_","getPolygons","SURFACEORPOLYGONMEMBER_SERIALIZERS_","MULTIGEOMETRY_MEMBER_NODE_FACTORY_","writeMultiPoint_","getPoints","POINTMEMBER_SERIALIZERS_","writeMultiCurveOrLineString_","lines","getLineStrings","LINESTRINGORCURVEMEMBER_SERIALIZERS_","writeRing_","ring","linearRing","writeSurfaceOrPolygonMember_","polygon","child","GEOMETRY_NODE_FACTORY_","writePointMember_","writeLineStringOrCurveMember_","line","writeGeometryElement","item","ol_obj","isArray","dataProjection","featureProjection","Feature","GEOMETRY_SERIALIZERS_","writeFeatureElement","feature","fid","getId","featureNS","getGeometryName","serializers","properties","getProperties","keys","key","getSimplifiedGeometry","writeFeatureMembers_","features","featureType","namespace","getType","writeGeometryNode","adaptOptions","geom","writeFeaturesNode","setAttributeNS","http://www.opengis.net/gml","interior","exterior","GEOMETRY_PARSERS","Point","readPoint","MultiPoint","readMultiPoint","readLineString","readMultiLineString","LinearRing","readLinearRing","readPolygon","readMultiPolygon","Surface","Curve","Envelope","curveMember","curveMembers","surfaceMember","surfaceMembers","lowerCorner","upperCorner","PolygonPatch","LineStringSegment","writeFeatures","polygonMember","pointMember","lineStringMember","format_GML3","FEATURE_COLLECTION_PARSERS","boundedBy","readGeometryElement","TRANSACTION_SUMMARY_PARSERS","http://www.opengis.net/wfs","totalInserted","totalUpdated","totalDeleted","TRANSACTION_RESPONSE_PARSERS","TransactionSummary","InsertResults","INSERT_RESULTS_PARSERS","QUERY_SERIALIZERS","PropertyName","TRANSACTION_SERIALIZERS","Insert","gmlVersion","GML2","Update","featurePrefix","typeName","getTypeName","XMLNS","getKeys","get","name","writeOgcFidFilter","Delete","Property","pair","WFSNS","Native","nativeElement","vendorId","safeToIgnore","String","FEATURE_PREFIX","OGCNS","SCHEMA_LOCATIONS","1.1.0","1.0.0","WFS_WFS","XMLFeature","WFS","featureType_","featureNS_","gmlFormat_","gmlFormat","schemaLocation_","getFeatureType","setFeatureType","readFeaturesFromNode","getReadOptions","readFeaturesInternal","readTransactionResponse","source","readTransactionResponseFromDocument","readTransactionResponseFromNode","doc","readFeatureCollectionMetadata","readFeatureCollectionMetadataFromDocument","readFeatureCollectionMetadataFromNode","n","nextSibling","nodeType","Node","ELEMENT_NODE","result","writeGetFeature","filter","handle","outputFormat","maxFeatures","resultType","startIndex","count","viewParams","bbox","featureTypes","propertyNames","GETFEATURE_SERIALIZERS","writeTransaction","inserts","updates","deletes","baseObj","obj","version","gmlOptions","nativeElements","readProjectionFromDocument","readProjectionFromNode","firstElementChild","nextElementSibling","childNodes","firstChild","pop","format_XMLFeature","OGC_FID_PARSERS","http://www.opengis.net/ogc","FeatureId","prefix","indexOf","Query","writeFilterCondition","valueReference","timePeriod","writeTimeInstant","writeLogicalFilter","BBOX","writeOgcPropertyName","PropertyIsEqualTo","writeComparisonFilter","PropertyIsNotEqualTo","PropertyIsLessThan","PropertyIsLessThanOrEqualTo","PropertyIsGreaterThan","PropertyIsGreaterThanOrEqualTo","PropertyIsNull","PropertyIsBetween","writeOgcLiteral","PropertyIsLike","toString","writeOgcExpression","property","time","timeInstant","timePosition","format_WFS","vectorSource","source_Vector","vector","Vector","style","Style","stroke","Stroke","color","width","raster","Tile","BingMaps","imagerySet","map","Map","layers","target","document","getElementById","view","View","center","maxZoom","zoom","featureRequest","fetch","method","body","XMLSerializer","serializeToString","then","response","json","GeoJSON","readFeatures","addFeatures","getView","fit","getExtent"],"mappings":"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","file":"vector-wfs-getfeature.js","sourcesContent":["/**\n * @module ol/format/filter/Filter\n */\n\n\n/**\n * @classdesc\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\n * Base class for WFS GetFeature filters.\n *\n * @abstract\n */\nclass Filter {\n  /**\n   * @param {!string} tagName The XML tag name for this filter.\n   */\n  constructor(tagName) {\n\n    /**\n     * @private\n     * @type {!string}\n     */\n    this.tagName_ = tagName;\n  }\n\n  /**\n   * The XML tag name for a filter.\n   * @returns {!string} Name.\n   */\n  getTagName() {\n    return this.tagName_;\n  }\n}\n\nexport default Filter;\n","/**\n * @module ol/format/filter/LogicalNary\n */\nimport {assert} from '../../asserts.js';\nimport Filter from './Filter.js';\n\n/**\n * @classdesc\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\n * Base class for WFS GetFeature n-ary logical filters.\n *\n * @abstract\n */\nclass LogicalNary extends Filter {\n\n  /**\n   * @param {!string} tagName The XML tag name for this filter.\n   * @param {Array<import(\"./Filter.js\").default>} conditions Conditions.\n   */\n  constructor(tagName, conditions) {\n\n    super(tagName);\n\n    /**\n     * @type {Array<import(\"./Filter.js\").default>}\n     */\n    this.conditions = conditions;\n    assert(this.conditions.length >= 2, 57); // At least 2 conditions are required.\n  }\n\n}\n\nexport default LogicalNary;\n","/**\n * @module ol/format/filter/And\n */\nimport LogicalNary from './LogicalNary.js';\n\n/**\n * @classdesc\n * Represents a logical `<And>` operator between two or more filter conditions.\n *\n * @abstract\n */\nclass And extends LogicalNary {\n\n  /**\n   * @param {...import(\"./Filter.js\").default} conditions Conditions.\n   */\n  constructor(conditions) {\n    super('And', Array.prototype.slice.call(arguments));\n  }\n\n}\n\nexport default And;\n","/**\n * @module ol/format/filter/Bbox\n */\nimport Filter from './Filter.js';\n\n/**\n * @classdesc\n * Represents a `<BBOX>` operator to test whether a geometry-valued property\n * intersects a fixed bounding box\n *\n * @api\n */\nclass Bbox extends Filter {\n\n  /**\n   * @param {!string} geometryName Geometry name to use.\n   * @param {!import(\"../../extent.js\").Extent} extent Extent.\n   * @param {string=} opt_srsName SRS name. No srsName attribute will be set\n   * on geometries when this is not provided.\n   */\n  constructor(geometryName, extent, opt_srsName) {\n\n    super('BBOX');\n\n    /**\n     * @type {!string}\n     */\n    this.geometryName = geometryName;\n\n    /**\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.extent = extent;\n\n    /**\n     * @type {string|undefined}\n     */\n    this.srsName = opt_srsName;\n  }\n\n}\n\nexport default Bbox;\n","/**\n * @module ol/format/filter/Spatial\n */\nimport Filter from './Filter.js';\n\n/**\n * @classdesc\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\n * Represents a spatial operator to test whether a geometry-valued property\n * relates to a given geometry.\n *\n * @abstract\n */\nclass Spatial extends Filter {\n\n  /**\n   * @param {!string} tagName The XML tag name for this filter.\n   * @param {!string} geometryName Geometry name to use.\n   * @param {!import(\"../../geom/Geometry.js\").default} geometry Geometry.\n   * @param {string=} opt_srsName SRS name. No srsName attribute will be\n   *    set on geometries when this is not provided.\n   */\n  constructor(tagName, geometryName, geometry, opt_srsName) {\n\n    super(tagName);\n\n    /**\n     * @type {!string}\n     */\n    this.geometryName = geometryName || 'the_geom';\n\n    /**\n     * @type {import(\"../../geom/Geometry.js\").default}\n     */\n    this.geometry = geometry;\n\n    /**\n     * @type {string|undefined}\n     */\n    this.srsName = opt_srsName;\n  }\n\n}\n\nexport default Spatial;\n","/**\n * @module ol/format/filter/Comparison\n */\nimport Filter from './Filter.js';\n\n/**\n * @classdesc\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\n * Base class for WFS GetFeature property comparison filters.\n *\n * @abstract\n */\nclass Comparison extends Filter {\n\n  /**\n   * @param {!string} tagName The XML tag name for this filter.\n   * @param {!string} propertyName Name of the context property to compare.\n   */\n  constructor(tagName, propertyName) {\n\n    super(tagName);\n\n    /**\n     * @type {!string}\n     */\n    this.propertyName = propertyName;\n  }\n\n}\n\nexport default Comparison;\n","/**\n * @module ol/format/filter/Contains\n */\nimport Spatial from './Spatial.js';\n\n/**\n * @classdesc\n * Represents a `<Contains>` operator to test whether a geometry-valued property\n * contains a given geometry.\n * @api\n */\nclass Contains extends Spatial {\n\n  /**\n   * @param {!string} geometryName Geometry name to use.\n   * @param {!import(\"../../geom/Geometry.js\").default} geometry Geometry.\n   * @param {string=} opt_srsName SRS name. No srsName attribute will be\n   *    set on geometries when this is not provided.\n   */\n  constructor(geometryName, geometry, opt_srsName) {\n\n    super('Contains', geometryName, geometry, opt_srsName);\n\n  }\n\n}\n\nexport default Contains;\n","/**\n * @module ol/format/filter/ComparisonBinary\n */\nimport Comparison from './Comparison.js';\n\n/**\n * @classdesc\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\n * Base class for WFS GetFeature property binary comparison filters.\n *\n * @abstract\n */\nclass ComparisonBinary extends Comparison {\n\n  /**\n   * @param {!string} tagName The XML tag name for this filter.\n   * @param {!string} propertyName Name of the context property to compare.\n   * @param {!(string|number)} expression The value to compare.\n   * @param {boolean=} opt_matchCase Case-sensitive?\n   */\n  constructor(tagName, propertyName, expression, opt_matchCase) {\n\n    super(tagName, propertyName);\n\n    /**\n     * @type {!(string|number)}\n     */\n    this.expression = expression;\n\n    /**\n     * @type {boolean|undefined}\n     */\n    this.matchCase = opt_matchCase;\n  }\n\n}\n\nexport default ComparisonBinary;\n","/**\n * @module ol/format/filter/During\n */\nimport Comparison from './Comparison.js';\n\n/**\n * @classdesc\n * Represents a `<During>` comparison operator.\n * @api\n */\nclass During extends Comparison {\n\n  /**\n   * @param {!string} propertyName Name of the context property to compare.\n   * @param {!string} begin The begin date in ISO-8601 format.\n   * @param {!string} end The end date in ISO-8601 format.\n   */\n  constructor(propertyName, begin, end) {\n    super('During', propertyName);\n\n    /**\n     * @type {!string}\n     */\n    this.begin = begin;\n\n    /**\n     * @type {!string}\n     */\n    this.end = end;\n  }\n\n}\n\nexport default During;\n","/**\n * @module ol/format/filter/EqualTo\n */\nimport ComparisonBinary from './ComparisonBinary.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsEqualTo>` comparison operator.\n * @api\n */\nclass EqualTo extends ComparisonBinary {\n\n  /**\n   * @param {!string} propertyName Name of the context property to compare.\n   * @param {!(string|number)} expression The value to compare.\n   * @param {boolean=} opt_matchCase Case-sensitive?\n   */\n  constructor(propertyName, expression, opt_matchCase) {\n    super('PropertyIsEqualTo', propertyName, expression, opt_matchCase);\n  }\n\n}\n\nexport default EqualTo;\n","/**\n * @module ol/format/filter/IsLike\n */\nimport Comparison from './Comparison.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsLike>` comparison operator.\n * @api\n */\nclass IsLike extends Comparison {\n\n  /**\n   * [constructor description]\n   * @param {!string} propertyName Name of the context property to compare.\n   * @param {!string} pattern Text pattern.\n   * @param {string=} opt_wildCard Pattern character which matches any sequence of\n   *    zero or more string characters. Default is '*'.\n   * @param {string=} opt_singleChar pattern character which matches any single\n   *    string character. Default is '.'.\n   * @param {string=} opt_escapeChar Escape character which can be used to escape\n   *    the pattern characters. Default is '!'.\n   * @param {boolean=} opt_matchCase Case-sensitive?\n   */\n  constructor(propertyName, pattern, opt_wildCard, opt_singleChar, opt_escapeChar, opt_matchCase) {\n    super('PropertyIsLike', propertyName);\n\n    /**\n     * @type {!string}\n     */\n    this.pattern = pattern;\n\n    /**\n     * @type {!string}\n     */\n    this.wildCard = (opt_wildCard !== undefined) ? opt_wildCard : '*';\n\n    /**\n     * @type {!string}\n     */\n    this.singleChar = (opt_singleChar !== undefined) ? opt_singleChar : '.';\n\n    /**\n     * @type {!string}\n     */\n    this.escapeChar = (opt_escapeChar !== undefined) ? opt_escapeChar : '!';\n\n    /**\n     * @type {boolean|undefined}\n     */\n    this.matchCase = opt_matchCase;\n\n  }\n}\n\nexport default IsLike;\n","/**\n * @module ol/format/filter/GreaterThan\n */\nimport ComparisonBinary from './ComparisonBinary.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsGreaterThan>` comparison operator.\n * @api\n */\nclass GreaterThan extends ComparisonBinary {\n\n  /**\n   * @param {!string} propertyName Name of the context property to compare.\n   * @param {!number} expression The value to compare.\n   */\n  constructor(propertyName, expression) {\n    super('PropertyIsGreaterThan', propertyName, expression);\n  }\n\n}\n\nexport default GreaterThan;\n","/**\n * @module ol/format/filter/GreaterThanOrEqualTo\n */\nimport ComparisonBinary from './ComparisonBinary.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsGreaterThanOrEqualTo>` comparison operator.\n * @api\n */\nclass GreaterThanOrEqualTo extends ComparisonBinary {\n\n  /**\n   * @param {!string} propertyName Name of the context property to compare.\n   * @param {!number} expression The value to compare.\n   */\n  constructor(propertyName, expression) {\n    super('PropertyIsGreaterThanOrEqualTo', propertyName, expression);\n  }\n\n}\n\nexport default GreaterThanOrEqualTo;\n","/**\n * @module ol/format/filter/Intersects\n */\nimport Spatial from './Spatial.js';\n\n/**\n * @classdesc\n * Represents a `<Intersects>` operator to test whether a geometry-valued property\n * intersects a given geometry.\n * @api\n */\nclass Intersects extends Spatial {\n\n  /**\n   * @param {!string} geometryName Geometry name to use.\n   * @param {!import(\"../../geom/Geometry.js\").default} geometry Geometry.\n   * @param {string=} opt_srsName SRS name. No srsName attribute will be\n   *    set on geometries when this is not provided.\n   */\n  constructor(geometryName, geometry, opt_srsName) {\n    super('Intersects', geometryName, geometry, opt_srsName);\n  }\n\n}\n\nexport default Intersects;\n","/**\n * @module ol/format/filter/IsBetween\n */\nimport Comparison from './Comparison.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsBetween>` comparison operator.\n * @api\n */\nclass IsBetween extends Comparison {\n\n  /**\n   * @param {!string} propertyName Name of the context property to compare.\n   * @param {!number} lowerBoundary The lower bound of the range.\n   * @param {!number} upperBoundary The upper bound of the range.\n   */\n  constructor(propertyName, lowerBoundary, upperBoundary) {\n    super('PropertyIsBetween', propertyName);\n\n    /**\n     * @type {!number}\n     */\n    this.lowerBoundary = lowerBoundary;\n\n    /**\n     * @type {!number}\n     */\n    this.upperBoundary = upperBoundary;\n\n  }\n}\n\nexport default IsBetween;\n","/**\n * @module ol/format/filter/IsNull\n */\nimport Comparison from './Comparison.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsNull>` comparison operator.\n * @api\n */\nclass IsNull extends Comparison {\n\n  /**\n   * @param {!string} propertyName Name of the context property to compare.\n   */\n  constructor(propertyName) {\n    super('PropertyIsNull', propertyName);\n  }\n\n}\n\nexport default IsNull;\n","/**\n * @module ol/format/filter/LessThan\n */\nimport ComparisonBinary from './ComparisonBinary.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsLessThan>` comparison operator.\n * @api\n */\nclass LessThan extends ComparisonBinary {\n\n  /**\n   * @param {!string} propertyName Name of the context property to compare.\n   * @param {!number} expression The value to compare.\n   */\n  constructor(propertyName, expression) {\n    super('PropertyIsLessThan', propertyName, expression);\n  }\n\n}\n\nexport default LessThan;\n","/**\n * @module ol/format/filter/LessThanOrEqualTo\n */\nimport ComparisonBinary from './ComparisonBinary.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsLessThanOrEqualTo>` comparison operator.\n * @api\n */\nclass LessThanOrEqualTo extends ComparisonBinary {\n\n  /**\n   * @param {!string} propertyName Name of the context property to compare.\n   * @param {!number} expression The value to compare.\n   */\n  constructor(propertyName, expression) {\n    super('PropertyIsLessThanOrEqualTo', propertyName, expression);\n  }\n\n}\n\nexport default LessThanOrEqualTo;\n","/**\n * @module ol/format/filter/Not\n */\nimport Filter from './Filter.js';\n\n/**\n * @classdesc\n * Represents a logical `<Not>` operator for a filter condition.\n * @api\n */\nclass Not extends Filter {\n\n  /**\n   * @param {!import(\"./Filter.js\").default} condition Filter condition.\n   */\n  constructor(condition) {\n\n    super('Not');\n\n    /**\n     * @type {!import(\"./Filter.js\").default}\n     */\n    this.condition = condition;\n\n  }\n\n}\n\nexport default Not;\n","/**\n * @module ol/format/filter/NotEqualTo\n */\nimport ComparisonBinary from './ComparisonBinary.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsNotEqualTo>` comparison operator.\n * @api\n */\nclass NotEqualTo extends ComparisonBinary {\n\n  /**\n   * @param {!string} propertyName Name of the context property to compare.\n   * @param {!(string|number)} expression The value to compare.\n   * @param {boolean=} opt_matchCase Case-sensitive?\n   */\n  constructor(propertyName, expression, opt_matchCase) {\n    super('PropertyIsNotEqualTo', propertyName, expression, opt_matchCase);\n  }\n\n}\n\nexport default NotEqualTo;\n","/**\n * @module ol/format/filter/Or\n */\nimport LogicalNary from './LogicalNary.js';\n\n/**\n * @classdesc\n * Represents a logical `<Or>` operator between two ore more filter conditions.\n * @api\n */\nclass Or extends LogicalNary {\n\n  /**\n   * @param {...import(\"./Filter.js\").default} conditions Conditions.\n   */\n  constructor(conditions) {\n    super('Or', Array.prototype.slice.call(arguments));\n  }\n\n}\n\nexport default Or;\n","/**\n * @module ol/format/filter/Within\n */\nimport Spatial from './Spatial.js';\n\n/**\n * @classdesc\n * Represents a `<Within>` operator to test whether a geometry-valued property\n * is within a given geometry.\n * @api\n */\nclass Within extends Spatial {\n\n  /**\n   * @param {!string} geometryName Geometry name to use.\n   * @param {!import(\"../../geom/Geometry.js\").default} geometry Geometry.\n   * @param {string=} opt_srsName SRS name. No srsName attribute will be\n   *    set on geometries when this is not provided.\n   */\n  constructor(geometryName, geometry, opt_srsName) {\n    super('Within', geometryName, geometry, opt_srsName);\n  }\n\n}\n\nexport default Within;\n","/**\n * @module ol/format/filter\n */\nimport And from './filter/And.js';\nimport Bbox from './filter/Bbox.js';\nimport Contains from './filter/Contains.js';\nimport During from './filter/During.js';\nimport EqualTo from './filter/EqualTo.js';\nimport GreaterThan from './filter/GreaterThan.js';\nimport GreaterThanOrEqualTo from './filter/GreaterThanOrEqualTo.js';\nimport Intersects from './filter/Intersects.js';\nimport IsBetween from './filter/IsBetween.js';\nimport IsLike from './filter/IsLike.js';\nimport IsNull from './filter/IsNull.js';\nimport LessThan from './filter/LessThan.js';\nimport LessThanOrEqualTo from './filter/LessThanOrEqualTo.js';\nimport Not from './filter/Not.js';\nimport NotEqualTo from './filter/NotEqualTo.js';\nimport Or from './filter/Or.js';\nimport Within from './filter/Within.js';\n\n\n/**\n * Create a logical `<And>` operator between two or more filter conditions.\n *\n * @param {...import(\"./filter/Filter.js\").default} conditions Filter conditions.\n * @returns {!And} `<And>` operator.\n * @api\n */\nexport function and(conditions) {\n  const params = [null].concat(Array.prototype.slice.call(arguments));\n  return new (Function.prototype.bind.apply(And, params));\n}\n\n\n/**\n * Create a logical `<Or>` operator between two or more filter conditions.\n *\n * @param {...import(\"./filter/Filter.js\").default} conditions Filter conditions.\n * @returns {!Or} `<Or>` operator.\n * @api\n */\nexport function or(conditions) {\n  const params = [null].concat(Array.prototype.slice.call(arguments));\n  return new (Function.prototype.bind.apply(Or, params));\n}\n\n\n/**\n * Represents a logical `<Not>` operator for a filter condition.\n *\n * @param {!import(\"./filter/Filter.js\").default} condition Filter condition.\n * @returns {!Not} `<Not>` operator.\n * @api\n */\nexport function not(condition) {\n  return new Not(condition);\n}\n\n\n/**\n * Create a `<BBOX>` operator to test whether a geometry-valued property\n * intersects a fixed bounding box\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!import(\"../extent.js\").Extent} extent Extent.\n * @param {string=} opt_srsName SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @returns {!Bbox} `<BBOX>` operator.\n * @api\n */\nexport function bbox(geometryName, extent, opt_srsName) {\n  return new Bbox(geometryName, extent, opt_srsName);\n}\n\n/**\n * Create a `<Contains>` operator to test whether a geometry-valued property\n * contains a given geometry.\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {string=} opt_srsName SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @returns {!Contains} `<Contains>` operator.\n * @api\n */\nexport function contains(geometryName, geometry, opt_srsName) {\n  return new Contains(geometryName, geometry, opt_srsName);\n}\n\n/**\n * Create a `<Intersects>` operator to test whether a geometry-valued property\n * intersects a given geometry.\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {string=} opt_srsName SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @returns {!Intersects} `<Intersects>` operator.\n * @api\n */\nexport function intersects(geometryName, geometry, opt_srsName) {\n  return new Intersects(geometryName, geometry, opt_srsName);\n}\n\n/**\n * Create a `<Within>` operator to test whether a geometry-valued property\n * is within a given geometry.\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {string=} opt_srsName SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @returns {!Within} `<Within>` operator.\n * @api\n */\nexport function within(geometryName, geometry, opt_srsName) {\n  return new Within(geometryName, geometry, opt_srsName);\n}\n\n\n/**\n * Creates a `<PropertyIsEqualTo>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!(string|number)} expression The value to compare.\n * @param {boolean=} opt_matchCase Case-sensitive?\n * @returns {!EqualTo} `<PropertyIsEqualTo>` operator.\n * @api\n */\nexport function equalTo(propertyName, expression, opt_matchCase) {\n  return new EqualTo(propertyName, expression, opt_matchCase);\n}\n\n\n/**\n * Creates a `<PropertyIsNotEqualTo>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!(string|number)} expression The value to compare.\n * @param {boolean=} opt_matchCase Case-sensitive?\n * @returns {!NotEqualTo} `<PropertyIsNotEqualTo>` operator.\n * @api\n */\nexport function notEqualTo(propertyName, expression, opt_matchCase) {\n  return new NotEqualTo(propertyName, expression, opt_matchCase);\n}\n\n\n/**\n * Creates a `<PropertyIsLessThan>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @returns {!LessThan} `<PropertyIsLessThan>` operator.\n * @api\n */\nexport function lessThan(propertyName, expression) {\n  return new LessThan(propertyName, expression);\n}\n\n\n/**\n * Creates a `<PropertyIsLessThanOrEqualTo>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @returns {!LessThanOrEqualTo} `<PropertyIsLessThanOrEqualTo>` operator.\n * @api\n */\nexport function lessThanOrEqualTo(propertyName, expression) {\n  return new LessThanOrEqualTo(propertyName, expression);\n}\n\n\n/**\n * Creates a `<PropertyIsGreaterThan>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @returns {!GreaterThan} `<PropertyIsGreaterThan>` operator.\n * @api\n */\nexport function greaterThan(propertyName, expression) {\n  return new GreaterThan(propertyName, expression);\n}\n\n\n/**\n * Creates a `<PropertyIsGreaterThanOrEqualTo>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @returns {!GreaterThanOrEqualTo} `<PropertyIsGreaterThanOrEqualTo>` operator.\n * @api\n */\nexport function greaterThanOrEqualTo(propertyName, expression) {\n  return new GreaterThanOrEqualTo(propertyName, expression);\n}\n\n\n/**\n * Creates a `<PropertyIsNull>` comparison operator to test whether a property value\n * is null.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @returns {!IsNull} `<PropertyIsNull>` operator.\n * @api\n */\nexport function isNull(propertyName) {\n  return new IsNull(propertyName);\n}\n\n\n/**\n * Creates a `<PropertyIsBetween>` comparison operator to test whether an expression\n * value lies within a range given by a lower and upper bound (inclusive).\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} lowerBoundary The lower bound of the range.\n * @param {!number} upperBoundary The upper bound of the range.\n * @returns {!IsBetween} `<PropertyIsBetween>` operator.\n * @api\n */\nexport function between(propertyName, lowerBoundary, upperBoundary) {\n  return new IsBetween(propertyName, lowerBoundary, upperBoundary);\n}\n\n\n/**\n * Represents a `<PropertyIsLike>` comparison operator that matches a string property\n * value against a text pattern.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!string} pattern Text pattern.\n * @param {string=} opt_wildCard Pattern character which matches any sequence of\n *    zero or more string characters. Default is '*'.\n * @param {string=} opt_singleChar pattern character which matches any single\n *    string character. Default is '.'.\n * @param {string=} opt_escapeChar Escape character which can be used to escape\n *    the pattern characters. Default is '!'.\n * @param {boolean=} opt_matchCase Case-sensitive?\n * @returns {!IsLike} `<PropertyIsLike>` operator.\n * @api\n */\nexport function like(propertyName, pattern,\n  opt_wildCard, opt_singleChar, opt_escapeChar, opt_matchCase) {\n  return new IsLike(propertyName, pattern,\n    opt_wildCard, opt_singleChar, opt_escapeChar, opt_matchCase);\n}\n\n\n/**\n * Create a `<During>` temporal operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!string} begin The begin date in ISO-8601 format.\n * @param {!string} end The end date in ISO-8601 format.\n * @returns {!During} `<During>` operator.\n * @api\n */\nexport function during(propertyName, begin, end) {\n  return new During(propertyName, begin, end);\n}\n","/**\n * @module ol/format/GML3\n */\nimport {extend} from '../array.js';\nimport {createOrUpdate} from '../extent.js';\nimport {transformWithOptions} from './Feature.js';\nimport GMLBase, {GMLNS} from './GMLBase.js';\nimport {readNonNegativeIntegerString, writeStringTextNode} from './xsd.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Polygon from '../geom/Polygon.js';\nimport {assign} from '../obj.js';\nimport {get as getProjection, transformExtent} from '../proj.js';\nimport {createElementNS, getAllTextContent, makeArrayPusher, makeChildAppender,\n  makeReplacer, makeSimpleNodeFactory, OBJECT_PROPERTY_NODE_FACTORY, parseNode,\n  pushParseAndPop, pushSerializeAndPop, XML_SCHEMA_INSTANCE_URI} from '../xml.js';\n\n\n/**\n * @const\n * @type {string}\n * @private\n */\nconst schemaLocation = GMLNS +\n    ' http://schemas.opengis.net/gml/3.1.1/profiles/gmlsfProfile/' +\n    '1.0.0/gmlsf.xsd';\n\n\n/**\n * @const\n * @type {Object<string, string>}\n */\nconst MULTIGEOMETRY_TO_MEMBER_NODENAME = {\n  'MultiLineString': 'lineStringMember',\n  'MultiCurve': 'curveMember',\n  'MultiPolygon': 'polygonMember',\n  'MultiSurface': 'surfaceMember'\n};\n\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the GML format\n * version 3.1.1.\n * Currently only supports GML 3.1.1 Simple Features profile.\n *\n * @api\n */\nclass GML3 extends GMLBase {\n\n  /**\n   * @param {import(\"./GMLBase.js\").Options=} opt_options Optional configuration object.\n   */\n  constructor(opt_options) {\n    const options = /** @type {import(\"./GMLBase.js\").Options} */\n        (opt_options ? opt_options : {});\n\n    super(options);\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.surface_ = options.surface !== undefined ? options.surface : false;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.curve_ = options.curve !== undefined ? options.curve : false;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.multiCurve_ = options.multiCurve !== undefined ?\n      options.multiCurve : true;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.multiSurface_ = options.multiSurface !== undefined ?\n      options.multiSurface : true;\n\n    /**\n     * @inheritDoc\n     */\n    this.schemaLocation = options.schemaLocation ?\n      options.schemaLocation : schemaLocation;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hasZ = options.hasZ !== undefined ?\n      options.hasZ : false;\n\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {MultiLineString|undefined} MultiLineString.\n   */\n  readMultiCurve_(node, objectStack) {\n    /** @type {Array<LineString>} */\n    const lineStrings = pushParseAndPop([],\n      this.MULTICURVE_PARSERS_, node, objectStack, this);\n    if (lineStrings) {\n      const multiLineString = new MultiLineString(lineStrings);\n      return multiLineString;\n    } else {\n      return undefined;\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {MultiPolygon|undefined} MultiPolygon.\n   */\n  readMultiSurface_(node, objectStack) {\n    /** @type {Array<Polygon>} */\n    const polygons = pushParseAndPop([],\n      this.MULTISURFACE_PARSERS_, node, objectStack, this);\n    if (polygons) {\n      return new MultiPolygon(polygons);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   */\n  curveMemberParser_(node, objectStack) {\n    parseNode(this.CURVEMEMBER_PARSERS_, node, objectStack, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   */\n  surfaceMemberParser_(node, objectStack) {\n    parseNode(this.SURFACEMEMBER_PARSERS_,\n      node, objectStack, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {Array<(Array<number>)>|undefined} flat coordinates.\n   */\n  readPatch_(node, objectStack) {\n    return pushParseAndPop([null],\n      this.PATCHES_PARSERS_, node, objectStack, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {Array<number>|undefined} flat coordinates.\n   */\n  readSegment_(node, objectStack) {\n    return pushParseAndPop([null],\n      this.SEGMENTS_PARSERS_, node, objectStack, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {Array<(Array<number>)>|undefined} flat coordinates.\n   */\n  readPolygonPatch_(node, objectStack) {\n    return pushParseAndPop([null],\n      this.FLAT_LINEAR_RINGS_PARSERS, node, objectStack, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {Array<number>|undefined} flat coordinates.\n   */\n  readLineStringSegment_(node, objectStack) {\n    return pushParseAndPop([null],\n      this.GEOMETRY_FLAT_COORDINATES_PARSERS,\n      node, objectStack, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   */\n  interiorParser_(node, objectStack) {\n    /** @type {Array<number>|undefined} */\n    const flatLinearRing = pushParseAndPop(undefined,\n      this.RING_PARSERS, node, objectStack, this);\n    if (flatLinearRing) {\n      const flatLinearRings = /** @type {Array<Array<number>>} */\n          (objectStack[objectStack.length - 1]);\n      flatLinearRings.push(flatLinearRing);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   */\n  exteriorParser_(node, objectStack) {\n    /** @type {Array<number>|undefined} */\n    const flatLinearRing = pushParseAndPop(undefined,\n      this.RING_PARSERS, node, objectStack, this);\n    if (flatLinearRing) {\n      const flatLinearRings = /** @type {Array<Array<number>>} */\n          (objectStack[objectStack.length - 1]);\n      flatLinearRings[0] = flatLinearRing;\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {Polygon|undefined} Polygon.\n   */\n  readSurface_(node, objectStack) {\n    /** @type {Array<Array<number>>} */\n    const flatLinearRings = pushParseAndPop([null],\n      this.SURFACE_PARSERS_, node, objectStack, this);\n    if (flatLinearRings && flatLinearRings[0]) {\n      const flatCoordinates = flatLinearRings[0];\n      const ends = [flatCoordinates.length];\n      let i, ii;\n      for (i = 1, ii = flatLinearRings.length; i < ii; ++i) {\n        extend(flatCoordinates, flatLinearRings[i]);\n        ends.push(flatCoordinates.length);\n      }\n      return new Polygon(flatCoordinates, GeometryLayout.XYZ, ends);\n    } else {\n      return undefined;\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {LineString|undefined} LineString.\n   */\n  readCurve_(node, objectStack) {\n    /** @type {Array<number>} */\n    const flatCoordinates = pushParseAndPop([null],\n      this.CURVE_PARSERS_, node, objectStack, this);\n    if (flatCoordinates) {\n      const lineString = new LineString(flatCoordinates, GeometryLayout.XYZ);\n      return lineString;\n    } else {\n      return undefined;\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {import(\"../extent.js\").Extent|undefined} Envelope.\n   */\n  readEnvelope_(node, objectStack) {\n    /** @type {Array<number>} */\n    const flatCoordinates = pushParseAndPop([null],\n      this.ENVELOPE_PARSERS_, node, objectStack, this);\n    return createOrUpdate(flatCoordinates[1][0],\n      flatCoordinates[1][1], flatCoordinates[2][0],\n      flatCoordinates[2][1]);\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {Array<number>|undefined} Flat coordinates.\n   */\n  readFlatPos_(node, objectStack) {\n    let s = getAllTextContent(node, false);\n    const re = /^\\s*([+\\-]?\\d*\\.?\\d+(?:[eE][+\\-]?\\d+)?)\\s*/;\n    /** @type {Array<number>} */\n    const flatCoordinates = [];\n    let m;\n    while ((m = re.exec(s))) {\n      flatCoordinates.push(parseFloat(m[1]));\n      s = s.substr(m[0].length);\n    }\n    if (s !== '') {\n      return undefined;\n    }\n    const context = objectStack[0];\n    const containerSrs = context['srsName'];\n    let axisOrientation = 'enu';\n    if (containerSrs) {\n      const proj = getProjection(containerSrs);\n      axisOrientation = proj.getAxisOrientation();\n    }\n    if (axisOrientation === 'neu') {\n      let i, ii;\n      for (i = 0, ii = flatCoordinates.length; i < ii; i += 3) {\n        const y = flatCoordinates[i];\n        const x = flatCoordinates[i + 1];\n        flatCoordinates[i] = x;\n        flatCoordinates[i + 1] = y;\n      }\n    }\n    const len = flatCoordinates.length;\n    if (len == 2) {\n      flatCoordinates.push(0);\n    }\n    if (len === 0) {\n      return undefined;\n    }\n    return flatCoordinates;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {Array<number>|undefined} Flat coordinates.\n   */\n  readFlatPosList_(node, objectStack) {\n    const s = getAllTextContent(node, false).replace(/^\\s*|\\s*$/g, '');\n    const context = objectStack[0];\n    const containerSrs = context['srsName'];\n    const contextDimension = context['srsDimension'];\n    let axisOrientation = 'enu';\n    if (containerSrs) {\n      const proj = getProjection(containerSrs);\n      axisOrientation = proj.getAxisOrientation();\n    }\n    const coords = s.split(/\\s+/);\n    // The \"dimension\" attribute is from the GML 3.0.1 spec.\n    let dim = 2;\n    if (node.getAttribute('srsDimension')) {\n      dim = readNonNegativeIntegerString(\n        node.getAttribute('srsDimension'));\n    } else if (node.getAttribute('dimension')) {\n      dim = readNonNegativeIntegerString(\n        node.getAttribute('dimension'));\n    } else if (/** @type {Element} */ (node.parentNode).getAttribute('srsDimension')) {\n      dim = readNonNegativeIntegerString(\n        /** @type {Element} */ (node.parentNode).getAttribute('srsDimension'));\n    } else if (contextDimension) {\n      dim = readNonNegativeIntegerString(contextDimension);\n    }\n    let x, y, z;\n    const flatCoordinates = [];\n    for (let i = 0, ii = coords.length; i < ii; i += dim) {\n      x = parseFloat(coords[i]);\n      y = parseFloat(coords[i + 1]);\n      z = (dim === 3) ? parseFloat(coords[i + 2]) : 0;\n      if (axisOrientation.substr(0, 2) === 'en') {\n        flatCoordinates.push(x, y, z);\n      } else {\n        flatCoordinates.push(y, x, z);\n      }\n    }\n    return flatCoordinates;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/Point.js\").default} value Point geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writePos_(node, value, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsDimension = hasZ ? '3' : '2';\n    node.setAttribute('srsDimension', srsDimension);\n    const srsName = context['srsName'];\n    let axisOrientation = 'enu';\n    if (srsName) {\n      axisOrientation = getProjection(srsName).getAxisOrientation();\n    }\n    const point = value.getCoordinates();\n    let coords;\n    // only 2d for simple features profile\n    if (axisOrientation.substr(0, 2) === 'en') {\n      coords = (point[0] + ' ' + point[1]);\n    } else {\n      coords = (point[1] + ' ' + point[0]);\n    }\n    if (hasZ) {\n      // For newly created points, Z can be undefined.\n      const z = point[2] || 0;\n      coords += ' ' + z;\n    }\n    writeStringTextNode(node, coords);\n  }\n\n  /**\n   * @param {Array<number>} point Point geometry.\n   * @param {string=} opt_srsName Optional srsName\n   * @param {boolean=} opt_hasZ whether the geometry has a Z coordinate (is 3D) or not.\n   * @return {string} The coords string.\n   * @private\n   */\n  getCoords_(point, opt_srsName, opt_hasZ) {\n    let axisOrientation = 'enu';\n    if (opt_srsName) {\n      axisOrientation = getProjection(opt_srsName).getAxisOrientation();\n    }\n    let coords = ((axisOrientation.substr(0, 2) === 'en') ?\n      point[0] + ' ' + point[1] :\n      point[1] + ' ' + point[0]);\n    if (opt_hasZ) {\n      // For newly created points, Z can be undefined.\n      const z = point[2] || 0;\n      coords += ' ' + z;\n    }\n\n    return coords;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {LineString|import(\"../geom/LinearRing.js\").default} value Geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writePosList_(node, value, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsDimension = hasZ ? '3' : '2';\n    node.setAttribute('srsDimension', srsDimension);\n    const srsName = context['srsName'];\n    // only 2d for simple features profile\n    const points = value.getCoordinates();\n    const len = points.length;\n    const parts = new Array(len);\n    let point;\n    for (let i = 0; i < len; ++i) {\n      point = points[i];\n      parts[i] = this.getCoords_(point, srsName, hasZ);\n    }\n    writeStringTextNode(node, parts.join(' '));\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/Point.js\").default} geometry Point geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writePoint_(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const pos = createElementNS(node.namespaceURI, 'pos');\n    node.appendChild(pos);\n    this.writePos_(pos, geometry, objectStack);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeEnvelope(node, extent, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const keys = ['lowerCorner', 'upperCorner'];\n    const values = [extent[0] + ' ' + extent[1], extent[2] + ' ' + extent[3]];\n    pushSerializeAndPop(/** @type {import(\"../xml.js\").NodeStackItem} */\n      ({node: node}), this.ENVELOPE_SERIALIZERS_,\n      OBJECT_PROPERTY_NODE_FACTORY,\n      values,\n      objectStack, keys, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/LinearRing.js\").default} geometry LinearRing geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeLinearRing_(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const posList = createElementNS(node.namespaceURI, 'posList');\n    node.appendChild(posList);\n    this.writePosList_(posList, geometry, objectStack);\n  }\n\n  /**\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string=} opt_nodeName Node name.\n   * @return {Node} Node.\n   * @private\n   */\n  RING_NODE_FACTORY_(value, objectStack, opt_nodeName) {\n    const context = objectStack[objectStack.length - 1];\n    const parentNode = context.node;\n    const exteriorWritten = context['exteriorWritten'];\n    if (exteriorWritten === undefined) {\n      context['exteriorWritten'] = true;\n    }\n    return createElementNS(parentNode.namespaceURI,\n      exteriorWritten !== undefined ? 'interior' : 'exterior');\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Polygon} geometry Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeSurfaceOrPolygon_(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    if (node.nodeName !== 'PolygonPatch' && srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    if (node.nodeName === 'Polygon' || node.nodeName === 'PolygonPatch') {\n      const rings = geometry.getLinearRings();\n      pushSerializeAndPop(\n        {node: node, hasZ: hasZ, srsName: srsName},\n        this.RING_SERIALIZERS_,\n        this.RING_NODE_FACTORY_,\n        rings, objectStack, undefined, this);\n    } else if (node.nodeName === 'Surface') {\n      const patches = createElementNS(node.namespaceURI, 'patches');\n      node.appendChild(patches);\n      this.writeSurfacePatches_(\n        patches, geometry, objectStack);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {LineString} geometry LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeCurveOrLineString_(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    if (node.nodeName !== 'LineStringSegment' && srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    if (node.nodeName === 'LineString' ||\n        node.nodeName === 'LineStringSegment') {\n      const posList = createElementNS(node.namespaceURI, 'posList');\n      node.appendChild(posList);\n      this.writePosList_(posList, geometry, objectStack);\n    } else if (node.nodeName === 'Curve') {\n      const segments = createElementNS(node.namespaceURI, 'segments');\n      node.appendChild(segments);\n      this.writeCurveSegments_(segments,\n        geometry, objectStack);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {MultiPolygon} geometry MultiPolygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeMultiSurfaceOrPolygon_(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    const surface = context['surface'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const polygons = geometry.getPolygons();\n    pushSerializeAndPop({node: node, hasZ: hasZ, srsName: srsName, surface: surface},\n      this.SURFACEORPOLYGONMEMBER_SERIALIZERS_,\n      this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_, polygons,\n      objectStack, undefined, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/MultiPoint.js\").default} geometry MultiPoint geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeMultiPoint_(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    const hasZ = context['hasZ'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const points = geometry.getPoints();\n    pushSerializeAndPop({node: node, hasZ: hasZ, srsName: srsName},\n      this.POINTMEMBER_SERIALIZERS_,\n      makeSimpleNodeFactory('pointMember'), points,\n      objectStack, undefined, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {MultiLineString} geometry MultiLineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeMultiCurveOrLineString_(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    const curve = context['curve'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const lines = geometry.getLineStrings();\n    pushSerializeAndPop({node: node, hasZ: hasZ, srsName: srsName, curve: curve},\n      this.LINESTRINGORCURVEMEMBER_SERIALIZERS_,\n      this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_, lines,\n      objectStack, undefined, this);\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/LinearRing.js\").default} ring LinearRing geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeRing_(node, ring, objectStack) {\n    const linearRing = createElementNS(node.namespaceURI, 'LinearRing');\n    node.appendChild(linearRing);\n    this.writeLinearRing_(linearRing, ring, objectStack);\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {Polygon} polygon Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeSurfaceOrPolygonMember_(node, polygon, objectStack) {\n    const child = this.GEOMETRY_NODE_FACTORY_(\n      polygon, objectStack);\n    if (child) {\n      node.appendChild(child);\n      this.writeSurfaceOrPolygon_(child, polygon, objectStack);\n    }\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/Point.js\").default} point Point geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writePointMember_(node, point, objectStack) {\n    const child = createElementNS(node.namespaceURI, 'Point');\n    node.appendChild(child);\n    this.writePoint_(child, point, objectStack);\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {LineString} line LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeLineStringOrCurveMember_(node, line, objectStack) {\n    const child = this.GEOMETRY_NODE_FACTORY_(line, objectStack);\n    if (child) {\n      node.appendChild(child);\n      this.writeCurveOrLineString_(child, line, objectStack);\n    }\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {Polygon} polygon Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeSurfacePatches_(node, polygon, objectStack) {\n    const child = createElementNS(node.namespaceURI, 'PolygonPatch');\n    node.appendChild(child);\n    this.writeSurfaceOrPolygon_(child, polygon, objectStack);\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {LineString} line LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeCurveSegments_(node, line, objectStack) {\n    const child = createElementNS(node.namespaceURI,\n      'LineStringSegment');\n    node.appendChild(child);\n    this.writeCurveOrLineString_(child, line, objectStack);\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/Geometry.js\").default|import(\"../extent.js\").Extent} geometry Geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeGeometryElement(node, geometry, objectStack) {\n    const context = /** @type {import(\"./Feature.js\").WriteOptions} */ (objectStack[objectStack.length - 1]);\n    const item = assign({}, context);\n    item['node'] = node;\n    let value;\n    if (Array.isArray(geometry)) {\n      if (context.dataProjection) {\n        value = transformExtent(\n          geometry, context.featureProjection, context.dataProjection);\n      } else {\n        value = geometry;\n      }\n    } else {\n      value = transformWithOptions(/** @type {import(\"../geom/Geometry.js\").default} */ (geometry), true, context);\n    }\n    pushSerializeAndPop(/** @type {import(\"../xml.js\").NodeStackItem} */\n      (item), this.GEOMETRY_SERIALIZERS_,\n      this.GEOMETRY_NODE_FACTORY_, [value],\n      objectStack, undefined, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeFeatureElement(node, feature, objectStack) {\n    const fid = feature.getId();\n    if (fid) {\n      node.setAttribute('fid', /** @type {string} */ (fid));\n    }\n    const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n    const featureNS = context['featureNS'];\n    const geometryName = feature.getGeometryName();\n    if (!context.serializers) {\n      context.serializers = {};\n      context.serializers[featureNS] = {};\n    }\n    const properties = feature.getProperties();\n    const keys = [];\n    const values = [];\n    for (const key in properties) {\n      const value = properties[key];\n      if (value !== null) {\n        keys.push(key);\n        values.push(value);\n        if (key == geometryName || typeof /** @type {?} */ (value).getSimplifiedGeometry === 'function') {\n          if (!(key in context.serializers[featureNS])) {\n            context.serializers[featureNS][key] = makeChildAppender(\n              this.writeGeometryElement, this);\n          }\n        } else {\n          if (!(key in context.serializers[featureNS])) {\n            context.serializers[featureNS][key] = makeChildAppender(writeStringTextNode);\n          }\n        }\n      }\n    }\n    const item = assign({}, context);\n    item.node = node;\n    pushSerializeAndPop(/** @type {import(\"../xml.js\").NodeStackItem} */\n      (item), context.serializers,\n      makeSimpleNodeFactory(undefined, featureNS),\n      values,\n      objectStack, keys);\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeFeatureMembers_(node, features, objectStack) {\n    const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n    const featureType = context['featureType'];\n    const featureNS = context['featureNS'];\n    /** @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>} */\n    const serializers = {};\n    serializers[featureNS] = {};\n    serializers[featureNS][featureType] = makeChildAppender(\n      this.writeFeatureElement, this);\n    const item = assign({}, context);\n    item.node = node;\n    pushSerializeAndPop(/** @type {import(\"../xml.js\").NodeStackItem} */\n      (item),\n      serializers,\n      makeSimpleNodeFactory(featureType, featureNS), features,\n      objectStack);\n  }\n\n  /**\n   * @const\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string=} opt_nodeName Node name.\n   * @return {Node|undefined} Node.\n   * @private\n   */\n  MULTIGEOMETRY_MEMBER_NODE_FACTORY_(value, objectStack, opt_nodeName) {\n    const parentNode = objectStack[objectStack.length - 1].node;\n    return createElementNS(this.namespace,\n      MULTIGEOMETRY_TO_MEMBER_NODENAME[parentNode.nodeName]);\n  }\n\n  /**\n   * @const\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string=} opt_nodeName Node name.\n   * @return {Element|undefined} Node.\n   * @private\n   */\n  GEOMETRY_NODE_FACTORY_(value, objectStack, opt_nodeName) {\n    const context = objectStack[objectStack.length - 1];\n    const multiSurface = context['multiSurface'];\n    const surface = context['surface'];\n    const curve = context['curve'];\n    const multiCurve = context['multiCurve'];\n    let nodeName;\n    if (!Array.isArray(value)) {\n      nodeName = /** @type {import(\"../geom/Geometry.js\").default} */ (value).getType();\n      if (nodeName === 'MultiPolygon' && multiSurface === true) {\n        nodeName = 'MultiSurface';\n      } else if (nodeName === 'Polygon' && surface === true) {\n        nodeName = 'Surface';\n      } else if (nodeName === 'LineString' && curve === true) {\n        nodeName = 'Curve';\n      } else if (nodeName === 'MultiLineString' && multiCurve === true) {\n        nodeName = 'MultiCurve';\n      }\n    } else {\n      nodeName = 'Envelope';\n    }\n    return createElementNS(this.namespace,\n      nodeName);\n  }\n\n  /**\n   * Encode a geometry in GML 3.1.1 Simple Features.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions=} opt_options Options.\n   * @return {Node} Node.\n   * @override\n   * @api\n   */\n  writeGeometryNode(geometry, opt_options) {\n    opt_options = this.adaptOptions(opt_options);\n    const geom = createElementNS(this.namespace, 'geom');\n    const context = {node: geom, hasZ: this.hasZ, srsName: this.srsName,\n      curve: this.curve_, surface: this.surface_,\n      multiSurface: this.multiSurface_, multiCurve: this.multiCurve_};\n    if (opt_options) {\n      assign(context, opt_options);\n    }\n    this.writeGeometryElement(geom, geometry, [context]);\n    return geom;\n  }\n\n  /**\n   * Encode an array of features in the GML 3.1.1 format as an XML node.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions=} opt_options Options.\n   * @return {Element} Node.\n   * @override\n   * @api\n   */\n  writeFeaturesNode(features, opt_options) {\n    opt_options = this.adaptOptions(opt_options);\n    const node = createElementNS(this.namespace, 'featureMembers');\n    node.setAttributeNS(XML_SCHEMA_INSTANCE_URI, 'xsi:schemaLocation', this.schemaLocation);\n    const context = {\n      srsName: this.srsName,\n      hasZ: this.hasZ,\n      curve: this.curve_,\n      surface: this.surface_,\n      multiSurface: this.multiSurface_,\n      multiCurve: this.multiCurve_,\n      featureNS: this.featureNS,\n      featureType: this.featureType\n    };\n    if (opt_options) {\n      assign(context, opt_options);\n    }\n    this.writeFeatureMembers_(node, features, [context]);\n    return node;\n  }\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @protected\n */\nGML3.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'pos': makeReplacer(GML3.prototype.readFlatPos_),\n    'posList': makeReplacer(GML3.prototype.readFlatPosList_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @protected\n */\nGML3.prototype.FLAT_LINEAR_RINGS_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'interior': GML3.prototype.interiorParser_,\n    'exterior': GML3.prototype.exteriorParser_\n  }\n};\n\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @protected\n */\nGML3.prototype.GEOMETRY_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'Point': makeReplacer(GMLBase.prototype.readPoint),\n    'MultiPoint': makeReplacer(\n      GMLBase.prototype.readMultiPoint),\n    'LineString': makeReplacer(\n      GMLBase.prototype.readLineString),\n    'MultiLineString': makeReplacer(\n      GMLBase.prototype.readMultiLineString),\n    'LinearRing': makeReplacer(\n      GMLBase.prototype.readLinearRing),\n    'Polygon': makeReplacer(GMLBase.prototype.readPolygon),\n    'MultiPolygon': makeReplacer(\n      GMLBase.prototype.readMultiPolygon),\n    'Surface': makeReplacer(GML3.prototype.readSurface_),\n    'MultiSurface': makeReplacer(\n      GML3.prototype.readMultiSurface_),\n    'Curve': makeReplacer(GML3.prototype.readCurve_),\n    'MultiCurve': makeReplacer(\n      GML3.prototype.readMultiCurve_),\n    'Envelope': makeReplacer(GML3.prototype.readEnvelope_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @private\n */\nGML3.prototype.MULTICURVE_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'curveMember': makeArrayPusher(\n      GML3.prototype.curveMemberParser_),\n    'curveMembers': makeArrayPusher(\n      GML3.prototype.curveMemberParser_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @private\n */\nGML3.prototype.MULTISURFACE_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'surfaceMember': makeArrayPusher(\n      GML3.prototype.surfaceMemberParser_),\n    'surfaceMembers': makeArrayPusher(\n      GML3.prototype.surfaceMemberParser_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @private\n */\nGML3.prototype.CURVEMEMBER_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'LineString': makeArrayPusher(\n      GMLBase.prototype.readLineString),\n    'Curve': makeArrayPusher(GML3.prototype.readCurve_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @private\n */\nGML3.prototype.SURFACEMEMBER_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'Polygon': makeArrayPusher(GMLBase.prototype.readPolygon),\n    'Surface': makeArrayPusher(GML3.prototype.readSurface_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @private\n */\nGML3.prototype.SURFACE_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'patches': makeReplacer(GML3.prototype.readPatch_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @private\n */\nGML3.prototype.CURVE_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'segments': makeReplacer(GML3.prototype.readSegment_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @private\n */\nGML3.prototype.ENVELOPE_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'lowerCorner': makeArrayPusher(\n      GML3.prototype.readFlatPosList_),\n    'upperCorner': makeArrayPusher(\n      GML3.prototype.readFlatPosList_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @private\n */\nGML3.prototype.PATCHES_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'PolygonPatch': makeReplacer(\n      GML3.prototype.readPolygonPatch_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @private\n */\nGML3.prototype.SEGMENTS_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'LineStringSegment': makeReplacer(\n      GML3.prototype.readLineStringSegment_)\n  }\n};\n\n\n/**\n * Encode an array of features in GML 3.1.1 Simple Features.\n *\n * @function\n * @param {Array<import(\"../Feature.js\").default>} features Features.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Options.\n * @return {string} Result.\n * @api\n */\nGML3.prototype.writeFeatures;\n\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n * @private\n */\nGML3.prototype.RING_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'exterior': makeChildAppender(GML3.prototype.writeRing_),\n    'interior': makeChildAppender(GML3.prototype.writeRing_)\n  }\n};\n\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n * @private\n */\nGML3.prototype.ENVELOPE_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'lowerCorner': makeChildAppender(writeStringTextNode),\n    'upperCorner': makeChildAppender(writeStringTextNode)\n  }\n};\n\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n * @private\n */\nGML3.prototype.SURFACEORPOLYGONMEMBER_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'surfaceMember': makeChildAppender(\n      GML3.prototype.writeSurfaceOrPolygonMember_),\n    'polygonMember': makeChildAppender(\n      GML3.prototype.writeSurfaceOrPolygonMember_)\n  }\n};\n\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n * @private\n */\nGML3.prototype.POINTMEMBER_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'pointMember': makeChildAppender(\n      GML3.prototype.writePointMember_)\n  }\n};\n\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n * @private\n */\nGML3.prototype.LINESTRINGORCURVEMEMBER_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'lineStringMember': makeChildAppender(\n      GML3.prototype.writeLineStringOrCurveMember_),\n    'curveMember': makeChildAppender(\n      GML3.prototype.writeLineStringOrCurveMember_)\n  }\n};\n\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n * @private\n */\nGML3.prototype.GEOMETRY_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'Curve': makeChildAppender(\n      GML3.prototype.writeCurveOrLineString_),\n    'MultiCurve': makeChildAppender(\n      GML3.prototype.writeMultiCurveOrLineString_),\n    'Point': makeChildAppender(GML3.prototype.writePoint_),\n    'MultiPoint': makeChildAppender(\n      GML3.prototype.writeMultiPoint_),\n    'LineString': makeChildAppender(\n      GML3.prototype.writeCurveOrLineString_),\n    'MultiLineString': makeChildAppender(\n      GML3.prototype.writeMultiCurveOrLineString_),\n    'LinearRing': makeChildAppender(\n      GML3.prototype.writeLinearRing_),\n    'Polygon': makeChildAppender(\n      GML3.prototype.writeSurfaceOrPolygon_),\n    'MultiPolygon': makeChildAppender(\n      GML3.prototype.writeMultiSurfaceOrPolygon_),\n    'Surface': makeChildAppender(\n      GML3.prototype.writeSurfaceOrPolygon_),\n    'MultiSurface': makeChildAppender(\n      GML3.prototype.writeMultiSurfaceOrPolygon_),\n    'Envelope': makeChildAppender(\n      GML3.prototype.writeEnvelope)\n  }\n};\n\nexport default GML3;\n","/**\n * @module ol/format/WFS\n */\nimport {assert} from '../asserts.js';\nimport GML2 from './GML2.js';\nimport GML3 from './GML3.js';\nimport GMLBase, {GMLNS} from './GMLBase.js';\nimport {and as andFilter, bbox as bboxFilter} from './filter.js';\nimport XMLFeature from './XMLFeature.js';\nimport {readNonNegativeIntegerString, readNonNegativeInteger, writeStringTextNode} from './xsd.js';\nimport {assign} from '../obj.js';\nimport {get as getProjection} from '../proj.js';\nimport {createElementNS, isDocument, makeArrayPusher, makeChildAppender,\n  makeObjectPropertySetter, makeSimpleNodeFactory, parse, parseNode,\n  pushParseAndPop, pushSerializeAndPop, XML_SCHEMA_INSTANCE_URI} from '../xml.js';\n\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nconst FEATURE_COLLECTION_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'boundedBy': makeObjectPropertySetter(\n      GMLBase.prototype.readGeometryElement, 'bounds')\n  }\n};\n\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nconst TRANSACTION_SUMMARY_PARSERS = {\n  'http://www.opengis.net/wfs': {\n    'totalInserted': makeObjectPropertySetter(readNonNegativeInteger),\n    'totalUpdated': makeObjectPropertySetter(readNonNegativeInteger),\n    'totalDeleted': makeObjectPropertySetter(readNonNegativeInteger)\n  }\n};\n\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nconst TRANSACTION_RESPONSE_PARSERS = {\n  'http://www.opengis.net/wfs': {\n    'TransactionSummary': makeObjectPropertySetter(\n      readTransactionSummary, 'transactionSummary'),\n    'InsertResults': makeObjectPropertySetter(\n      readInsertResults, 'insertIds')\n  }\n};\n\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nconst QUERY_SERIALIZERS = {\n  'http://www.opengis.net/wfs': {\n    'PropertyName': makeChildAppender(writeStringTextNode)\n  }\n};\n\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nconst TRANSACTION_SERIALIZERS = {\n  'http://www.opengis.net/wfs': {\n    'Insert': makeChildAppender(writeFeature),\n    'Update': makeChildAppender(writeUpdate),\n    'Delete': makeChildAppender(writeDelete),\n    'Property': makeChildAppender(writeProperty),\n    'Native': makeChildAppender(writeNative)\n  }\n};\n\n\n/**\n * @typedef {Object} Options\n * @property {Object<string, string>|string} [featureNS] The namespace URI used for features.\n * @property {Array<string>|string} [featureType] The feature type to parse. Only used for read operations.\n * @property {GMLBase} [gmlFormat] The GML format to use to parse the response. Default is `ol/format/GML3`.\n * @property {string} [schemaLocation] Optional schemaLocation to use for serialization, this will override the default.\n */\n\n\n/**\n * @typedef {Object} WriteGetFeatureOptions\n * @property {string} featureNS The namespace URI used for features.\n * @property {string} featurePrefix The prefix for the feature namespace.\n * @property {Array<string>} featureTypes The feature type names.\n * @property {string} [srsName] SRS name. No srsName attribute will be set on\n * geometries when this is not provided.\n * @property {string} [handle] Handle.\n * @property {string} [outputFormat] Output format.\n * @property {number} [maxFeatures] Maximum number of features to fetch.\n * @property {string} [geometryName] Geometry name to use in a BBOX filter.\n * @property {Array<string>} [propertyNames] Optional list of property names to serialize.\n * @property {string} [viewParams] viewParams GeoServer vendor parameter.\n * @property {number} [startIndex] Start index to use for WFS paging. This is a\n * WFS 2.0 feature backported to WFS 1.1.0 by some Web Feature Services.\n * @property {number} [count] Number of features to retrieve when paging. This is a\n * WFS 2.0 feature backported to WFS 1.1.0 by some Web Feature Services. Please note that some\n * Web Feature Services have repurposed `maxfeatures` instead.\n * @property {import(\"../extent.js\").Extent} [bbox] Extent to use for the BBOX filter.\n * @property {import(\"./filter/Filter.js\").default} [filter] Filter condition. See\n * {@link module:ol/format/Filter} for more information.\n * @property {string} [resultType] Indicates what response should be returned,\n * E.g. `hits` only includes the `numberOfFeatures` attribute in the response and no features.\n */\n\n\n/**\n * @typedef {Object} WriteTransactionOptions\n * @property {string} featureNS The namespace URI used for features.\n * @property {string} featurePrefix The prefix for the feature namespace.\n * @property {string} featureType The feature type name.\n * @property {string} [srsName] SRS name. No srsName attribute will be set on\n * geometries when this is not provided.\n * @property {string} [handle] Handle.\n * @property {boolean} [hasZ] Must be set to true if the transaction is for\n * a 3D layer. This will allow the Z coordinate to be included in the transaction.\n * @property {Array<Object>} nativeElements Native elements. Currently not supported.\n * @property {import(\"./GMLBase.js\").Options} [gmlOptions] GML options for the WFS transaction writer.\n * @property {string} [version='1.1.0'] WFS version to use for the transaction. Can be either `1.0.0` or `1.1.0`.\n */\n\n\n/**\n * Number of features; bounds/extent.\n * @typedef {Object} FeatureCollectionMetadata\n * @property {number} numberOfFeatures\n * @property {import(\"../extent.js\").Extent} bounds\n */\n\n\n/**\n * Total deleted; total inserted; total updated; array of insert ids.\n * @typedef {Object} TransactionResponse\n * @property {number} totalDeleted\n * @property {number} totalInserted\n * @property {number} totalUpdated\n * @property {Array<string>} insertIds\n */\n\n\n/**\n * @type {string}\n */\nconst FEATURE_PREFIX = 'feature';\n\n\n/**\n * @type {string}\n */\nconst XMLNS = 'http://www.w3.org/2000/xmlns/';\n\n\n/**\n * @type {string}\n */\nconst OGCNS = 'http://www.opengis.net/ogc';\n\n\n/**\n * @type {string}\n */\nconst WFSNS = 'http://www.opengis.net/wfs';\n\n\n/**\n * @type {string}\n */\nconst FESNS = 'http://www.opengis.net/fes';\n\n\n/**\n * @type {Object<string, string>}\n */\nconst SCHEMA_LOCATIONS = {\n  '1.1.0': 'http://www.opengis.net/wfs http://schemas.opengis.net/wfs/1.1.0/wfs.xsd',\n  '1.0.0': 'http://www.opengis.net/wfs http://schemas.opengis.net/wfs/1.0.0/wfs.xsd'\n};\n\n\n/**\n * @const\n * @type {string}\n */\nconst DEFAULT_VERSION = '1.1.0';\n\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the WFS format.\n * By default, supports WFS version 1.1.0. You can pass a GML format\n * as option if you want to read a WFS that contains GML2 (WFS 1.0.0).\n * Also see {@link module:ol/format/GMLBase~GMLBase} which is used by this format.\n *\n * @api\n */\nclass WFS extends XMLFeature {\n\n  /**\n   * @param {Options=} opt_options Optional configuration object.\n   */\n  constructor(opt_options) {\n    super();\n\n    const options = opt_options ? opt_options : {};\n\n    /**\n     * @private\n     * @type {Array<string>|string|undefined}\n     */\n    this.featureType_ = options.featureType;\n\n    /**\n     * @private\n     * @type {Object<string, string>|string|undefined}\n     */\n    this.featureNS_ = options.featureNS;\n\n    /**\n     * @private\n     * @type {GMLBase}\n     */\n    this.gmlFormat_ = options.gmlFormat ?\n      options.gmlFormat : new GML3();\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.schemaLocation_ = options.schemaLocation ?\n      options.schemaLocation : SCHEMA_LOCATIONS[DEFAULT_VERSION];\n  }\n\n  /**\n   * @return {Array<string>|string|undefined} featureType\n   */\n  getFeatureType() {\n    return this.featureType_;\n  }\n\n  /**\n   * @param {Array<string>|string|undefined} featureType Feature type(s) to parse.\n   */\n  setFeatureType(featureType) {\n    this.featureType_ = featureType;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  readFeaturesFromNode(node, opt_options) {\n    /** @type {import(\"../xml.js\").NodeStackItem} */\n    const context = {\n      node: node\n    };\n    assign(context, {\n      'featureType': this.featureType_,\n      'featureNS': this.featureNS_\n    });\n\n    assign(context, this.getReadOptions(node, opt_options ? opt_options : {}));\n    const objectStack = [context];\n    this.gmlFormat_.FEATURE_COLLECTION_PARSERS[GMLNS][\n      'featureMember'] =\n        makeArrayPusher(GMLBase.prototype.readFeaturesInternal);\n    let features = pushParseAndPop([],\n      this.gmlFormat_.FEATURE_COLLECTION_PARSERS, node,\n      objectStack, this.gmlFormat_);\n    if (!features) {\n      features = [];\n    }\n    return features;\n  }\n\n  /**\n   * Read transaction response of the source.\n   *\n   * @param {Document|Element|Object|string} source Source.\n   * @return {TransactionResponse|undefined} Transaction response.\n   * @api\n   */\n  readTransactionResponse(source) {\n    if (!source) {\n      return undefined;\n    } else if (typeof source === 'string') {\n      const doc = parse(source);\n      return this.readTransactionResponseFromDocument(doc);\n    } else if (isDocument(source)) {\n      return this.readTransactionResponseFromDocument(\n        /** @type {Document} */ (source));\n    } else {\n      return this.readTransactionResponseFromNode(/** @type {Element} */ (source));\n    }\n  }\n\n  /**\n   * Read feature collection metadata of the source.\n   *\n   * @param {Document|Element|Object|string} source Source.\n   * @return {FeatureCollectionMetadata|undefined}\n   *     FeatureCollection metadata.\n   * @api\n   */\n  readFeatureCollectionMetadata(source) {\n    if (!source) {\n      return undefined;\n    } else if (typeof source === 'string') {\n      const doc = parse(source);\n      return this.readFeatureCollectionMetadataFromDocument(doc);\n    } else if (isDocument(source)) {\n      return this.readFeatureCollectionMetadataFromDocument(\n        /** @type {Document} */ (source));\n    } else {\n      return this.readFeatureCollectionMetadataFromNode(\n        /** @type {Element} */ (source));\n    }\n  }\n\n  /**\n   * @param {Document} doc Document.\n   * @return {FeatureCollectionMetadata|undefined}\n   *     FeatureCollection metadata.\n   */\n  readFeatureCollectionMetadataFromDocument(doc) {\n    for (let n = /** @type {Node} */ (doc.firstChild); n; n = n.nextSibling) {\n      if (n.nodeType == Node.ELEMENT_NODE) {\n        return this.readFeatureCollectionMetadataFromNode(/** @type {Element} */ (n));\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @return {FeatureCollectionMetadata|undefined}\n   *     FeatureCollection metadata.\n   */\n  readFeatureCollectionMetadataFromNode(node) {\n    const result = {};\n    const value = readNonNegativeIntegerString(\n      node.getAttribute('numberOfFeatures'));\n    result['numberOfFeatures'] = value;\n    return pushParseAndPop(\n      /** @type {FeatureCollectionMetadata} */ (result),\n      FEATURE_COLLECTION_PARSERS, node, [], this.gmlFormat_);\n  }\n\n  /**\n   * @param {Document} doc Document.\n   * @return {TransactionResponse|undefined} Transaction response.\n   */\n  readTransactionResponseFromDocument(doc) {\n    for (let n = /** @type {Node} */ (doc.firstChild); n; n = n.nextSibling) {\n      if (n.nodeType == Node.ELEMENT_NODE) {\n        return this.readTransactionResponseFromNode(/** @type {Element} */ (n));\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @return {TransactionResponse|undefined} Transaction response.\n   */\n  readTransactionResponseFromNode(node) {\n    return pushParseAndPop(\n      /** @type {TransactionResponse} */({}),\n      TRANSACTION_RESPONSE_PARSERS, node, []);\n  }\n\n  /**\n   * Encode format as WFS `GetFeature` and return the Node.\n   *\n   * @param {WriteGetFeatureOptions} options Options.\n   * @return {Node} Result.\n   * @api\n   */\n  writeGetFeature(options) {\n    const node = createElementNS(WFSNS, 'GetFeature');\n    node.setAttribute('service', 'WFS');\n    node.setAttribute('version', '1.1.0');\n    let filter;\n    if (options) {\n      if (options.handle) {\n        node.setAttribute('handle', options.handle);\n      }\n      if (options.outputFormat) {\n        node.setAttribute('outputFormat', options.outputFormat);\n      }\n      if (options.maxFeatures !== undefined) {\n        node.setAttribute('maxFeatures', String(options.maxFeatures));\n      }\n      if (options.resultType) {\n        node.setAttribute('resultType', options.resultType);\n      }\n      if (options.startIndex !== undefined) {\n        node.setAttribute('startIndex', String(options.startIndex));\n      }\n      if (options.count !== undefined) {\n        node.setAttribute('count', String(options.count));\n      }\n      if (options.viewParams !== undefined) {\n        node.setAttribute('viewParams ', options.viewParams);\n      }\n      filter = options.filter;\n      if (options.bbox) {\n        assert(options.geometryName,\n          12); // `options.geometryName` must also be provided when `options.bbox` is set\n        const bbox = bboxFilter(\n          /** @type {string} */ (options.geometryName), options.bbox, options.srsName);\n        if (filter) {\n          // if bbox and filter are both set, combine the two into a single filter\n          filter = andFilter(filter, bbox);\n        } else {\n          filter = bbox;\n        }\n      }\n    }\n    node.setAttributeNS(XML_SCHEMA_INSTANCE_URI, 'xsi:schemaLocation', this.schemaLocation_);\n    /** @type {import(\"../xml.js\").NodeStackItem} */\n    const context = {\n      node: node\n    };\n    assign(context, {\n      'srsName': options.srsName,\n      'featureNS': options.featureNS ? options.featureNS : this.featureNS_,\n      'featurePrefix': options.featurePrefix,\n      'geometryName': options.geometryName,\n      'filter': filter,\n      'propertyNames': options.propertyNames ? options.propertyNames : []\n    });\n\n    assert(Array.isArray(options.featureTypes),\n      11); // `options.featureTypes` should be an Array\n    writeGetFeature(node, /** @type {!Array<string>} */ (options.featureTypes), [context]);\n    return node;\n  }\n\n  /**\n   * Encode format as WFS `Transaction` and return the Node.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} inserts The features to insert.\n   * @param {Array<import(\"../Feature.js\").default>} updates The features to update.\n   * @param {Array<import(\"../Feature.js\").default>} deletes The features to delete.\n   * @param {WriteTransactionOptions} options Write options.\n   * @return {Node} Result.\n   * @api\n   */\n  writeTransaction(inserts, updates, deletes, options) {\n    const objectStack = [];\n    const node = createElementNS(WFSNS, 'Transaction');\n    const version = options.version ? options.version : DEFAULT_VERSION;\n    const gmlVersion = version === '1.0.0' ? 2 : 3;\n    node.setAttribute('service', 'WFS');\n    node.setAttribute('version', version);\n    let baseObj;\n    /** @type {import(\"../xml.js\").NodeStackItem} */\n    let obj;\n    if (options) {\n      baseObj = options.gmlOptions ? options.gmlOptions : {};\n      if (options.handle) {\n        node.setAttribute('handle', options.handle);\n      }\n    }\n    const schemaLocation = SCHEMA_LOCATIONS[version];\n    node.setAttributeNS(XML_SCHEMA_INSTANCE_URI, 'xsi:schemaLocation', schemaLocation);\n    const featurePrefix = options.featurePrefix ? options.featurePrefix : FEATURE_PREFIX;\n    if (inserts) {\n      obj = assign({node: node}, {'featureNS': options.featureNS,\n        'featureType': options.featureType, 'featurePrefix': featurePrefix,\n        'gmlVersion': gmlVersion, 'hasZ': options.hasZ, 'srsName': options.srsName});\n      assign(obj, baseObj);\n      pushSerializeAndPop(obj,\n        TRANSACTION_SERIALIZERS,\n        makeSimpleNodeFactory('Insert'), inserts,\n        objectStack);\n    }\n    if (updates) {\n      obj = assign({node: node}, {'featureNS': options.featureNS,\n        'featureType': options.featureType, 'featurePrefix': featurePrefix,\n        'gmlVersion': gmlVersion, 'hasZ': options.hasZ, 'srsName': options.srsName});\n      assign(obj, baseObj);\n      pushSerializeAndPop(obj,\n        TRANSACTION_SERIALIZERS,\n        makeSimpleNodeFactory('Update'), updates,\n        objectStack);\n    }\n    if (deletes) {\n      pushSerializeAndPop({node: node, 'featureNS': options.featureNS,\n        'featureType': options.featureType, 'featurePrefix': featurePrefix,\n        'gmlVersion': gmlVersion, 'srsName': options.srsName},\n      TRANSACTION_SERIALIZERS,\n      makeSimpleNodeFactory('Delete'), deletes,\n      objectStack);\n    }\n    if (options.nativeElements) {\n      pushSerializeAndPop({node: node, 'featureNS': options.featureNS,\n        'featureType': options.featureType, 'featurePrefix': featurePrefix,\n        'gmlVersion': gmlVersion, 'srsName': options.srsName},\n      TRANSACTION_SERIALIZERS,\n      makeSimpleNodeFactory('Native'), options.nativeElements,\n      objectStack);\n    }\n    return node;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  readProjectionFromDocument(doc) {\n    for (let n = /** @type {Node} */ (doc.firstChild); n; n = n.nextSibling) {\n      if (n.nodeType == Node.ELEMENT_NODE) {\n        return this.readProjectionFromNode(n);\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  readProjectionFromNode(node) {\n    if (node.firstElementChild &&\n        node.firstElementChild.firstElementChild) {\n      node = node.firstElementChild.firstElementChild;\n      for (let n = node.firstElementChild; n; n = n.nextElementSibling) {\n        if (!(n.childNodes.length === 0 ||\n            (n.childNodes.length === 1 &&\n            n.firstChild.nodeType === 3))) {\n          const objectStack = [{}];\n          this.gmlFormat_.readGeometryElement(n, objectStack);\n          return getProjection(objectStack.pop().srsName);\n        }\n      }\n    }\n\n    return null;\n  }\n}\n\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} Transaction Summary.\n */\nfunction readTransactionSummary(node, objectStack) {\n  return pushParseAndPop(\n    {}, TRANSACTION_SUMMARY_PARSERS, node, objectStack);\n}\n\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nconst OGC_FID_PARSERS = {\n  'http://www.opengis.net/ogc': {\n    'FeatureId': makeArrayPusher(function(node, objectStack) {\n      return node.getAttribute('fid');\n    })\n  }\n};\n\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction fidParser(node, objectStack) {\n  parseNode(OGC_FID_PARSERS, node, objectStack);\n}\n\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nconst INSERT_RESULTS_PARSERS = {\n  'http://www.opengis.net/wfs': {\n    'Feature': fidParser\n  }\n};\n\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Array<string>|undefined} Insert results.\n */\nfunction readInsertResults(node, objectStack) {\n  return pushParseAndPop(\n    [], INSERT_RESULTS_PARSERS, node, objectStack);\n}\n\n\n/**\n * @param {Element} node Node.\n * @param {import(\"../Feature.js\").default} feature Feature.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeFeature(node, feature, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const featureType = context['featureType'];\n  const featureNS = context['featureNS'];\n  const gmlVersion = context['gmlVersion'];\n  const child = createElementNS(featureNS, featureType);\n  node.appendChild(child);\n  if (gmlVersion === 2) {\n    GML2.prototype.writeFeatureElement(child, feature, objectStack);\n  } else {\n    GML3.prototype.writeFeatureElement(child, feature, objectStack);\n  }\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {number|string} fid Feature identifier.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeOgcFidFilter(node, fid, objectStack) {\n  const filter = createElementNS(OGCNS, 'Filter');\n  const child = createElementNS(OGCNS, 'FeatureId');\n  filter.appendChild(child);\n  child.setAttribute('fid', /** @type {string} */ (fid));\n  node.appendChild(filter);\n}\n\n\n/**\n * @param {string|undefined} featurePrefix The prefix of the feature.\n * @param {string} featureType The type of the feature.\n * @returns {string} The value of the typeName property.\n */\nfunction getTypeName(featurePrefix, featureType) {\n  featurePrefix = featurePrefix ? featurePrefix : FEATURE_PREFIX;\n  const prefix = featurePrefix + ':';\n  // The featureType already contains the prefix.\n  if (featureType.indexOf(prefix) === 0) {\n    return featureType;\n  } else {\n    return prefix + featureType;\n  }\n}\n\n\n/**\n * @param {Element} node Node.\n * @param {import(\"../Feature.js\").default} feature Feature.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeDelete(node, feature, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  assert(feature.getId() !== undefined, 26); // Features must have an id set\n  const featureType = context['featureType'];\n  const featurePrefix = context['featurePrefix'];\n  const featureNS = context['featureNS'];\n  const typeName = getTypeName(featurePrefix, featureType);\n  node.setAttribute('typeName', typeName);\n  node.setAttributeNS(XMLNS, 'xmlns:' + featurePrefix, featureNS);\n  const fid = feature.getId();\n  if (fid !== undefined) {\n    writeOgcFidFilter(node, fid, objectStack);\n  }\n}\n\n\n/**\n * @param {Element} node Node.\n * @param {import(\"../Feature.js\").default} feature Feature.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeUpdate(node, feature, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  assert(feature.getId() !== undefined, 27); // Features must have an id set\n  const featureType = context['featureType'];\n  const featurePrefix = context['featurePrefix'];\n  const featureNS = context['featureNS'];\n  const typeName = getTypeName(featurePrefix, featureType);\n  const geometryName = feature.getGeometryName();\n  node.setAttribute('typeName', typeName);\n  node.setAttributeNS(XMLNS, 'xmlns:' + featurePrefix, featureNS);\n  const fid = feature.getId();\n  if (fid !== undefined) {\n    const keys = feature.getKeys();\n    const values = [];\n    for (let i = 0, ii = keys.length; i < ii; i++) {\n      const value = feature.get(keys[i]);\n      if (value !== undefined) {\n        let name = keys[i];\n        if (value && typeof /** @type {?} */ (value).getSimplifiedGeometry === 'function') {\n          name = geometryName;\n        }\n        values.push({name: name, value: value});\n      }\n    }\n    pushSerializeAndPop(/** @type {import(\"../xml.js\").NodeStackItem} */ (\n      {'gmlVersion': context['gmlVersion'], node: node,\n        'hasZ': context['hasZ'], 'srsName': context['srsName']}),\n    TRANSACTION_SERIALIZERS,\n    makeSimpleNodeFactory('Property'), values,\n    objectStack);\n    writeOgcFidFilter(node, fid, objectStack);\n  }\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {Object} pair Property name and value.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeProperty(node, pair, objectStack) {\n  const name = createElementNS(WFSNS, 'Name');\n  const context = objectStack[objectStack.length - 1];\n  const gmlVersion = context['gmlVersion'];\n  node.appendChild(name);\n  writeStringTextNode(name, pair.name);\n  if (pair.value !== undefined && pair.value !== null) {\n    const value = createElementNS(WFSNS, 'Value');\n    node.appendChild(value);\n    if (pair.value && typeof /** @type {?} */ (pair.value).getSimplifiedGeometry === 'function') {\n      if (gmlVersion === 2) {\n        GML2.prototype.writeGeometryElement(value,\n          pair.value, objectStack);\n      } else {\n        GML3.prototype.writeGeometryElement(value,\n          pair.value, objectStack);\n      }\n    } else {\n      writeStringTextNode(value, pair.value);\n    }\n  }\n}\n\n\n/**\n * @param {Element} node Node.\n * @param {{vendorId: string, safeToIgnore: boolean, value: string}} nativeElement The native element.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeNative(node, nativeElement, objectStack) {\n  if (nativeElement.vendorId) {\n    node.setAttribute('vendorId', nativeElement.vendorId);\n  }\n  if (nativeElement.safeToIgnore !== undefined) {\n    node.setAttribute('safeToIgnore', String(nativeElement.safeToIgnore));\n  }\n  if (nativeElement.value !== undefined) {\n    writeStringTextNode(node, nativeElement.value);\n  }\n}\n\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nconst GETFEATURE_SERIALIZERS = {\n  'http://www.opengis.net/wfs': {\n    'Query': makeChildAppender(writeQuery)\n  },\n  'http://www.opengis.net/ogc': {\n    'During': makeChildAppender(writeDuringFilter),\n    'And': makeChildAppender(writeLogicalFilter),\n    'Or': makeChildAppender(writeLogicalFilter),\n    'Not': makeChildAppender(writeNotFilter),\n    'BBOX': makeChildAppender(writeBboxFilter),\n    'Contains': makeChildAppender(writeContainsFilter),\n    'Intersects': makeChildAppender(writeIntersectsFilter),\n    'Within': makeChildAppender(writeWithinFilter),\n    'PropertyIsEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsNotEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsLessThan': makeChildAppender(writeComparisonFilter),\n    'PropertyIsLessThanOrEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsGreaterThan': makeChildAppender(writeComparisonFilter),\n    'PropertyIsGreaterThanOrEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsNull': makeChildAppender(writeIsNullFilter),\n    'PropertyIsBetween': makeChildAppender(writeIsBetweenFilter),\n    'PropertyIsLike': makeChildAppender(writeIsLikeFilter)\n  }\n};\n\n\n/**\n * @param {Element} node Node.\n * @param {string} featureType Feature type.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeQuery(node, featureType, objectStack) {\n  const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const featurePrefix = context['featurePrefix'];\n  const featureNS = context['featureNS'];\n  const propertyNames = context['propertyNames'];\n  const srsName = context['srsName'];\n  let typeName;\n  // If feature prefix is not defined, we must not use the default prefix.\n  if (featurePrefix) {\n    typeName = getTypeName(featurePrefix, featureType);\n  } else {\n    typeName = featureType;\n  }\n  node.setAttribute('typeName', typeName);\n  if (srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  if (featureNS) {\n    node.setAttributeNS(XMLNS, 'xmlns:' + featurePrefix, featureNS);\n  }\n  const item = /** @type {import(\"../xml.js\").NodeStackItem} */ (assign({}, context));\n  item.node = node;\n  pushSerializeAndPop(item,\n    QUERY_SERIALIZERS,\n    makeSimpleNodeFactory('PropertyName'), propertyNames,\n    objectStack);\n  const filter = context['filter'];\n  if (filter) {\n    const child = createElementNS(OGCNS, 'Filter');\n    node.appendChild(child);\n    writeFilterCondition(child, filter, objectStack);\n  }\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/Filter.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeFilterCondition(node, filter, objectStack) {\n  /** @type {import(\"../xml.js\").NodeStackItem} */\n  const item = {node: node};\n  pushSerializeAndPop(item,\n    GETFEATURE_SERIALIZERS,\n    makeSimpleNodeFactory(filter.getTagName()),\n    [filter], objectStack);\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/Bbox.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeBboxFilter(node, filter, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  context['srsName'] = filter.srsName;\n\n  writeOgcPropertyName(node, filter.geometryName);\n  GML3.prototype.writeGeometryElement(node, filter.extent, objectStack);\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/Contains.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeContainsFilter(node, filter, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  context['srsName'] = filter.srsName;\n\n  writeOgcPropertyName(node, filter.geometryName);\n  GML3.prototype.writeGeometryElement(node, filter.geometry, objectStack);\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/Intersects.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeIntersectsFilter(node, filter, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  context['srsName'] = filter.srsName;\n\n  writeOgcPropertyName(node, filter.geometryName);\n  GML3.prototype.writeGeometryElement(node, filter.geometry, objectStack);\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/Within.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeWithinFilter(node, filter, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  context['srsName'] = filter.srsName;\n\n  writeOgcPropertyName(node, filter.geometryName);\n  GML3.prototype.writeGeometryElement(node, filter.geometry, objectStack);\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/During.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeDuringFilter(node, filter, objectStack) {\n\n  const valueReference = createElementNS(FESNS, 'ValueReference');\n  writeStringTextNode(valueReference, filter.propertyName);\n  node.appendChild(valueReference);\n\n  const timePeriod = createElementNS(GMLNS, 'TimePeriod');\n\n  node.appendChild(timePeriod);\n\n  const begin = createElementNS(GMLNS, 'begin');\n  timePeriod.appendChild(begin);\n  writeTimeInstant(begin, filter.begin);\n\n  const end = createElementNS(GMLNS, 'end');\n  timePeriod.appendChild(end);\n  writeTimeInstant(end, filter.end);\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/LogicalNary.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeLogicalFilter(node, filter, objectStack) {\n  /** @type {import(\"../xml.js\").NodeStackItem} */\n  const item = {node: node};\n  const conditions = filter.conditions;\n  for (let i = 0, ii = conditions.length; i < ii; ++i) {\n    const condition = conditions[i];\n    pushSerializeAndPop(item,\n      GETFEATURE_SERIALIZERS,\n      makeSimpleNodeFactory(condition.getTagName()),\n      [condition], objectStack);\n  }\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/Not.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeNotFilter(node, filter, objectStack) {\n  /** @type {import(\"../xml.js\").NodeStackItem} */\n  const item = {node: node};\n  const condition = filter.condition;\n  pushSerializeAndPop(item,\n    GETFEATURE_SERIALIZERS,\n    makeSimpleNodeFactory(condition.getTagName()),\n    [condition], objectStack);\n}\n\n\n/**\n * @param {Element} node Node.\n * @param {import(\"./filter/ComparisonBinary.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeComparisonFilter(node, filter, objectStack) {\n  if (filter.matchCase !== undefined) {\n    node.setAttribute('matchCase', filter.matchCase.toString());\n  }\n  writeOgcPropertyName(node, filter.propertyName);\n  writeOgcLiteral(node, '' + filter.expression);\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/IsNull.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeIsNullFilter(node, filter, objectStack) {\n  writeOgcPropertyName(node, filter.propertyName);\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/IsBetween.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeIsBetweenFilter(node, filter, objectStack) {\n  writeOgcPropertyName(node, filter.propertyName);\n\n  const lowerBoundary = createElementNS(OGCNS, 'LowerBoundary');\n  node.appendChild(lowerBoundary);\n  writeOgcLiteral(lowerBoundary, '' + filter.lowerBoundary);\n\n  const upperBoundary = createElementNS(OGCNS, 'UpperBoundary');\n  node.appendChild(upperBoundary);\n  writeOgcLiteral(upperBoundary, '' + filter.upperBoundary);\n}\n\n\n/**\n * @param {Element} node Node.\n * @param {import(\"./filter/IsLike.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeIsLikeFilter(node, filter, objectStack) {\n  node.setAttribute('wildCard', filter.wildCard);\n  node.setAttribute('singleChar', filter.singleChar);\n  node.setAttribute('escapeChar', filter.escapeChar);\n  if (filter.matchCase !== undefined) {\n    node.setAttribute('matchCase', filter.matchCase.toString());\n  }\n  writeOgcPropertyName(node, filter.propertyName);\n  writeOgcLiteral(node, '' + filter.pattern);\n}\n\n\n/**\n * @param {string} tagName Tag name.\n * @param {Node} node Node.\n * @param {string} value Value.\n */\nfunction writeOgcExpression(tagName, node, value) {\n  const property = createElementNS(OGCNS, tagName);\n  writeStringTextNode(property, value);\n  node.appendChild(property);\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {string} value PropertyName value.\n */\nfunction writeOgcPropertyName(node, value) {\n  writeOgcExpression('PropertyName', node, value);\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {string} value PropertyName value.\n */\nfunction writeOgcLiteral(node, value) {\n  writeOgcExpression('Literal', node, value);\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {string} time PropertyName value.\n */\nfunction writeTimeInstant(node, time) {\n  const timeInstant = createElementNS(GMLNS, 'TimeInstant');\n  node.appendChild(timeInstant);\n\n  const timePosition = createElementNS(GMLNS, 'timePosition');\n  timeInstant.appendChild(timePosition);\n  writeStringTextNode(timePosition, time);\n}\n\n\n/**\n * Encode filter as WFS `Filter` and return the Node.\n *\n * @param {import(\"./filter/Filter.js\").default} filter Filter.\n * @return {Node} Result.\n * @api\n */\nexport function writeFilter(filter) {\n  const child = createElementNS(OGCNS, 'Filter');\n  writeFilterCondition(child, filter, []);\n  return child;\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {Array<string>} featureTypes Feature types.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeGetFeature(node, featureTypes, objectStack) {\n  const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const item = /** @type {import(\"../xml.js\").NodeStackItem} */ (assign({}, context));\n  item.node = node;\n  pushSerializeAndPop(item,\n    GETFEATURE_SERIALIZERS,\n    makeSimpleNodeFactory('Query'), featureTypes,\n    objectStack);\n}\n\n\nexport default WFS;\n","import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport {\n  equalTo as equalToFilter,\n  like as likeFilter,\n  and as andFilter\n} from '../src/ol/format/filter.js';\nimport {WFS, GeoJSON} from '../src/ol/format.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\nimport BingMaps from '../src/ol/source/BingMaps.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport {Stroke, Style} from '../src/ol/style.js';\n\n\nconst vectorSource = new VectorSource();\nconst vector = new VectorLayer({\n  source: vectorSource,\n  style: new Style({\n    stroke: new Stroke({\n      color: 'rgba(0, 0, 255, 1.0)',\n      width: 2\n    })\n  })\n});\n\nconst raster = new TileLayer({\n  source: new BingMaps({\n    imagerySet: 'Aerial',\n    key: 'As1HiMj1PvLPlqc_gtM7AqZfBL8ZL3VrjaS3zIb22Uvb9WKhuJObROC-qUpa81U5'\n  })\n});\n\nconst map = new Map({\n  layers: [raster, vector],\n  target: document.getElementById('map'),\n  view: new View({\n    center: [-8908887.277395891, 5381918.072437216],\n    maxZoom: 19,\n    zoom: 12\n  })\n});\n\n// generate a GetFeature request\nconst featureRequest = new WFS().writeGetFeature({\n  srsName: 'EPSG:3857',\n  featureNS: 'http://openstreemap.org',\n  featurePrefix: 'osm',\n  featureTypes: ['water_areas'],\n  outputFormat: 'application/json',\n  filter: andFilter(\n    likeFilter('name', 'Mississippi*'),\n    equalToFilter('waterway', 'riverbank')\n  )\n});\n\n// then post the request and add the received features to a layer\nfetch('https://ahocevar.com/geoserver/wfs', {\n  method: 'POST',\n  body: new XMLSerializer().serializeToString(featureRequest)\n}).then(function(response) {\n  return response.json();\n}).then(function(json) {\n  const features = new GeoJSON().readFeatures(json);\n  vectorSource.addFeatures(features);\n  map.getView().fit(vectorSource.getExtent());\n});\n"],"sourceRoot":""}