{"version":3,"sources":["webpack:///../src/ol/layer/Heatmap.js","webpack:///./heatmap-earthquakes.js"],"names":["Property","DEFAULT_GRADIENT","layer_Heatmap","VectorLayer","Heatmap","opt_options","const","options","baseOptions","Object","obj","gradient","radius","blur","shadow","weight","super","this","gradient_","shadow_","undefined","circleImage_","styleCache_","events","ol_Object","handleGradientChanged_","setGradient","setBlur","setRadius","handleStyleChanged_","weightFunction","feature","get","setStyle","resolution","opacity","math","index","style","Style","image","Icon","src","bind","setRenderOrder","EventType","RENDER","handleRender_","createCircle_","getRadius","getBlur","halfSize","size","context","dom","shadowOffsetX","shadowOffsetY","shadowBlur","shadowColor","beginPath","center","arc","Math","PI","fill","canvas","toDataURL","getGradient","colors","createLinearGradient","step","length","i","ii","addColorStop","fillStyle","fillRect","getImageData","data","createGradient","Array","changed","event","width","height","view8","alpha","putImageData","set","Vector","heatmap_earthquakes_blur","document","getElementById","heatmap_earthquakes_radius","vector","source","source_Vector","url","format","KML","extractStyles","parseInt","value","getSource","on","name","magnitude","parseFloat","substr","raster","Tile","Stamen","layer","Map","layers","target","view","View","zoom","addEventListener"],"mappings":"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","file":"heatmap-earthquakes.js","sourcesContent":["/**\n * @module ol/layer/Heatmap\n */\nimport {listen} from '../events.js';\nimport {getChangeEventType} from '../Object.js';\nimport {createCanvasContext2D} from '../dom.js';\nimport VectorLayer from './Vector.js';\nimport {clamp} from '../math.js';\nimport {assign} from '../obj.js';\nimport RenderEventType from '../render/EventType.js';\nimport Icon from '../style/Icon.js';\nimport Style from '../style/Style.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {Array<string>} [gradient=['#00f', '#0ff', '#0f0', '#ff0', '#f00']] The color gradient\n * of the heatmap, specified as an array of CSS color strings.\n * @property {number} [radius=8] Radius size in pixels.\n * @property {number} [blur=15] Blur size in pixels.\n * @property {number} [shadow=250] Shadow size in pixels.\n * @property {string|function(import(\"../Feature.js\").default):number} [weight='weight'] The feature\n * attribute to use for the weight or a function that returns a weight from a feature. Weight values\n * should range from 0 to 1 (and values outside will be clamped to that range).\n * @property {import(\"./VectorRenderType.js\").default|string} [renderMode='vector'] Render mode for vector layers:\n *  * `'image'`: Vector layers are rendered as images. Great performance, but point symbols and\n *    texts are always rotated with the view and pixels are scaled during zoom animations.\n *  * `'vector'`: Vector layers are rendered as vectors. Most accurate rendering even during\n *    animations, but slower performance.\n * @property {import(\"../source/Vector.js\").default} [source] Source.\n */\n\n\n/**\n * @enum {string}\n * @private\n */\nconst Property = {\n  BLUR: 'blur',\n  GRADIENT: 'gradient',\n  RADIUS: 'radius'\n};\n\n\n/**\n * @const\n * @type {Array<string>}\n */\nconst DEFAULT_GRADIENT = ['#00f', '#0ff', '#0f0', '#ff0', '#f00'];\n\n\n/**\n * @classdesc\n * Layer for rendering vector data as a heatmap.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @fires import(\"../render/Event.js\").RenderEvent\n * @api\n */\nclass Heatmap extends VectorLayer {\n  /**\n   * @param {Options=} opt_options Options.\n   */\n  constructor(opt_options) {\n    const options = opt_options ? opt_options : {};\n\n    const baseOptions = assign({}, options);\n\n    delete baseOptions.gradient;\n    delete baseOptions.radius;\n    delete baseOptions.blur;\n    delete baseOptions.shadow;\n    delete baseOptions.weight;\n    super(baseOptions);\n\n    /**\n     * @private\n     * @type {Uint8ClampedArray}\n     */\n    this.gradient_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.shadow_ = options.shadow !== undefined ? options.shadow : 250;\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.circleImage_ = undefined;\n\n    /**\n     * @private\n     * @type {Array<Array<import(\"../style/Style.js\").default>>}\n     */\n    this.styleCache_ = null;\n\n    listen(this,\n      getChangeEventType(Property.GRADIENT),\n      this.handleGradientChanged_, this);\n\n    this.setGradient(options.gradient ? options.gradient : DEFAULT_GRADIENT);\n\n    this.setBlur(options.blur !== undefined ? options.blur : 15);\n\n    this.setRadius(options.radius !== undefined ? options.radius : 8);\n\n    listen(this,\n      getChangeEventType(Property.BLUR),\n      this.handleStyleChanged_, this);\n    listen(this,\n      getChangeEventType(Property.RADIUS),\n      this.handleStyleChanged_, this);\n\n    this.handleStyleChanged_();\n\n    const weight = options.weight ? options.weight : 'weight';\n    let weightFunction;\n    if (typeof weight === 'string') {\n      weightFunction = function(feature) {\n        return feature.get(weight);\n      };\n    } else {\n      weightFunction = weight;\n    }\n\n    this.setStyle(function(feature, resolution) {\n      const weight = weightFunction(feature);\n      const opacity = weight !== undefined ? clamp(weight, 0, 1) : 1;\n      // cast to 8 bits\n      const index = (255 * opacity) | 0;\n      let style = this.styleCache_[index];\n      if (!style) {\n        style = [\n          new Style({\n            image: new Icon({\n              opacity: opacity,\n              src: this.circleImage_\n            })\n          })\n        ];\n        this.styleCache_[index] = style;\n      }\n      return style;\n    }.bind(this));\n\n    // For performance reasons, don't sort the features before rendering.\n    // The render order is not relevant for a heatmap representation.\n    this.setRenderOrder(null);\n\n    listen(this, RenderEventType.RENDER, this.handleRender_, this);\n  }\n\n  /**\n   * @return {string} Data URL for a circle.\n   * @private\n   */\n  createCircle_() {\n    const radius = this.getRadius();\n    const blur = this.getBlur();\n    const halfSize = radius + blur + 1;\n    const size = 2 * halfSize;\n    const context = createCanvasContext2D(size, size);\n    context.shadowOffsetX = context.shadowOffsetY = this.shadow_;\n    context.shadowBlur = blur;\n    context.shadowColor = '#000';\n    context.beginPath();\n    const center = halfSize - this.shadow_;\n    context.arc(center, center, radius, 0, Math.PI * 2, true);\n    context.fill();\n    return context.canvas.toDataURL();\n  }\n\n  /**\n   * Return the blur size in pixels.\n   * @return {number} Blur size in pixels.\n   * @api\n   * @observable\n   */\n  getBlur() {\n    return /** @type {number} */ (this.get(Property.BLUR));\n  }\n\n  /**\n   * Return the gradient colors as array of strings.\n   * @return {Array<string>} Colors.\n   * @api\n   * @observable\n   */\n  getGradient() {\n    return /** @type {Array<string>} */ (this.get(Property.GRADIENT));\n  }\n\n  /**\n   * Return the size of the radius in pixels.\n   * @return {number} Radius size in pixel.\n   * @api\n   * @observable\n   */\n  getRadius() {\n    return /** @type {number} */ (this.get(Property.RADIUS));\n  }\n\n  /**\n   * @private\n   */\n  handleGradientChanged_() {\n    this.gradient_ = createGradient(this.getGradient());\n  }\n\n  /**\n   * @private\n   */\n  handleStyleChanged_() {\n    this.circleImage_ = this.createCircle_();\n    this.styleCache_ = new Array(256);\n    this.changed();\n  }\n\n  /**\n   * @param {import(\"../render/Event.js\").default} event Post compose event\n   * @private\n   */\n  handleRender_(event) {\n    const context = event.context;\n    const canvas = context.canvas;\n    const image = context.getImageData(0, 0, canvas.width, canvas.height);\n    const view8 = image.data;\n    for (let i = 0, ii = view8.length; i < ii; i += 4) {\n      const alpha = view8[i + 3] * 4;\n      if (alpha) {\n        view8[i] = this.gradient_[alpha];\n        view8[i + 1] = this.gradient_[alpha + 1];\n        view8[i + 2] = this.gradient_[alpha + 2];\n      }\n    }\n    context.putImageData(image, 0, 0);\n  }\n\n  /**\n   * Set the blur size in pixels.\n   * @param {number} blur Blur size in pixels.\n   * @api\n   * @observable\n   */\n  setBlur(blur) {\n    this.set(Property.BLUR, blur);\n  }\n\n  /**\n   * Set the gradient colors as array of strings.\n   * @param {Array<string>} colors Gradient.\n   * @api\n   * @observable\n   */\n  setGradient(colors) {\n    this.set(Property.GRADIENT, colors);\n  }\n\n  /**\n   * Set the size of the radius in pixels.\n   * @param {number} radius Radius size in pixel.\n   * @api\n   * @observable\n   */\n  setRadius(radius) {\n    this.set(Property.RADIUS, radius);\n  }\n}\n\n\n/**\n * @param {Array<string>} colors A list of colored.\n * @return {Uint8ClampedArray} An array.\n */\nfunction createGradient(colors) {\n  const width = 1;\n  const height = 256;\n  const context = createCanvasContext2D(width, height);\n\n  const gradient = context.createLinearGradient(0, 0, width, height);\n  const step = 1 / (colors.length - 1);\n  for (let i = 0, ii = colors.length; i < ii; ++i) {\n    gradient.addColorStop(i * step, colors[i]);\n  }\n\n  context.fillStyle = gradient;\n  context.fillRect(0, 0, width, height);\n\n  return context.getImageData(0, 0, width, height).data;\n}\n\n\nexport default Heatmap;\n","import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport KML from '../src/ol/format/KML.js';\nimport {Heatmap as HeatmapLayer, Tile as TileLayer} from '../src/ol/layer.js';\nimport Stamen from '../src/ol/source/Stamen.js';\nimport VectorSource from '../src/ol/source/Vector.js';\n\nconst blur = document.getElementById('blur');\nconst radius = document.getElementById('radius');\n\nconst vector = new HeatmapLayer({\n  source: new VectorSource({\n    url: 'data/kml/2012_Earthquakes_Mag5.kml',\n    format: new KML({\n      extractStyles: false\n    })\n  }),\n  blur: parseInt(blur.value, 10),\n  radius: parseInt(radius.value, 10)\n});\n\nvector.getSource().on('addfeature', function(event) {\n  // 2012_Earthquakes_Mag5.kml stores the magnitude of each earthquake in a\n  // standards-violating <magnitude> tag in each Placemark.  We extract it from\n  // the Placemark's name instead.\n  const name = event.feature.get('name');\n  const magnitude = parseFloat(name.substr(2));\n  event.feature.set('weight', magnitude - 5);\n});\n\nconst raster = new TileLayer({\n  source: new Stamen({\n    layer: 'toner'\n  })\n});\n\nconst map = new Map({\n  layers: [raster, vector],\n  target: 'map',\n  view: new View({\n    center: [0, 0],\n    zoom: 2\n  })\n});\n\n\nblur.addEventListener('input', function() {\n  vector.setBlur(parseInt(blur.value, 10));\n});\n\nradius.addEventListener('input', function() {\n  vector.setRadius(parseInt(radius.value, 10));\n});\n"],"sourceRoot":""}