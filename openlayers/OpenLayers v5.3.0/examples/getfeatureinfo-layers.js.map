{"version":3,"sources":["webpack:///../src/ol/format/WMSGetFeatureInfo.js","webpack:///./getfeatureinfo-layers.js"],"names":["format_WMSGetFeatureInfo","XMLFeature","WMSGetFeatureInfo","opt_options","super","this","const","options","featureNS_","gmlFormat_","GML2","layers_","layers","getLayers","setLayers","readFeatures_","node","objectStack","setAttribute","localName","features","childNodes","length","let","i","ii","layer","nodeType","Node","ELEMENT_NODE","layerElement","context","layerName","replace","Object","array","featureType","parsers","xml","readFeatureElement","parsersNS","layerFeatures","gmlFeatures","FEATURE_COLLECTION_PARSERS","readFeaturesFromNode","obj","getReadOptions","format_XMLFeature","fetch","then","response","text","allFeatures","readFeatures","document","getElementById","innerText","toString","hotelFeatures","restaurantFeatures"],"mappings":"+IA8JeA,EAzH2B,SAAAC,GAKxC,SAAAC,EAAYC,GACVC,OAAKC,MAELC,IAAMC,EAAUJ,GAA4B,GAM5CE,KAAKG,WAAa,yCAOlBH,KAAKI,WAAa,IAAIC,EAAA,EAOtBL,KAAKM,QAAUJ,EAAQK,OAASL,EAAQK,OAAS,qGAMnDC,UAAA,WACE,OAAOR,KAAKM,qBAMdG,UAAA,SAAUF,GACRP,KAAKM,QAAUC,eASjBG,cAAA,SAAcC,EAAMC,cAClBD,EAAKE,aAAa,eAAgBb,KAAKG,YACvCF,IAAMa,EAAYH,EAAKG,UAEnBC,EAAW,GACf,GAA+B,IAA3BJ,EAAKK,WAAWC,OAClB,OAAOF,EAET,GAAiB,eAAbD,EACF,IAAKI,IAAIC,EAAI,EAAGC,EAAKT,EAAKK,WAAWC,OAAQE,EAAIC,EAAID,IAAK,CACxDlB,IAAMoB,EAAQV,EAAKK,WAAWG,GAC9B,GAAIE,EAAMC,WAAaC,KAAKC,aAA5B,CAIAvB,IAAMwB,EAAsC,EACtCC,EAAUd,EAAY,GAGtBe,EAAYF,EAAaX,UAAUc,QAhFzB,SAgF2C,IAE3D,IAAI5B,EAAKM,SAAYuB,OAAAC,EAAA,EAAAD,CAAS7B,EAAKM,QAASqB,GAA5C,CAIA1B,IAAM8B,EAAcJ,EA7FF,WAgGlBD,EAAqB,YAAIK,EACzBL,EAAmB,UAAI1B,EAAKG,WAG5BF,IAAM+B,EAAU,GAChBA,EAAQD,GAAeF,OAAAI,EAAA,EAAAJ,CACrB7B,EAAKI,WAAW8B,mBAAoBlC,EAAKI,YAC3CH,IAAMkC,EAAYN,OAAAI,EAAA,EAAAJ,CAChB,CAACH,EAAmB,UAAG,MAAOM,GAChCP,EAAaZ,aAAa,eAAgBb,EAAKG,YAC/CF,IAAMmC,EAAgBP,OAAAI,EAAA,EAAAJ,CACpB,GAAIM,EAAWV,EAAcb,EAAaZ,EAAKI,YAC7CgC,GACFP,OAAAC,EAAA,EAAAD,CAAOd,EAAUqB,KAIvB,GAAiB,qBAAbtB,EAAkC,CACpCb,IAAMoC,EAAcR,OAAAI,EAAA,EAAAJ,CAAgB,GAClC7B,KAAKI,WAAWkC,2BAA4B3B,EAC5C,CAAC,IAAKX,KAAKI,YACTiC,IACFtB,EAAWsB,GAGf,OAAOtB,eAMTwB,qBAAA,SAAqB5B,EAAMb,GACzBG,IAAMC,EAAU,GAIhB,OAHIJ,GACF+B,OAAAW,EAAA,EAAAX,CAAO3B,EAASF,KAAKyC,eAAe9B,EAAMb,IAErCE,KAAKU,cAAcC,EAAM,CAACT,OAnHK,CAAVwC,EAAA,GCnChCC,MAAM,mDAAmDC,KAAK,SAASC,GACrE,OAAOA,EAASC,SACfF,KAAK,SAASC,GAGf5C,IAAM8C,GAAc,IAAIpD,GAAoBqD,aAAaH,GACzDI,SAASC,eAAe,OAAOC,UAAYJ,EAAY9B,OAAOmC,WAI9DnD,IAAMoD,EAAgB,IAAI1D,EAAkB,CAC1CY,OAAQ,CAAC,WACRyC,aAAaH,GAChBI,SAASC,eAAe,SAASC,UAAYE,EAAcpC,OAAOmC,WAElEnD,IAAMqD,EAAqB,IAAI3D,EAAkB,CAC/CY,OAAQ,CAAC,gBACRyC,aAAaH,GAChBI,SAASC,eAAe,cAAcC,UAAYG,EAAmBrC,OAAOmC","file":"getfeatureinfo-layers.js","sourcesContent":["/**\n * @module ol/format/WMSGetFeatureInfo\n */\nimport {extend, includes} from '../array.js';\nimport GML2 from './GML2.js';\nimport XMLFeature from './XMLFeature.js';\nimport {assign} from '../obj.js';\nimport {makeArrayPusher, makeStructureNS, pushParseAndPop} from '../xml.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {Array<string>} [layers] If set, only features of the given layers will be returned by the format when read.\n */\n\n\n/**\n * @const\n * @type {string}\n */\nconst featureIdentifier = '_feature';\n\n\n/**\n * @const\n * @type {string}\n */\nconst layerIdentifier = '_layer';\n\n\n/**\n * @classdesc\n * Format for reading WMSGetFeatureInfo format. It uses\n * {@link module:ol/format/GML2~GML2} to read features.\n *\n * @api\n */\nclass WMSGetFeatureInfo extends XMLFeature {\n\n  /**\n   * @param {Options=} opt_options Options.\n   */\n  constructor(opt_options) {\n    super();\n\n    const options = opt_options ? opt_options : {};\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.featureNS_ = 'http://mapserver.gis.umn.edu/mapserver';\n\n\n    /**\n     * @private\n     * @type {GML2}\n     */\n    this.gmlFormat_ = new GML2();\n\n\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n    this.layers_ = options.layers ? options.layers : null;\n  }\n\n  /**\n   * @return {Array<string>} layers\n   */\n  getLayers() {\n    return this.layers_;\n  }\n\n  /**\n   * @param {Array<string>} layers Layers to parse.\n   */\n  setLayers(layers) {\n    this.layers_ = layers;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   * @private\n   */\n  readFeatures_(node, objectStack) {\n    node.setAttribute('namespaceURI', this.featureNS_);\n    const localName = node.localName;\n    /** @type {Array<import(\"../Feature.js\").default>} */\n    let features = [];\n    if (node.childNodes.length === 0) {\n      return features;\n    }\n    if (localName == 'msGMLOutput') {\n      for (let i = 0, ii = node.childNodes.length; i < ii; i++) {\n        const layer = node.childNodes[i];\n        if (layer.nodeType !== Node.ELEMENT_NODE) {\n          continue;\n        }\n\n        const layerElement = /** @type {Element} */ (layer);\n        const context = objectStack[0];\n\n        const toRemove = layerIdentifier;\n        const layerName = layerElement.localName.replace(toRemove, '');\n\n        if (this.layers_ && !includes(this.layers_, layerName)) {\n          continue;\n        }\n\n        const featureType = layerName +\n            featureIdentifier;\n\n        context['featureType'] = featureType;\n        context['featureNS'] = this.featureNS_;\n\n        /** @type {Object<string, import(\"../xml.js\").Parser>} */\n        const parsers = {};\n        parsers[featureType] = makeArrayPusher(\n          this.gmlFormat_.readFeatureElement, this.gmlFormat_);\n        const parsersNS = makeStructureNS(\n          [context['featureNS'], null], parsers);\n        layerElement.setAttribute('namespaceURI', this.featureNS_);\n        const layerFeatures = pushParseAndPop(\n          [], parsersNS, layerElement, objectStack, this.gmlFormat_);\n        if (layerFeatures) {\n          extend(features, layerFeatures);\n        }\n      }\n    }\n    if (localName == 'FeatureCollection') {\n      const gmlFeatures = pushParseAndPop([],\n        this.gmlFormat_.FEATURE_COLLECTION_PARSERS, node,\n        [{}], this.gmlFormat_);\n      if (gmlFeatures) {\n        features = gmlFeatures;\n      }\n    }\n    return features;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  readFeaturesFromNode(node, opt_options) {\n    const options = {};\n    if (opt_options) {\n      assign(options, this.getReadOptions(node, opt_options));\n    }\n    return this.readFeatures_(node, [options]);\n  }\n\n}\n\n\nexport default WMSGetFeatureInfo;\n","import WMSGetFeatureInfo from '../src/ol/format/WMSGetFeatureInfo.js';\n\nfetch('data/wmsgetfeatureinfo/osm-restaurant-hotel.xml').then(function(response) {\n  return response.text();\n}).then(function(response) {\n\n  // this is the standard way to read the features\n  const allFeatures = new WMSGetFeatureInfo().readFeatures(response);\n  document.getElementById('all').innerText = allFeatures.length.toString();\n\n  // when specifying the 'layers' options, only the features of those\n  // layers are returned by the format\n  const hotelFeatures = new WMSGetFeatureInfo({\n    layers: ['hotel']\n  }).readFeatures(response);\n  document.getElementById('hotel').innerText = hotelFeatures.length.toString();\n\n  const restaurantFeatures = new WMSGetFeatureInfo({\n    layers: ['restaurant']\n  }).readFeatures(response);\n  document.getElementById('restaurant').innerText = restaurantFeatures.length.toString();\n\n});\n"],"sourceRoot":""}