{"version":3,"sources":["webpack:///./magnify.js"],"names":["__webpack_require__","r","__webpack_exports__","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_0__","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_1__","_src_ol_layer_Tile_js__WEBPACK_IMPORTED_MODULE_2__","_src_ol_proj_js__WEBPACK_IMPORTED_MODULE_3__","_src_ol_source_BingMaps_js__WEBPACK_IMPORTED_MODULE_4__","imagery","source","key","imagerySet","container","document","getElementById","map","layers","target","view","center","Object","zoom","radius","addEventListener","evt","which","Math","min","render","preventDefault","max","let","mousePosition","event","getEventPixel","on","const","context","pixelRatio","frameState","half","centerX","centerY","originX","originY","size","sourceData","getImageData","data","dest","createImageData","destData","j","i","dI","dJ","sourceI","sourceJ","sqrt","round","destOffset","sourceOffset","beginPath","arc","PI","lineWidth","strokeStyle","putImageData","stroke","restore"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,GAAAI,EAAAJ,EAAA,GAAAK,EAAAL,EAAA,GAAAM,EAAAN,EAAA,GAAAO,EAAAP,EAAA,IAQMQ,EAAU,IAAIH,EAAA,EAAU,CAC5BI,OAAQ,IAAIF,EAAA,EAAS,CAACG,IAHZ,mEAGsBC,WAAY,aAGxCC,EAAYC,SAASC,eAAe,OAEpCC,EAAM,IAAIZ,EAAA,EAAI,CAClBa,OAAQ,CAACR,GACTS,OAAQL,EACRM,KAAM,IAAId,EAAA,EAAK,CACbe,OAAQC,OAAAd,EAAA,EAAAc,CAAW,EAAE,IAAK,OAC1BC,KAAM,MAINC,EAAS,GACbT,SAASU,iBAAiB,UAAW,SAASC,GAC1B,KAAdA,EAAIC,OACNH,EAASI,KAAKC,IAAIL,EAAS,EAAG,KAC9BP,EAAIa,SACJJ,EAAIK,kBACmB,KAAdL,EAAIC,QACbH,EAASI,KAAKI,IAAIR,EAAS,EAAG,IAC9BP,EAAIa,SACJJ,EAAIK,oBAKRE,IAAIC,EAAgB,KAEpBpB,EAAUW,iBAAiB,YAAa,SAASU,GAC/CD,EAAgBjB,EAAImB,cAAcD,GAClClB,EAAIa,WAGNhB,EAAUW,iBAAiB,WAAY,WACrCS,EAAgB,KAChBjB,EAAIa,WAINpB,EAAQ2B,GAAG,cAAe,SAASF,GACjC,GAAID,EAAe,CAYjB,IAXAI,IAAMC,EAAUJ,EAAMI,QAChBC,EAAaL,EAAMM,WAAWD,WAC9BE,EAAOlB,EAASgB,EAChBG,EAAUT,EAAc,GAAKM,EAC7BI,EAAUV,EAAc,GAAKM,EAC7BK,EAAUF,EAAUD,EACpBI,EAAUF,EAAUF,EACpBK,EAAO,EAAIL,EAAO,EAClBM,EAAaT,EAAQU,aAAaJ,EAASC,EAASC,EAAMA,GAAMG,KAChEC,EAAOZ,EAAQa,gBAAgBL,EAAMA,GACrCM,EAAWF,EAAKD,KACbI,EAAI,EAAGA,EAAIP,IAAQO,EAC1B,IAAKrB,IAAIsB,EAAI,EAAGA,EAAIR,IAAQQ,EAAG,CAC7BjB,IAAMkB,EAAKD,EAAIb,EACTe,EAAKH,EAAIZ,EAEXgB,EAAUH,EACVI,EAAUL,EAFD1B,KAAKgC,KAAKJ,EAAKA,EAAKC,EAAKA,GAG3Bf,IACTgB,EAAU9B,KAAKiC,MAAMnB,EAAOc,EAAK,GACjCG,EAAU/B,KAAKiC,MAAMnB,EAAOe,EAAK,IAEnCnB,IAAMwB,EAA8B,GAAhBR,EAAIP,EAAOQ,GACzBQ,EAA4C,GAA5BJ,EAAUZ,EAAOW,GACvCL,EAASS,GAAcd,EAAWe,GAClCV,EAASS,EAAa,GAAKd,EAAWe,EAAe,GACrDV,EAASS,EAAa,GAAKd,EAAWe,EAAe,GACrDV,EAASS,EAAa,GAAKd,EAAWe,EAAe,GAGzDxB,EAAQyB,YACRzB,EAAQ0B,IAAItB,EAASC,EAASF,EAAM,EAAG,EAAId,KAAKsC,IAChD3B,EAAQ4B,UAAY,EAAI3B,EACxBD,EAAQ6B,YAAc,wBACtB7B,EAAQ8B,aAAalB,EAAMN,EAASC,GACpCP,EAAQ+B,SACR/B,EAAQgC","file":"magnify.js","sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport {fromLonLat} from '../src/ol/proj.js';\nimport BingMaps from '../src/ol/source/BingMaps.js';\n\nconst key = 'As1HiMj1PvLPlqc_gtM7AqZfBL8ZL3VrjaS3zIb22Uvb9WKhuJObROC-qUpa81U5';\n\nconst imagery = new TileLayer({\n  source: new BingMaps({key: key, imagerySet: 'Aerial'})\n});\n\nconst container = document.getElementById('map');\n\nconst map = new Map({\n  layers: [imagery],\n  target: container,\n  view: new View({\n    center: fromLonLat([-109, 46.5]),\n    zoom: 6\n  })\n});\n\nlet radius = 75;\ndocument.addEventListener('keydown', function(evt) {\n  if (evt.which === 38) {\n    radius = Math.min(radius + 5, 150);\n    map.render();\n    evt.preventDefault();\n  } else if (evt.which === 40) {\n    radius = Math.max(radius - 5, 25);\n    map.render();\n    evt.preventDefault();\n  }\n});\n\n// get the pixel position with every move\nlet mousePosition = null;\n\ncontainer.addEventListener('mousemove', function(event) {\n  mousePosition = map.getEventPixel(event);\n  map.render();\n});\n\ncontainer.addEventListener('mouseout', function() {\n  mousePosition = null;\n  map.render();\n});\n\n// after rendering the layer, show an oversampled version around the pointer\nimagery.on('postcompose', function(event) {\n  if (mousePosition) {\n    const context = event.context;\n    const pixelRatio = event.frameState.pixelRatio;\n    const half = radius * pixelRatio;\n    const centerX = mousePosition[0] * pixelRatio;\n    const centerY = mousePosition[1] * pixelRatio;\n    const originX = centerX - half;\n    const originY = centerY - half;\n    const size = 2 * half + 1;\n    const sourceData = context.getImageData(originX, originY, size, size).data;\n    const dest = context.createImageData(size, size);\n    const destData = dest.data;\n    for (let j = 0; j < size; ++j) {\n      for (let i = 0; i < size; ++i) {\n        const dI = i - half;\n        const dJ = j - half;\n        const dist = Math.sqrt(dI * dI + dJ * dJ);\n        let sourceI = i;\n        let sourceJ = j;\n        if (dist < half) {\n          sourceI = Math.round(half + dI / 2);\n          sourceJ = Math.round(half + dJ / 2);\n        }\n        const destOffset = (j * size + i) * 4;\n        const sourceOffset = (sourceJ * size + sourceI) * 4;\n        destData[destOffset] = sourceData[sourceOffset];\n        destData[destOffset + 1] = sourceData[sourceOffset + 1];\n        destData[destOffset + 2] = sourceData[sourceOffset + 2];\n        destData[destOffset + 3] = sourceData[sourceOffset + 3];\n      }\n    }\n    context.beginPath();\n    context.arc(centerX, centerY, half, 0, 2 * Math.PI);\n    context.lineWidth = 3 * pixelRatio;\n    context.strokeStyle = 'rgba(255,255,255,0.5)';\n    context.putImageData(dest, originX, originY);\n    context.stroke();\n    context.restore();\n  }\n});\n"],"sourceRoot":""}