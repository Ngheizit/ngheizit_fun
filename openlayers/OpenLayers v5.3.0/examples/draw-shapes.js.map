{"version":3,"sources":["webpack:///./draw-shapes.js"],"names":["__webpack_require__","r","__webpack_exports__","draw","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_0__","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_1__","_src_ol_geom_Polygon_js__WEBPACK_IMPORTED_MODULE_2__","_src_ol_interaction_Draw_js__WEBPACK_IMPORTED_MODULE_3__","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_4__","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_5__","_src_ol_source_js__WEBPACK_IMPORTED_MODULE_6__","_src_ol_source_js__WEBPACK_IMPORTED_MODULE_7__","raster","source","wrapX","vector","map","layers","target","view","center","zoom","typeSelect","document","getElementById","addInteraction","let","geometryFunction","value","Object","coordinates","geometry","const","last","dx","dy","radius","Math","sqrt","rotation","atan2","newCoordinates","i","angle","PI","fraction","offsetX","cos","offsetY","sin","push","slice","setCoordinates","type","onchange","removeInteraction"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAA,IA4BIC,EA5BJC,EAAAJ,EAAA,GAAAK,EAAAL,EAAA,GAAAM,EAAAN,EAAA,IAAAO,EAAAP,EAAA,IAAAQ,EAAAR,EAAA,GAAAS,EAAAT,EAAA,IAAAU,EAAAV,EAAA,IAAAW,EAAAX,EAAA,IAOMY,EAAS,IAAIJ,EAAA,EAAU,CAC3BK,OAAQ,IAAIH,EAAA,IAGRG,EAAS,IAAIF,EAAA,EAAa,CAACG,OAAO,IAElCC,EAAS,IAAIN,EAAA,EAAY,CAC7BI,OAAQA,IAGJG,EAAM,IAAIZ,EAAA,EAAI,CAClBa,OAAQ,CAACL,EAAQG,GACjBG,OAAQ,MACRC,KAAM,IAAId,EAAA,EAAK,CACbe,OAAQ,EAAE,KAAU,MACpBC,KAAM,MAIJC,EAAaC,SAASC,eAAe,QAG3C,SAASC,IACPC,IAEMC,EAFFC,EAAQN,EAAWM,MACT,SAAVA,IAEY,WAAVA,GACFA,EAAQ,SACRD,EAAmBE,OAAAtB,EAAA,EAAAsB,CAAqB,IACrB,QAAVD,GACTA,EAAQ,SACRD,EAAmBE,OAAAtB,EAAA,EAAAsB,IACA,SAAVD,IACTA,EAAQ,SACRD,EAAmB,SAASG,EAAaC,GASvC,IARAC,IAAMZ,EAASU,EAAY,GACrBG,EAAOH,EAAY,GACnBI,EAAKd,EAAO,GAAKa,EAAK,GACtBE,EAAKf,EAAO,GAAKa,EAAK,GACtBG,EAASC,KAAKC,KAAKJ,EAAKA,EAAKC,EAAKA,GAClCI,EAAWF,KAAKG,MAAML,EAAID,GAC1BO,EAAiB,GAEdC,EAAI,EAAGA,EADE,KACeA,EAAG,CAClCV,IAAMW,EAAQJ,EAAe,EAAJG,EAAQL,KAAKO,GAFtB,GAGVC,EAAWH,EAAI,GAAM,EAAI,EAAI,GAC7BI,EAAUV,EAASS,EAAWR,KAAKU,IAAIJ,GACvCK,EAAUZ,EAASS,EAAWR,KAAKY,IAAIN,GAC7CF,EAAeS,KAAK,CAAC9B,EAAO,GAAK0B,EAAS1B,EAAO,GAAK4B,IAQxD,OANAP,EAAeS,KAAKT,EAAe,GAAGU,SACjCpB,EAGHA,EAASqB,eAAe,CAACX,IAFzBV,EAAW,IAAIzB,EAAA,EAAQ,CAACmC,IAInBV,IAGX5B,EAAO,IAAII,EAAA,EAAK,CACdM,OAAQA,EACRwC,KAAMzB,EACND,iBAAkBA,IAEpBX,EAAIS,eAAetB,IAQvBmB,EAAWgC,SAAW,WACpBtC,EAAIuC,kBAAkBpD,GACtBsB,KAGFA","file":"draw-shapes.js","sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport Polygon from '../src/ol/geom/Polygon.js';\nimport Draw, {createRegularPolygon, createBox} from '../src/ol/interaction/Draw.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\nimport {OSM, Vector as VectorSource} from '../src/ol/source.js';\n\nconst raster = new TileLayer({\n  source: new OSM()\n});\n\nconst source = new VectorSource({wrapX: false});\n\nconst vector = new VectorLayer({\n  source: source\n});\n\nconst map = new Map({\n  layers: [raster, vector],\n  target: 'map',\n  view: new View({\n    center: [-11000000, 4600000],\n    zoom: 4\n  })\n});\n\nconst typeSelect = document.getElementById('type');\n\nlet draw; // global so we can remove it later\nfunction addInteraction() {\n  let value = typeSelect.value;\n  if (value !== 'None') {\n    let geometryFunction;\n    if (value === 'Square') {\n      value = 'Circle';\n      geometryFunction = createRegularPolygon(4);\n    } else if (value === 'Box') {\n      value = 'Circle';\n      geometryFunction = createBox();\n    } else if (value === 'Star') {\n      value = 'Circle';\n      geometryFunction = function(coordinates, geometry) {\n        const center = coordinates[0];\n        const last = coordinates[1];\n        const dx = center[0] - last[0];\n        const dy = center[1] - last[1];\n        const radius = Math.sqrt(dx * dx + dy * dy);\n        const rotation = Math.atan2(dy, dx);\n        const newCoordinates = [];\n        const numPoints = 12;\n        for (let i = 0; i < numPoints; ++i) {\n          const angle = rotation + i * 2 * Math.PI / numPoints;\n          const fraction = i % 2 === 0 ? 1 : 0.5;\n          const offsetX = radius * fraction * Math.cos(angle);\n          const offsetY = radius * fraction * Math.sin(angle);\n          newCoordinates.push([center[0] + offsetX, center[1] + offsetY]);\n        }\n        newCoordinates.push(newCoordinates[0].slice());\n        if (!geometry) {\n          geometry = new Polygon([newCoordinates]);\n        } else {\n          geometry.setCoordinates([newCoordinates]);\n        }\n        return geometry;\n      };\n    }\n    draw = new Draw({\n      source: source,\n      type: value,\n      geometryFunction: geometryFunction\n    });\n    map.addInteraction(draw);\n  }\n}\n\n\n/**\n * Handle change event.\n */\ntypeSelect.onchange = function() {\n  map.removeInteraction(draw);\n  addInteraction();\n};\n\naddInteraction();\n"],"sourceRoot":""}