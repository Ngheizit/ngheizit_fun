{"version":3,"sources":["webpack:///./vector-labels.js"],"names":["__webpack_require__","r","__webpack_exports__","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_0__","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_1__","_src_ol_format_GeoJSON_js__WEBPACK_IMPORTED_MODULE_2__","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_3__","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_4__","_src_ol_source_js__WEBPACK_IMPORTED_MODULE_5__","_src_ol_source_js__WEBPACK_IMPORTED_MODULE_6__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_7__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_8__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_9__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_10__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_11__","openSansAdded","myDom","points","text","document","getElementById","align","baseline","rotation","font","weight","size","offsetX","offsetY","color","outline","outlineWidth","maxreso","lines","placement","maxangle","overflow","polygons","getText","feature","resolution","dom","const","type","value","maxResolution","get","trunc","stringDivider","str","width","spaceReplacer","length","let","p","left","substring","right","createTextStyle","parseInt","undefined","maxAngle","parseFloat","openSans","createElement","href","rel","getElementsByTagName","appendChild","fillColor","outlineColor","textAlign","textBaseline","fill","stroke","polygonStyleFunction","vectorPolygons","source","url","format","style","lineStyleFunction","vectorLines","pointStyleFunction","image","radius","vectorPoints","layers","target","view","center","zoom","addEventListener","setStyle","String","prototype","n","this","substr"],"mappings":"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","file":"vector-labels.js","sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport GeoJSON from '../src/ol/format/GeoJSON.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\nimport {OSM, Vector as VectorSource} from '../src/ol/source.js';\nimport {Circle as CircleStyle, Fill, Stroke, Style, Text} from '../src/ol/style.js';\n\nlet openSansAdded = false;\n\nconst myDom = {\n  points: {\n    text: document.getElementById('points-text'),\n    align: document.getElementById('points-align'),\n    baseline: document.getElementById('points-baseline'),\n    rotation: document.getElementById('points-rotation'),\n    font: document.getElementById('points-font'),\n    weight: document.getElementById('points-weight'),\n    size: document.getElementById('points-size'),\n    offsetX: document.getElementById('points-offset-x'),\n    offsetY: document.getElementById('points-offset-y'),\n    color: document.getElementById('points-color'),\n    outline: document.getElementById('points-outline'),\n    outlineWidth: document.getElementById('points-outline-width'),\n    maxreso: document.getElementById('points-maxreso')\n  },\n  lines: {\n    text: document.getElementById('lines-text'),\n    align: document.getElementById('lines-align'),\n    baseline: document.getElementById('lines-baseline'),\n    rotation: document.getElementById('lines-rotation'),\n    font: document.getElementById('lines-font'),\n    weight: document.getElementById('lines-weight'),\n    placement: document.getElementById('lines-placement'),\n    maxangle: document.getElementById('lines-maxangle'),\n    overflow: document.getElementById('lines-overflow'),\n    size: document.getElementById('lines-size'),\n    offsetX: document.getElementById('lines-offset-x'),\n    offsetY: document.getElementById('lines-offset-y'),\n    color: document.getElementById('lines-color'),\n    outline: document.getElementById('lines-outline'),\n    outlineWidth: document.getElementById('lines-outline-width'),\n    maxreso: document.getElementById('lines-maxreso')\n  },\n  polygons: {\n    text: document.getElementById('polygons-text'),\n    align: document.getElementById('polygons-align'),\n    baseline: document.getElementById('polygons-baseline'),\n    rotation: document.getElementById('polygons-rotation'),\n    font: document.getElementById('polygons-font'),\n    weight: document.getElementById('polygons-weight'),\n    placement: document.getElementById('polygons-placement'),\n    maxangle: document.getElementById('polygons-maxangle'),\n    overflow: document.getElementById('polygons-overflow'),\n    size: document.getElementById('polygons-size'),\n    offsetX: document.getElementById('polygons-offset-x'),\n    offsetY: document.getElementById('polygons-offset-y'),\n    color: document.getElementById('polygons-color'),\n    outline: document.getElementById('polygons-outline'),\n    outlineWidth: document.getElementById('polygons-outline-width'),\n    maxreso: document.getElementById('polygons-maxreso')\n  }\n};\n\nconst getText = function(feature, resolution, dom) {\n  const type = dom.text.value;\n  const maxResolution = dom.maxreso.value;\n  let text = feature.get('name');\n\n  if (resolution > maxResolution) {\n    text = '';\n  } else if (type == 'hide') {\n    text = '';\n  } else if (type == 'shorten') {\n    text = text.trunc(12);\n  } else if (type == 'wrap' && (!dom.placement || dom.placement.value != 'line')) {\n    text = stringDivider(text, 16, '\\n');\n  }\n\n  return text;\n};\n\n\nconst createTextStyle = function(feature, resolution, dom) {\n  const align = dom.align.value;\n  const baseline = dom.baseline.value;\n  const size = dom.size.value;\n  const offsetX = parseInt(dom.offsetX.value, 10);\n  const offsetY = parseInt(dom.offsetY.value, 10);\n  const weight = dom.weight.value;\n  const placement = dom.placement ? dom.placement.value : undefined;\n  const maxAngle = dom.maxangle ? parseFloat(dom.maxangle.value) : undefined;\n  const overflow = dom.overflow ? (dom.overflow.value == 'true') : undefined;\n  const rotation = parseFloat(dom.rotation.value);\n  if (dom.font.value == '\\'Open Sans\\'' && !openSansAdded) {\n    const openSans = document.createElement('link');\n    openSans.href = 'https://fonts.googleapis.com/css?family=Open+Sans';\n    openSans.rel = 'stylesheet';\n    document.getElementsByTagName('head')[0].appendChild(openSans);\n    openSansAdded = true;\n  }\n  const font = weight + ' ' + size + ' ' + dom.font.value;\n  const fillColor = dom.color.value;\n  const outlineColor = dom.outline.value;\n  const outlineWidth = parseInt(dom.outlineWidth.value, 10);\n\n  return new Text({\n    textAlign: align == '' ? undefined : align,\n    textBaseline: baseline,\n    font: font,\n    text: getText(feature, resolution, dom),\n    fill: new Fill({color: fillColor}),\n    stroke: new Stroke({color: outlineColor, width: outlineWidth}),\n    offsetX: offsetX,\n    offsetY: offsetY,\n    placement: placement,\n    maxAngle: maxAngle,\n    overflow: overflow,\n    rotation: rotation\n  });\n};\n\n\n// Polygons\nfunction polygonStyleFunction(feature, resolution) {\n  return new Style({\n    stroke: new Stroke({\n      color: 'blue',\n      width: 1\n    }),\n    fill: new Fill({\n      color: 'rgba(0, 0, 255, 0.1)'\n    }),\n    text: createTextStyle(feature, resolution, myDom.polygons)\n  });\n}\n\nconst vectorPolygons = new VectorLayer({\n  source: new VectorSource({\n    url: 'data/geojson/polygon-samples.geojson',\n    format: new GeoJSON()\n  }),\n  style: polygonStyleFunction\n});\n\n\n// Lines\nfunction lineStyleFunction(feature, resolution) {\n  return new Style({\n    stroke: new Stroke({\n      color: 'green',\n      width: 2\n    }),\n    text: createTextStyle(feature, resolution, myDom.lines)\n  });\n}\n\nconst vectorLines = new VectorLayer({\n  source: new VectorSource({\n    url: 'data/geojson/line-samples.geojson',\n    format: new GeoJSON()\n  }),\n  style: lineStyleFunction\n});\n\n\n// Points\nfunction pointStyleFunction(feature, resolution) {\n  return new Style({\n    image: new CircleStyle({\n      radius: 10,\n      fill: new Fill({color: 'rgba(255, 0, 0, 0.1)'}),\n      stroke: new Stroke({color: 'red', width: 1})\n    }),\n    text: createTextStyle(feature, resolution, myDom.points)\n  });\n}\n\nconst vectorPoints = new VectorLayer({\n  source: new VectorSource({\n    url: 'data/geojson/point-samples.geojson',\n    format: new GeoJSON()\n  }),\n  style: pointStyleFunction\n});\n\nconst map = new Map({\n  layers: [\n    new TileLayer({\n      source: new OSM()\n    }),\n    vectorPolygons,\n    vectorLines,\n    vectorPoints\n  ],\n  target: 'map',\n  view: new View({\n    center: [-8161939, 6095025],\n    zoom: 8\n  })\n});\n\ndocument.getElementById('refresh-points')\n  .addEventListener('click', function() {\n    vectorPoints.setStyle(pointStyleFunction);\n  });\n\ndocument.getElementById('refresh-lines')\n  .addEventListener('click', function() {\n    vectorLines.setStyle(lineStyleFunction);\n  });\n\ndocument.getElementById('refresh-polygons')\n  .addEventListener('click', function() {\n    vectorPolygons.setStyle(polygonStyleFunction);\n  });\n\n\n/**\n * @param {number} n The max number of characters to keep.\n * @return {string} Truncated string.\n */\nString.prototype.trunc = String.prototype.trunc ||\n    function(n) {\n      return this.length > n ? this.substr(0, n - 1) + '...' : this.substr(0);\n    };\n\n\n// http://stackoverflow.com/questions/14484787/wrap-text-in-javascript\nfunction stringDivider(str, width, spaceReplacer) {\n  if (str.length > width) {\n    let p = width;\n    while (p > 0 && (str[p] != ' ' && str[p] != '-')) {\n      p--;\n    }\n    if (p > 0) {\n      let left;\n      if (str.substring(p, p + 1) == '-') {\n        left = str.substring(0, p + 1);\n      } else {\n        left = str.substring(0, p);\n      }\n      const right = str.substring(p + 1);\n      return left + spaceReplacer + stringDivider(right, width, spaceReplacer);\n    }\n  }\n  return str;\n}\n"],"sourceRoot":""}