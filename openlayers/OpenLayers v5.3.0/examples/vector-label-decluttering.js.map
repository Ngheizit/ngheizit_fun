{"version":3,"sources":["webpack:///./vector-label-decluttering.js"],"names":["__webpack_require__","r","__webpack_exports__","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_0__","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_1__","_src_ol_extent_js__WEBPACK_IMPORTED_MODULE_2__","_src_ol_format_GeoJSON_js__WEBPACK_IMPORTED_MODULE_3__","_src_ol_layer_Vector_js__WEBPACK_IMPORTED_MODULE_4__","_src_ol_source_Vector_js__WEBPACK_IMPORTED_MODULE_5__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_6__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_7__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_8__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_9__","map","target","view","center","zoom","labelStyle","geometry","feature","let","getGeometry","getType","const","polygons","getPolygons","widest","i","ii","length","polygon","width","Object","getExtent","text","font","overflow","fill","color","stroke","style","vectorLayer","source","url","format","getText","setText","get","declutter","addLayer"],"mappings":"4FAAAA,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,GAAAI,EAAAJ,EAAA,GAAAK,EAAAL,EAAA,GAAAM,EAAAN,EAAA,IAAAO,EAAAP,EAAA,IAAAQ,EAAAR,EAAA,IAAAS,EAAAT,EAAA,IAAAU,EAAAV,EAAA,IAAAW,EAAAX,EAAA,IAAAY,EAAAZ,EAAA,IAQMa,EAAM,IAAIV,EAAA,EAAI,CAClBW,OAAQ,MACRC,KAAM,IAAIX,EAAA,EAAK,CACbY,OAAQ,CAAC,EAAG,GACZC,KAAM,MAIJC,EAAa,IAAIT,EAAA,EAAM,CAC3BU,SAAU,SAASC,GACjBC,IAAIF,EAAWC,EAAQE,cACvB,GAA0B,gBAAtBH,EAASI,UAIX,IAFAC,IAAMC,EAAWN,EAASO,cACtBC,EAAS,EACJC,EAAI,EAAGC,EAAKJ,EAASK,OAAQF,EAAIC,IAAMD,EAAG,CACjDJ,IAAMO,EAAUN,EAASG,GACnBI,EAAQC,OAAA5B,EAAA,EAAA4B,CAASF,EAAQG,aACnBP,EAARK,IACFL,EAASK,EACTb,EAAWY,GAIjB,OAAOZ,GAETgB,KAAM,IAAIzB,EAAA,EAAK,CACb0B,KAAM,0BACNC,UAAU,EACVC,KAAM,IAAI3B,EAAA,EAAK,CACb4B,MAAO,SAETC,OAAQ,IAAI5B,EAAA,EAAO,CACjB2B,MAAO,OACPP,MAAO,QAaPS,EAAQ,CATO,IAAIhC,EAAA,EAAM,CAC7B6B,KAAM,IAAI3B,EAAA,EAAK,CACb4B,MAAO,6BAETC,OAAQ,IAAI5B,EAAA,EAAO,CACjB2B,MAAO,UACPP,MAAO,MAGkBd,GAEvBwB,EAAc,IAAInC,EAAA,EAAY,CAClCoC,OAAQ,IAAInC,EAAA,EAAa,CACvBoC,IAAK,iCACLC,OAAQ,IAAIvC,EAAA,IAEdmC,MAAO,SAASrB,GAEd,OADAF,EAAW4B,UAAUC,QAAQ3B,EAAQ4B,IAAI,SAClCP,GAETQ,WAAW,IAGbpC,EAAIqC,SAASR","file":"vector-label-decluttering.js","sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport {getWidth} from '../src/ol/extent.js';\nimport GeoJSON from '../src/ol/format/GeoJSON.js';\nimport VectorLayer from '../src/ol/layer/Vector.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport {Fill, Stroke, Style, Text} from '../src/ol/style.js';\n\nconst map = new Map({\n  target: 'map',\n  view: new View({\n    center: [0, 0],\n    zoom: 1\n  })\n});\n\nconst labelStyle = new Style({\n  geometry: function(feature) {\n    let geometry = feature.getGeometry();\n    if (geometry.getType() == 'MultiPolygon') {\n      // Only render label for the widest polygon of a multipolygon\n      const polygons = geometry.getPolygons();\n      let widest = 0;\n      for (let i = 0, ii = polygons.length; i < ii; ++i) {\n        const polygon = polygons[i];\n        const width = getWidth(polygon.getExtent());\n        if (width > widest) {\n          widest = width;\n          geometry = polygon;\n        }\n      }\n    }\n    return geometry;\n  },\n  text: new Text({\n    font: '12px Calibri,sans-serif',\n    overflow: true,\n    fill: new Fill({\n      color: '#000'\n    }),\n    stroke: new Stroke({\n      color: '#fff',\n      width: 3\n    })\n  })\n});\nconst countryStyle = new Style({\n  fill: new Fill({\n    color: 'rgba(255, 255, 255, 0.6)'\n  }),\n  stroke: new Stroke({\n    color: '#319FD3',\n    width: 1\n  })\n});\nconst style = [countryStyle, labelStyle];\n\nconst vectorLayer = new VectorLayer({\n  source: new VectorSource({\n    url: 'data/geojson/countries.geojson',\n    format: new GeoJSON()\n  }),\n  style: function(feature) {\n    labelStyle.getText().setText(feature.get('name'));\n    return style;\n  },\n  declutter: true\n});\n\nmap.addLayer(vectorLayer);\n"],"sourceRoot":""}