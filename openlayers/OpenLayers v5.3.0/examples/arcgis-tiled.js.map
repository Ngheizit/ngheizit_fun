{"version":3,"sources":["webpack:///../src/ol/source/TileArcGISRest.js","webpack:///./arcgis-tiled.js"],"names":["tileUrlFunction","tileCoord","pixelRatio","projection","let","tileGrid","this","getTileGrid","getTileGridForProjection","getResolutions","length","const","tileExtent","getTileCoordExtent","tmpExtent_","tileSize","Object","size","getTileSize","tmpSize","baseParams","F","FORMAT","TRANSPARENT","obj","params_","getRequestUrl_","source_TileArcGISRest","TileImage","TileArcGISRest","opt_options","options","super","attributions","cacheSize","crossOrigin","reprojectionErrorThreshold","tileLoadFunction","url","urls","wrapX","undefined","transition","params","extent","setKey","getKeyForParams_","i","res","key","join","getParams","srid","getCode","split","pop","Math","round","math","tilecoord","modifiedUrl","replace","uri","getTilePixelRatio","updateParams","source_TileImage","arcgis_tiled_layers","Tile","source","OSM","Map","layers","target","view","View","center","zoom"],"mappings":"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","file":"arcgis-tiled.js","sourcesContent":["/**\n * @module ol/source/TileArcGISRest\n */\n\nimport {createEmpty} from '../extent.js';\nimport {modulo} from '../math.js';\nimport {assign} from '../obj.js';\nimport {toSize, scale as scaleSize} from '../size.js';\nimport TileImage from './TileImage.js';\nimport {hash as tileCoordHash} from '../tilecoord.js';\nimport {appendParams} from '../uri.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize=2048] Cache size.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.\n * Note that you must provide a `crossOrigin` value if you are using the WebGL renderer\n * or if you want to access pixel data with the Canvas renderer.  See\n * https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image\n * for more detail.\n * @property {Object<string,*>} [params] ArcGIS Rest parameters. This field is optional. Service defaults will be\n * used for any fields not specified. `FORMAT` is `PNG32` by default. `F` is `IMAGE` by\n * default. `TRANSPARENT` is `true` by default.  `BBOX`, `SIZE`, `BBOXSR`,\n * and `IMAGESR` will be set dynamically. Set `LAYERS` to\n * override the default service layer visibility. See\n * http://resources.arcgis.com/en/help/arcgis-rest-api/index.html#/Export_Map/02r3000000v7000000/\n * for further reference.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid. Base this on the resolutions,\n * tilesize and extent supported by the server.\n * If this is not defined, a default grid will be used: if there is a projection\n * extent, the grid will be based on that; if not, a grid based on a global\n * extent with origin at 0,0 will be used.\n * @property {import(\"../proj.js\").ProjectionLike} projection Projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL.\n * The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {string} [url] ArcGIS Rest service URL for a Map Service or Image Service. The\n * url should include /MapServer or /ImageServer.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.  To disable the opacity\n * transition, pass `transition: 0`.\n * @property {Array<string>} urls ArcGIS Rest service urls. Use this instead of `url` when the ArcGIS\n * Service supports multiple urls for export requests.\n */\n\n\n/**\n * @classdesc\n * Layer source for tile data from ArcGIS Rest services. Map and Image\n * Services are supported.\n *\n * For cached ArcGIS services, better performance is available using the\n * {@link module:ol/source/XYZ~XYZ} data source.\n * @api\n */\nclass TileArcGISRest extends TileImage {\n  /**\n   * @param {Options=} opt_options Tile ArcGIS Rest options.\n   */\n  constructor(opt_options) {\n\n    const options = opt_options || /** @type {Options} */ ({});\n\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      projection: options.projection,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileGrid: options.tileGrid,\n      tileLoadFunction: options.tileLoadFunction,\n      tileUrlFunction: tileUrlFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition\n    });\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.params_ = options.params || {};\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.tmpExtent_ = createEmpty();\n\n    this.setKey(this.getKeyForParams_());\n  }\n\n  /**\n   * @private\n   * @return {string} The key for the current params.\n   */\n  getKeyForParams_() {\n    let i = 0;\n    const res = [];\n    for (const key in this.params_) {\n      res[i++] = key + '-' + this.params_[key];\n    }\n    return res.join('/');\n  }\n\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n  getParams() {\n    return this.params_;\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../size.js\").Size} tileSize Tile size.\n   * @param {import(\"../extent.js\").Extent} tileExtent Tile extent.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {Object} params Params.\n   * @return {string|undefined} Request URL.\n   * @private\n   */\n  getRequestUrl_(tileCoord, tileSize, tileExtent, pixelRatio, projection, params) {\n\n    const urls = this.urls;\n    if (!urls) {\n      return undefined;\n    }\n\n    // ArcGIS Server only wants the numeric portion of the projection ID.\n    const srid = projection.getCode().split(':').pop();\n\n    params['SIZE'] = tileSize[0] + ',' + tileSize[1];\n    params['BBOX'] = tileExtent.join(',');\n    params['BBOXSR'] = srid;\n    params['IMAGESR'] = srid;\n    params['DPI'] = Math.round(\n      params['DPI'] ? params['DPI'] * pixelRatio : 90 * pixelRatio\n    );\n\n    let url;\n    if (urls.length == 1) {\n      url = urls[0];\n    } else {\n      const index = modulo(tileCoordHash(tileCoord), urls.length);\n      url = urls[index];\n    }\n\n    const modifiedUrl = url\n      .replace(/MapServer\\/?$/, 'MapServer/export')\n      .replace(/ImageServer\\/?$/, 'ImageServer/exportImage');\n    return appendParams(modifiedUrl, params);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getTilePixelRatio(pixelRatio) {\n    return /** @type {number} */ (pixelRatio);\n  }\n\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n  updateParams(params) {\n    assign(this.params_, params);\n    this.setKey(this.getKeyForParams_());\n  }\n}\n\n/**\n * @param {import(\"../tilecoord.js\").TileCoord} tileCoord The tile coordinate\n * @param {number} pixelRatio The pixel ratio\n * @param {import(\"../proj/Projection.js\").default} projection The projection\n * @return {string|undefined} The tile URL\n * @this {TileArcGISRest}\n */\nfunction tileUrlFunction(tileCoord, pixelRatio, projection) {\n\n  let tileGrid = this.getTileGrid();\n  if (!tileGrid) {\n    tileGrid = this.getTileGridForProjection(projection);\n  }\n\n  if (tileGrid.getResolutions().length <= tileCoord[0]) {\n    return undefined;\n  }\n\n  const tileExtent = tileGrid.getTileCoordExtent(\n    tileCoord, this.tmpExtent_);\n  let tileSize = toSize(\n    tileGrid.getTileSize(tileCoord[0]), this.tmpSize);\n\n  if (pixelRatio != 1) {\n    tileSize = scaleSize(tileSize, pixelRatio, this.tmpSize);\n  }\n\n  // Apply default params and override with user specified values.\n  const baseParams = {\n    'F': 'image',\n    'FORMAT': 'PNG32',\n    'TRANSPARENT': true\n  };\n  assign(baseParams, this.params_);\n\n  return this.getRequestUrl_(tileCoord, tileSize, tileExtent,\n    pixelRatio, projection, baseParams);\n}\n\n\nexport default TileArcGISRest;\n","import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport {OSM, TileArcGISRest} from '../src/ol/source.js';\n\nconst url = 'https://sampleserver1.arcgisonline.com/ArcGIS/rest/services/' +\n    'Specialty/ESRI_StateCityHighway_USA/MapServer';\n\nconst layers = [\n  new TileLayer({\n    source: new OSM()\n  }),\n  new TileLayer({\n    extent: [-13884991, 2870341, -7455066, 6338219],\n    source: new TileArcGISRest({\n      url: url\n    })\n  })\n];\nconst map = new Map({\n  layers: layers,\n  target: 'map',\n  view: new View({\n    center: [-10997148, 4569099],\n    zoom: 4\n  })\n});\n"],"sourceRoot":""}