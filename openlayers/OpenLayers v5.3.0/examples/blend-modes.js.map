{"version":3,"sources":["webpack:///./blend-modes.js"],"names":["__webpack_require__","r","__webpack_exports__","_src_ol_Feature_js__WEBPACK_IMPORTED_MODULE_0__","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_1__","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_2__","_src_ol_geom_Point_js__WEBPACK_IMPORTED_MODULE_3__","_src_ol_layer_Vector_js__WEBPACK_IMPORTED_MODULE_4__","_src_ol_source_Vector_js__WEBPACK_IMPORTED_MODULE_5__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_6__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_7__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_8__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_9__","redLayer","source","features","style","image","fill","color","stroke","width","radius","greenLayer","blueLayer","map","layers","target","view","center","extent","resolution","minResolution","maxResolution","select","document","getElementById","affectRed","affectGreen","affectBlue","setBlendModeFromSelect","evt","context","globalCompositeOperation","value","resetBlendModeFromSelect","bindLayerListeners","layer","on","affectLayerClicked","let","this","id","checked","un","render","addEventListener"],"mappings":"0FAAAA,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,IAAAI,EAAAJ,EAAA,GAAAK,EAAAL,EAAA,GAAAM,EAAAN,EAAA,IAAAO,EAAAP,EAAA,IAAAQ,EAAAR,EAAA,IAAAS,EAAAT,EAAA,IAAAU,EAAAV,EAAA,IAAAW,EAAAX,EAAA,IAAAY,EAAAZ,EAAA,IAaMa,EAAW,IAAIN,EAAA,EAAY,CAC/BO,OAAQ,IAAIN,EAAA,EAAa,CACvBO,SAAU,CAAC,IAAIZ,EAAA,EAAQ,IAAIG,EAAA,EAAM,CAAC,EAAG,QAEvCU,MAAO,IAAIP,EAAA,EAAM,CACfQ,MAAO,IAAIP,EAAA,EAAY,CACrBQ,KAAM,IAAIP,EAAA,EAAK,CACbQ,MAAO,sBAETC,OAAQ,IAAIR,EAAA,EAAO,CACjBO,MAAO,eACPE,MAAO,KAETC,OAAQ,UAIRC,EAAa,IAAIhB,EAAA,EAAY,CACjCO,OAAQ,IAAIN,EAAA,EAAa,CAEvBO,SAAU,CAAC,IAAIZ,EAAA,EAAQ,IAAIG,EAAA,EAAM,CAAC,IAAK,cAEzCU,MAAO,IAAIP,EAAA,EAAM,CACfQ,MAAO,IAAIP,EAAA,EAAY,CACrBQ,KAAM,IAAIP,EAAA,EAAK,CACbQ,MAAO,sBAETC,OAAQ,IAAIR,EAAA,EAAO,CACjBO,MAAO,eACPE,MAAO,KAETC,OAAQ,UAIRE,EAAY,IAAIjB,EAAA,EAAY,CAChCO,OAAQ,IAAIN,EAAA,EAAa,CACvBO,SAAU,CAAC,IAAIZ,EAAA,EAAQ,IAAIG,EAAA,EAAM,CAAC,IAAK,QAEzCU,MAAO,IAAIP,EAAA,EAAM,CACfQ,MAAO,IAAIP,EAAA,EAAY,CACrBQ,KAAM,IAAIP,EAAA,EAAK,CACbQ,MAAO,sBAETC,OAAQ,IAAIR,EAAA,EAAO,CACjBO,MAAO,eACPE,MAAO,KAETC,OAAQ,UAORG,EAAM,IAAIrB,EAAA,EAAI,CAClBsB,OAAQ,CACNb,EACAU,EACAC,GAEFG,OAAQ,MACRC,KAAM,IAAIvB,EAAA,EAAK,CACbwB,OAAQ,CAAC,IAAK,KACdC,OAAQ,CAAC,EAAG,EAAG,IAAK,KACpBC,WAAY,EACZC,cAAe,EACfC,cAAe,OAKbC,EAASC,SAASC,eAAe,cACjCC,EAAYF,SAASC,eAAe,cACpCE,EAAcH,SAASC,eAAe,gBACtCG,EAAaJ,SAASC,eAAe,eASrCI,EAAyB,SAASC,GACtCA,EAAIC,QAAQC,yBAA2BT,EAAOU,OAU1CC,EAA2B,SAASJ,GACxCA,EAAIC,QAAQC,yBAA2B,eASnCG,EAAqB,SAASC,GAClCA,EAAMC,GAAG,aAAcR,GACvBO,EAAMC,GAAG,cAAeH,IAoBpBI,EAAqB,WACzBC,IAAIH,EAZgCA,EAclCA,EADa,cAAXI,KAAKC,GACCvC,EACY,gBAAXsC,KAAKC,GACN7B,EAEAC,EAEN2B,KAAKE,QACPP,EAAmBC,KArBeA,EAuBbA,GAtBjBO,GAAG,aAAcd,GACvBO,EAAMO,GAAG,cAAeT,IAuBxBpB,EAAI8B,UAKNrB,EAAOsB,iBAAiB,SAAU,WAChC/B,EAAI8B,WAKNlB,EAAUmB,iBAAiB,QAASP,GACpCX,EAAYkB,iBAAiB,QAASP,GACtCV,EAAWiB,iBAAiB,QAASP,GAGrCH,EAAmBjC,GACnBiC,EAAmBvB,GACnBuB,EAAmBtB","file":"blend-modes.js","sourcesContent":["import Feature from '../src/ol/Feature.js';\nimport Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport Point from '../src/ol/geom/Point.js';\nimport VectorLayer from '../src/ol/layer/Vector.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport {Circle as CircleStyle, Fill, Stroke, Style} from '../src/ol/style.js';\n\n\n// Create separate layers for red, green an blue circles.\n//\n// Every layer has one feature that is styled with a circle, together the\n// features form the corners of an equilateral triangle and their styles overlap\nconst redLayer = new VectorLayer({\n  source: new VectorSource({\n    features: [new Feature(new Point([0, 0]))]\n  }),\n  style: new Style({\n    image: new CircleStyle({\n      fill: new Fill({\n        color: 'rgba(255,0,0,0.8)'\n      }),\n      stroke: new Stroke({\n        color: 'rgb(255,0,0)',\n        width: 15\n      }),\n      radius: 120\n    })\n  })\n});\nconst greenLayer = new VectorLayer({\n  source: new VectorSource({\n    // 433.013 is roughly 250 * Math.sqrt(3)\n    features: [new Feature(new Point([250, 433.013]))]\n  }),\n  style: new Style({\n    image: new CircleStyle({\n      fill: new Fill({\n        color: 'rgba(0,255,0,0.8)'\n      }),\n      stroke: new Stroke({\n        color: 'rgb(0,255,0)',\n        width: 15\n      }),\n      radius: 120\n    })\n  })\n});\nconst blueLayer = new VectorLayer({\n  source: new VectorSource({\n    features: [new Feature(new Point([500, 0]))]\n  }),\n  style: new Style({\n    image: new CircleStyle({\n      fill: new Fill({\n        color: 'rgba(0,0,255,0.8)'\n      }),\n      stroke: new Stroke({\n        color: 'rgb(0,0,255)',\n        width: 15\n      }),\n      radius: 120\n    })\n  })\n});\n\n// Create the map, the view is centered on the triangle. Zooming and panning is\n// restricted to a sane area\nconst map = new Map({\n  layers: [\n    redLayer,\n    greenLayer,\n    blueLayer\n  ],\n  target: 'map',\n  view: new View({\n    center: [250, 220],\n    extent: [0, 0, 500, 500],\n    resolution: 4,\n    minResolution: 2,\n    maxResolution: 32\n  })\n});\n\n// Get the form elements and bind the listeners\nconst select = document.getElementById('blend-mode');\nconst affectRed = document.getElementById('affect-red');\nconst affectGreen = document.getElementById('affect-green');\nconst affectBlue = document.getElementById('affect-blue');\n\n\n/**\n * This method sets the globalCompositeOperation to the value of the select\n * field and it is bound to the precompose event of the layers.\n *\n * @param {module:ol/render/Event~RenderEvent} evt The render event.\n */\nconst setBlendModeFromSelect = function(evt) {\n  evt.context.globalCompositeOperation = select.value;\n};\n\n\n/**\n * This method resets the globalCompositeOperation to the default value of\n * 'source-over' and it is bound to the postcompose event of the layers.\n *\n * @param {module:ol/render/Event~RenderEvent} evt The render event.\n */\nconst resetBlendModeFromSelect = function(evt) {\n  evt.context.globalCompositeOperation = 'source-over';\n};\n\n\n/**\n * Bind the pre- and postcompose handlers to the passed layer.\n *\n * @param {module:ol/layer/Vector} layer The layer to bind the handlers to.\n */\nconst bindLayerListeners = function(layer) {\n  layer.on('precompose', setBlendModeFromSelect);\n  layer.on('postcompose', resetBlendModeFromSelect);\n};\n\n\n/**\n * Unind the pre- and postcompose handlers to the passed layers.\n *\n * @param {module:ol/layer/Vector} layer The layer to unbind the handlers from.\n */\nconst unbindLayerListeners = function(layer) {\n  layer.un('precompose', setBlendModeFromSelect);\n  layer.un('postcompose', resetBlendModeFromSelect);\n};\n\n\n/**\n * Handler for the click event of the 'affect-XXX' checkboxes.\n *\n * @this {HTMLInputElement}\n */\nconst affectLayerClicked = function() {\n  let layer;\n  if (this.id == 'affect-red') {\n    layer = redLayer;\n  } else if (this.id == 'affect-green') {\n    layer = greenLayer;\n  } else {\n    layer = blueLayer;\n  }\n  if (this.checked) {\n    bindLayerListeners(layer);\n  } else {\n    unbindLayerListeners(layer);\n  }\n  map.render();\n};\n\n\n// Rerender map when blend mode changes\nselect.addEventListener('change', function() {\n  map.render();\n});\n\n// Unbind / bind listeners depending on the checked state when the checkboxes\n// are clicked\naffectRed.addEventListener('click', affectLayerClicked);\naffectGreen.addEventListener('click', affectLayerClicked);\naffectBlue.addEventListener('click', affectLayerClicked);\n\n// Initially bind listeners\nbindLayerListeners(redLayer);\nbindLayerListeners(greenLayer);\nbindLayerListeners(blueLayer);\n"],"sourceRoot":""}