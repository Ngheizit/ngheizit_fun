{"version":3,"sources":["webpack:///../src/ol/source/ImageArcGISRest.js","webpack:///./arcgis-image.js"],"names":["source_ImageArcGISRest","ImageSource","ImageArcGISRest","opt_options","const","options","super","this","attributions","projection","resolutions","crossOrigin_","undefined","crossOrigin","hidpi_","hidpi","url_","url","imageLoadFunction_","imageLoadFunction","source_Image","params_","params","image_","imageSize_","renderedRevision_","ratio_","ratio","getParams","getImageInternal","extent","resolution","pixelRatio","findNearestResolution","image","getRevision","getResolution","getPixelRatio","Object","ol_extent","getExtent","F","FORMAT","TRANSPARENT","obj","centerX","slice","centerY","halfWidth","halfHeight","imageResolution","width","Math","ceil","height","getRequestUrl_","ol_Image","events","EventType","CHANGE","handleImageChange","getImageLoadFunction","size","srid","getCode","split","pop","join","round","modifiedUrl","replace","asserts","uri","getUrl","setImageLoadFunction","changed","setUrl","updateParams","arcgis_image_layers","Tile","source","OSM","Image","Map","layers","target","view","View","center","zoom"],"mappings":"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","file":"arcgis-image.js","sourcesContent":["/**\n * @module ol/source/ImageArcGISRest\n */\n\nimport ImageWrapper from '../Image.js';\nimport {assert} from '../asserts.js';\nimport {listen} from '../events.js';\nimport EventType from '../events/EventType.js';\nimport {containsExtent, getHeight, getWidth} from '../extent.js';\nimport {assign} from '../obj.js';\nimport ImageSource, {defaultImageLoadFunction} from './Image.js';\nimport {appendParams} from '../uri.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you are using the WebGL renderer or if you want to\n * access pixel data with the Canvas renderer.  See\n * {@link https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image} for more detail.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting the image from\n * the remote server.\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given\n * a URL.\n * @property {Object<string,*>} [params] ArcGIS Rest parameters. This field is optional. Service\n * defaults will be used for any fields not specified. `FORMAT` is `PNG32` by default. `F` is\n * `IMAGE` by default. `TRANSPARENT` is `true` by default.  `BBOX`, `SIZE`, `BBOXSR`, and `IMAGESR`\n * will be set dynamically. Set `LAYERS` to override the default service layer visibility. See\n * {@link http://resources.arcgis.com/en/help/arcgis-rest-api/index.html#/Export_Map/02r3000000v7000000/}\n * for further reference.\n * @property {import(\"../proj.js\").ProjectionLike} projection Projection.\n * @property {number} [ratio=1.5] Ratio. `1` means image requests are the size of the map viewport,\n * `2` means twice the size of the map viewport, and so on.\n * @property {Array<number>} [resolutions] Resolutions. If specified, requests will be made for\n * these resolutions only.\n * @property {string} [url] ArcGIS Rest service URL for a Map Service or Image Service. The url\n * should include /MapServer or /ImageServer.\n */\n\n\n/**\n * @classdesc\n * Source for data from ArcGIS Rest services providing single, untiled images.\n * Useful when underlying map service has labels.\n *\n * If underlying map service is not using labels,\n * take advantage of ol image caching and use\n * {@link module:ol/source/TileArcGISRest} data source.\n *\n * @fires ol/source/Image~ImageSourceEvent\n * @api\n */\nclass ImageArcGISRest extends ImageSource {\n  /**\n   * @param {Options=} opt_options Image ArcGIS Rest Options.\n   */\n  constructor(opt_options) {\n\n    const options = opt_options || /** @type {Options} */ ({});\n\n    super({\n      attributions: options.attributions,\n      projection: options.projection,\n      resolutions: options.resolutions\n    });\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    this.crossOrigin_ =\n        options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.url_ = options.url;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").LoadFunction}\n     */\n    this.imageLoadFunction_ = options.imageLoadFunction !== undefined ?\n      options.imageLoadFunction : defaultImageLoadFunction;\n\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.params_ = options.params || {};\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").default}\n     */\n    this.image_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.imageSize_ = [0, 0];\n\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRevision_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;\n\n  }\n\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n  getParams() {\n    return this.params_;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getImageInternal(extent, resolution, pixelRatio, projection) {\n\n    if (this.url_ === undefined) {\n      return null;\n    }\n\n    resolution = this.findNearestResolution(resolution);\n    pixelRatio = this.hidpi_ ? pixelRatio : 1;\n\n    const image = this.image_;\n    if (image &&\n        this.renderedRevision_ == this.getRevision() &&\n        image.getResolution() == resolution &&\n        image.getPixelRatio() == pixelRatio &&\n        containsExtent(image.getExtent(), extent)) {\n      return image;\n    }\n\n    const params = {\n      'F': 'image',\n      'FORMAT': 'PNG32',\n      'TRANSPARENT': true\n    };\n    assign(params, this.params_);\n\n    extent = extent.slice();\n    const centerX = (extent[0] + extent[2]) / 2;\n    const centerY = (extent[1] + extent[3]) / 2;\n    if (this.ratio_ != 1) {\n      const halfWidth = this.ratio_ * getWidth(extent) / 2;\n      const halfHeight = this.ratio_ * getHeight(extent) / 2;\n      extent[0] = centerX - halfWidth;\n      extent[1] = centerY - halfHeight;\n      extent[2] = centerX + halfWidth;\n      extent[3] = centerY + halfHeight;\n    }\n\n    const imageResolution = resolution / pixelRatio;\n\n    // Compute an integer width and height.\n    const width = Math.ceil(getWidth(extent) / imageResolution);\n    const height = Math.ceil(getHeight(extent) / imageResolution);\n\n    // Modify the extent to match the integer width and height.\n    extent[0] = centerX - imageResolution * width / 2;\n    extent[2] = centerX + imageResolution * width / 2;\n    extent[1] = centerY - imageResolution * height / 2;\n    extent[3] = centerY + imageResolution * height / 2;\n\n    this.imageSize_[0] = width;\n    this.imageSize_[1] = height;\n\n    const url = this.getRequestUrl_(extent, this.imageSize_, pixelRatio,\n      projection, params);\n\n    this.image_ = new ImageWrapper(extent, resolution, pixelRatio,\n      url, this.crossOrigin_, this.imageLoadFunction_);\n\n    this.renderedRevision_ = this.getRevision();\n\n    listen(this.image_, EventType.CHANGE,\n      this.handleImageChange, this);\n\n    return this.image_;\n\n  }\n\n  /**\n   * Return the image load function of the source.\n   * @return {import(\"../Image.js\").LoadFunction} The image load function.\n   * @api\n   */\n  getImageLoadFunction() {\n    return this.imageLoadFunction_;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {import(\"../size.js\").Size} size Size.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {Object} params Params.\n   * @return {string} Request URL.\n   * @private\n   */\n  getRequestUrl_(extent, size, pixelRatio, projection, params) {\n    // ArcGIS Server only wants the numeric portion of the projection ID.\n    const srid = projection.getCode().split(':').pop();\n\n    params['SIZE'] = size[0] + ',' + size[1];\n    params['BBOX'] = extent.join(',');\n    params['BBOXSR'] = srid;\n    params['IMAGESR'] = srid;\n    params['DPI'] = Math.round(90 * pixelRatio);\n\n    const url = this.url_;\n\n    const modifiedUrl = url\n      .replace(/MapServer\\/?$/, 'MapServer/export')\n      .replace(/ImageServer\\/?$/, 'ImageServer/exportImage');\n    if (modifiedUrl == url) {\n      assert(false, 50); // `options.featureTypes` should be an Array\n    }\n    return appendParams(modifiedUrl, params);\n  }\n\n  /**\n   * Return the URL used for this ArcGIS source.\n   * @return {string|undefined} URL.\n   * @api\n   */\n  getUrl() {\n    return this.url_;\n  }\n\n  /**\n   * Set the image load function of the source.\n   * @param {import(\"../Image.js\").LoadFunction} imageLoadFunction Image load function.\n   * @api\n   */\n  setImageLoadFunction(imageLoadFunction) {\n    this.image_ = null;\n    this.imageLoadFunction_ = imageLoadFunction;\n    this.changed();\n  }\n\n  /**\n   * Set the URL to use for requests.\n   * @param {string|undefined} url URL.\n   * @api\n   */\n  setUrl(url) {\n    if (url != this.url_) {\n      this.url_ = url;\n      this.image_ = null;\n      this.changed();\n    }\n  }\n\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n  updateParams(params) {\n    assign(this.params_, params);\n    this.image_ = null;\n    this.changed();\n  }\n}\n\n\nexport default ImageArcGISRest;\n","import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport {Tile as TileLayer, Image as ImageLayer} from '../src/ol/layer.js';\nimport {OSM, ImageArcGISRest} from '../src/ol/source.js';\n\nconst url = 'https://sampleserver1.arcgisonline.com/ArcGIS/rest/services/' +\n    'Specialty/ESRI_StateCityHighway_USA/MapServer';\n\nconst layers = [\n  new TileLayer({\n    source: new OSM()\n  }),\n  new ImageLayer({\n    source: new ImageArcGISRest({\n      ratio: 1,\n      params: {},\n      url: url\n    })\n  })\n];\nconst map = new Map({\n  layers: layers,\n  target: 'map',\n  view: new View({\n    center: [-10997148, 4569099],\n    zoom: 4\n  })\n});\n"],"sourceRoot":""}