{"version":3,"sources":["webpack:///./shaded-relief.js"],"names":["__webpack_require__","r","__webpack_exports__","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_0__","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_1__","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_2__","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_3__","_src_ol_source_js__WEBPACK_IMPORTED_MODULE_4__","_src_ol_source_js__WEBPACK_IMPORTED_MODULE_5__","_src_ol_source_js__WEBPACK_IMPORTED_MODULE_6__","const","elevation","url","crossOrigin","transition","raster","sources","operationType","operation","inputs","data","pixelX","pixelY","x1","y0","y1","offset","z0","dzdx","dzdy","slope","aspect","scaled","elevationImage","width","height","elevationData","shadeData","Uint8ClampedArray","length","dp","resolution","maxX","maxY","pixel","twoPi","Math","PI","halfPi","sunEl","sunAz","cosSunEl","cos","sinSunEl","sin","vert","atan","sqrt","atan2","controls","target","layers","source","opacity","view","extent","center","minZoom","maxZoom","zoom","forEach","id","control","document","getElementById","output","addEventListener","innerText","value","changed","on","event","Number"],"mappings":"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","file":"shaded-relief.js","sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport {Image as ImageLayer, Tile as TileLayer} from '../src/ol/layer.js';\nimport {OSM, Raster, XYZ} from '../src/ol/source.js';\n\n\n/**\n * Generates a shaded relief image given elevation data.  Uses a 3x3\n * neighborhood for determining slope and aspect.\n * @param {Array<ImageData>} inputs Array of input images.\n * @param {Object} data Data added in the \"beforeoperations\" event.\n * @return {ImageData} Output image.\n */\nfunction shade(inputs, data) {\n  const elevationImage = inputs[0];\n  const width = elevationImage.width;\n  const height = elevationImage.height;\n  const elevationData = elevationImage.data;\n  const shadeData = new Uint8ClampedArray(elevationData.length);\n  const dp = data.resolution * 2;\n  const maxX = width - 1;\n  const maxY = height - 1;\n  const pixel = [0, 0, 0, 0];\n  const twoPi = 2 * Math.PI;\n  const halfPi = Math.PI / 2;\n  const sunEl = Math.PI * data.sunEl / 180;\n  const sunAz = Math.PI * data.sunAz / 180;\n  const cosSunEl = Math.cos(sunEl);\n  const sinSunEl = Math.sin(sunEl);\n  let pixelX, pixelY, x0, x1, y0, y1, offset,\n      z0, z1, dzdx, dzdy, slope, aspect, cosIncidence, scaled;\n  for (pixelY = 0; pixelY <= maxY; ++pixelY) {\n    y0 = pixelY === 0 ? 0 : pixelY - 1;\n    y1 = pixelY === maxY ? maxY : pixelY + 1;\n    for (pixelX = 0; pixelX <= maxX; ++pixelX) {\n      x0 = pixelX === 0 ? 0 : pixelX - 1;\n      x1 = pixelX === maxX ? maxX : pixelX + 1;\n\n      // determine elevation for (x0, pixelY)\n      offset = (pixelY * width + x0) * 4;\n      pixel[0] = elevationData[offset];\n      pixel[1] = elevationData[offset + 1];\n      pixel[2] = elevationData[offset + 2];\n      pixel[3] = elevationData[offset + 3];\n      z0 = data.vert * (pixel[0] + pixel[1] * 2 + pixel[2] * 3);\n\n      // determine elevation for (x1, pixelY)\n      offset = (pixelY * width + x1) * 4;\n      pixel[0] = elevationData[offset];\n      pixel[1] = elevationData[offset + 1];\n      pixel[2] = elevationData[offset + 2];\n      pixel[3] = elevationData[offset + 3];\n      z1 = data.vert * (pixel[0] + pixel[1] * 2 + pixel[2] * 3);\n\n      dzdx = (z1 - z0) / dp;\n\n      // determine elevation for (pixelX, y0)\n      offset = (y0 * width + pixelX) * 4;\n      pixel[0] = elevationData[offset];\n      pixel[1] = elevationData[offset + 1];\n      pixel[2] = elevationData[offset + 2];\n      pixel[3] = elevationData[offset + 3];\n      z0 = data.vert * (pixel[0] + pixel[1] * 2 + pixel[2] * 3);\n\n      // determine elevation for (pixelX, y1)\n      offset = (y1 * width + pixelX) * 4;\n      pixel[0] = elevationData[offset];\n      pixel[1] = elevationData[offset + 1];\n      pixel[2] = elevationData[offset + 2];\n      pixel[3] = elevationData[offset + 3];\n      z1 = data.vert * (pixel[0] + pixel[1] * 2 + pixel[2] * 3);\n\n      dzdy = (z1 - z0) / dp;\n\n      slope = Math.atan(Math.sqrt(dzdx * dzdx + dzdy * dzdy));\n\n      aspect = Math.atan2(dzdy, -dzdx);\n      if (aspect < 0) {\n        aspect = halfPi - aspect;\n      } else if (aspect > halfPi) {\n        aspect = twoPi - aspect + halfPi;\n      } else {\n        aspect = halfPi - aspect;\n      }\n\n      cosIncidence = sinSunEl * Math.cos(slope) +\n          cosSunEl * Math.sin(slope) * Math.cos(sunAz - aspect);\n\n      offset = (pixelY * width + pixelX) * 4;\n      scaled = 255 * cosIncidence;\n      shadeData[offset] = scaled;\n      shadeData[offset + 1] = scaled;\n      shadeData[offset + 2] = scaled;\n      shadeData[offset + 3] = elevationData[offset + 3];\n    }\n  }\n\n  return {data: shadeData, width: width, height: height};\n}\n\nconst elevation = new XYZ({\n  url: 'https://{a-d}.tiles.mapbox.com/v3/aj.sf-dem/{z}/{x}/{y}.png',\n  crossOrigin: 'anonymous',\n  transition: 0\n});\n\nconst raster = new Raster({\n  sources: [elevation],\n  operationType: 'image',\n  operation: shade\n});\n\nconst map = new Map({\n  target: 'map',\n  layers: [\n    new TileLayer({\n      source: new OSM()\n    }),\n    new ImageLayer({\n      opacity: 0.3,\n      source: raster\n    })\n  ],\n  view: new View({\n    extent: [-13675026, 4439648, -13580856, 4580292],\n    center: [-13615645, 4497969],\n    minZoom: 10,\n    maxZoom: 16,\n    zoom: 13\n  })\n});\n\nconst controlIds = ['vert', 'sunEl', 'sunAz'];\nconst controls = {};\ncontrolIds.forEach(function(id) {\n  const control = document.getElementById(id);\n  const output = document.getElementById(id + 'Out');\n  control.addEventListener('input', function() {\n    output.innerText = control.value;\n    raster.changed();\n  });\n  output.innerText = control.value;\n  controls[id] = control;\n});\n\nraster.on('beforeoperations', function(event) {\n  // the event.data object will be passed to operations\n  const data = event.data;\n  data.resolution = event.resolution;\n  for (const id in controls) {\n    data[id] = Number(controls[id].value);\n  }\n});\n"],"sourceRoot":""}