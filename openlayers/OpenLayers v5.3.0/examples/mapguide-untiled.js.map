{"version":3,"sources":["webpack:///../src/ol/source/ImageMapGuide.js","webpack:///./mapguide-untiled.js"],"names":["source_ImageMapGuide","ImageSource","ImageMapGuide","options","super","this","projection","resolutions","crossOrigin_","undefined","crossOrigin","displayDpi_","displayDpi","params_","params","url_","url","imageLoadFunction_","imageLoadFunction","source_Image","hidpi_","hidpi","metersPerUnit_","metersPerUnit","ratio_","ratio","useOverlay_","useOverlay","image_","renderedRevision_","getParams","getImageInternal","extent","resolution","pixelRatio","findNearestResolution","let","image","getRevision","getResolution","getPixelRatio","Object","ol_extent","getExtent","slice","const","size","imageUrl","getUrl","ol_Image","events","EventType","CHANGE","handleImageChange","getImageLoadFunction","updateParams","obj","changed","baseUrl","dpi","mcsW","mcsH","devW","devH","mpp","scale","center","baseParams","OPERATION","VERSION","LOCALE","CLIENTAGENT","CLIP","SETDISPLAYDPI","SETDISPLAYWIDTH","Math","round","SETDISPLAYHEIGHT","SETVIEWSCALE","SETVIEWCENTERX","SETVIEWCENTERY","uri","setImageLoadFunction","Map","layers","Image","source","MAPDEFINITION","FORMAT","USERNAME","PASSWORD","target","view","View","zoom"],"mappings":"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","file":"mapguide-untiled.js","sourcesContent":["/**\n * @module ol/source/ImageMapGuide\n */\n\nimport ImageWrapper from '../Image.js';\nimport {listen} from '../events.js';\nimport EventType from '../events/EventType.js';\nimport {containsExtent, getCenter, getHeight, getWidth, scaleFromCenter} from '../extent.js';\nimport {assign} from '../obj.js';\nimport ImageSource, {defaultImageLoadFunction} from './Image.js';\nimport {appendParams} from '../uri.js';\n\n/**\n * @typedef {Object} Options\n * @property {string} [url] The mapagent url.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you are using the WebGL renderer or if you want to\n * access pixel data with the Canvas renderer.  See\n * https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {number} [displayDpi=96] The display resolution.\n * @property {number} [metersPerUnit=1] The meters-per-unit value.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {boolean} [useOverlay] If `true`, will use `GETDYNAMICMAPOVERLAYIMAGE`.\n * @property {import(\"../proj.js\").ProjectionLike} projection Projection.\n * @property {number} [ratio=1] Ratio. `1` means image requests are the size of the map viewport, `2` means\n * twice the width and height of the map viewport, and so on. Must be `1` or higher.\n * @property {Array<number>} [resolutions] Resolutions.\n * If specified, requests will be made for these resolutions only.\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given a URL.\n * @property {Object} [params] Additional parameters.\n */\n\n\n/**\n * @classdesc\n * Source for images from Mapguide servers\n *\n * @fires ol/source/Image~ImageSourceEvent\n * @api\n */\nclass ImageMapGuide extends ImageSource {\n  /**\n   * @param {Options} options ImageMapGuide options.\n   */\n  constructor(options) {\n\n    super({\n      projection: options.projection,\n      resolutions: options.resolutions\n    });\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    this.crossOrigin_ =\n        options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.displayDpi_ = options.displayDpi !== undefined ?\n      options.displayDpi : 96;\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.params_ = options.params || {};\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.url_ = options.url;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").LoadFunction}\n     */\n    this.imageLoadFunction_ = options.imageLoadFunction !== undefined ?\n      options.imageLoadFunction : defaultImageLoadFunction;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.metersPerUnit_ = options.metersPerUnit !== undefined ?\n      options.metersPerUnit : 1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.ratio_ = options.ratio !== undefined ? options.ratio : 1;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.useOverlay_ = options.useOverlay !== undefined ?\n      options.useOverlay : false;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").default}\n     */\n    this.image_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRevision_ = 0;\n\n  }\n\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n  getParams() {\n    return this.params_;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getImageInternal(extent, resolution, pixelRatio, projection) {\n    resolution = this.findNearestResolution(resolution);\n    pixelRatio = this.hidpi_ ? pixelRatio : 1;\n\n    let image = this.image_;\n    if (image &&\n        this.renderedRevision_ == this.getRevision() &&\n        image.getResolution() == resolution &&\n        image.getPixelRatio() == pixelRatio &&\n        containsExtent(image.getExtent(), extent)) {\n      return image;\n    }\n\n    if (this.ratio_ != 1) {\n      extent = extent.slice();\n      scaleFromCenter(extent, this.ratio_);\n    }\n    const width = getWidth(extent) / resolution;\n    const height = getHeight(extent) / resolution;\n    const size = [width * pixelRatio, height * pixelRatio];\n\n    if (this.url_ !== undefined) {\n      const imageUrl = this.getUrl(this.url_, this.params_, extent, size,\n        projection);\n      image = new ImageWrapper(extent, resolution, pixelRatio,\n        imageUrl, this.crossOrigin_,\n        this.imageLoadFunction_);\n      listen(image, EventType.CHANGE,\n        this.handleImageChange, this);\n    } else {\n      image = null;\n    }\n    this.image_ = image;\n    this.renderedRevision_ = this.getRevision();\n\n    return image;\n  }\n\n  /**\n   * Return the image load function of the source.\n   * @return {import(\"../Image.js\").LoadFunction} The image load function.\n   * @api\n   */\n  getImageLoadFunction() {\n    return this.imageLoadFunction_;\n  }\n\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n  updateParams(params) {\n    assign(this.params_, params);\n    this.changed();\n  }\n\n  /**\n   * @param {string} baseUrl The mapagent url.\n   * @param {Object<string, string|number>} params Request parameters.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {import(\"../size.js\").Size} size Size.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {string} The mapagent map image request URL.\n   */\n  getUrl(baseUrl, params, extent, size, projection) {\n    const scale = getScale(extent, size,\n      this.metersPerUnit_, this.displayDpi_);\n    const center = getCenter(extent);\n    const baseParams = {\n      'OPERATION': this.useOverlay_ ? 'GETDYNAMICMAPOVERLAYIMAGE' : 'GETMAPIMAGE',\n      'VERSION': '2.0.0',\n      'LOCALE': 'en',\n      'CLIENTAGENT': 'ol/source/ImageMapGuide source',\n      'CLIP': '1',\n      'SETDISPLAYDPI': this.displayDpi_,\n      'SETDISPLAYWIDTH': Math.round(size[0]),\n      'SETDISPLAYHEIGHT': Math.round(size[1]),\n      'SETVIEWSCALE': scale,\n      'SETVIEWCENTERX': center[0],\n      'SETVIEWCENTERY': center[1]\n    };\n    assign(baseParams, params);\n    return appendParams(baseUrl, baseParams);\n  }\n\n  /**\n   * Set the image load function of the MapGuide source.\n   * @param {import(\"../Image.js\").LoadFunction} imageLoadFunction Image load function.\n   * @api\n   */\n  setImageLoadFunction(imageLoadFunction) {\n    this.image_ = null;\n    this.imageLoadFunction_ = imageLoadFunction;\n    this.changed();\n  }\n}\n\n\n/**\n * @param {import(\"../extent.js\").Extent} extent The map extents.\n * @param {import(\"../size.js\").Size} size The viewport size.\n * @param {number} metersPerUnit The meters-per-unit value.\n * @param {number} dpi The display resolution.\n * @return {number} The computed map scale.\n */\nfunction getScale(extent, size, metersPerUnit, dpi) {\n  const mcsW = getWidth(extent);\n  const mcsH = getHeight(extent);\n  const devW = size[0];\n  const devH = size[1];\n  const mpp = 0.0254 / dpi;\n  if (devH * mcsW > devW * mcsH) {\n    return mcsW * metersPerUnit / (devW * mpp); // width limited\n  } else {\n    return mcsH * metersPerUnit / (devH * mpp); // height limited\n  }\n}\n\n\nexport default ImageMapGuide;\n","import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport ImageLayer from '../src/ol/layer/Image.js';\nimport ImageMapGuide from '../src/ol/source/ImageMapGuide.js';\n\nconst mdf = 'Library://Public/Samples/Sheboygan/Maps/Sheboygan.MapDefinition';\nconst agentUrl =\n    'http://www.buoyshark.com/mapguide/mapagent/mapagent.fcgi?';\nconst bounds = [\n  -87.865114442365922,\n  43.665065564837931,\n  -87.595394059497067,\n  43.823852564430069\n];\nconst map = new Map({\n  layers: [\n    new ImageLayer({\n      extent: bounds,\n      source: new ImageMapGuide({\n        projection: 'EPSG:4326',\n        url: agentUrl,\n        useOverlay: false,\n        metersPerUnit: 111319.4908, //value returned from mapguide\n        params: {\n          MAPDEFINITION: mdf,\n          FORMAT: 'PNG',\n          USERNAME: 'OpenLayers',\n          PASSWORD: 'OpenLayers'\n        },\n        ratio: 2\n      })\n    })\n  ],\n  target: 'map',\n  view: new View({\n    center: [-87.7302542509315, 43.744459064634],\n    projection: 'EPSG:4326',\n    zoom: 12\n  })\n});\n"],"sourceRoot":""}