{"version":3,"sources":["webpack:///./synthetic-points.js"],"names":["__webpack_require__","r","__webpack_exports__","_src_ol_Feature_js__WEBPACK_IMPORTED_MODULE_0__","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_1__","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_2__","_src_ol_geom_js__WEBPACK_IMPORTED_MODULE_3__","_src_ol_geom_js__WEBPACK_IMPORTED_MODULE_4__","_src_ol_layer_Vector_js__WEBPACK_IMPORTED_MODULE_5__","_src_ol_source_Vector_js__WEBPACK_IMPORTED_MODULE_6__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_7__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_8__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_9__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_10__","features","Array","e","i","geometry","Math","random","size","const","styles","10","image","radius","fill","color","stroke","width","20","vectorSource","wrapX","vector","source","style","feature","get","map","layers","target","document","getElementById","view","center","zoom","point","line","displaySnap","coordinate","closestFeature","getClosestFeatureToCoordinate","closestPoint","getGeometry","getClosestPoint","setCoordinates","render","on","evt","dragging","getEventCoordinate","originalEvent","vectorContext","setStyle","drawGeometry","pixel","getEventPixel","hit","hasFeatureAtPixel","getTarget","cursor"],"mappings":"4FAAAA,EAAAC,EAAAC,GAYA,IAZA,IAAAC,EAAAH,EAAA,IAAAI,EAAAJ,EAAA,GAAAK,EAAAL,EAAA,GAAAM,EAAAN,EAAA,IAAAO,EAAAP,EAAA,IAAAQ,EAAAR,EAAA,IAAAS,EAAAT,EAAA,IAAAU,EAAAV,EAAA,IAAAW,EAAAX,EAAA,IAAAY,EAAAZ,EAAA,IAAAa,EAAAb,EAAA,IAUMc,EAAW,IAAIC,MADP,KAERC,EAAI,KACDC,EAAI,EAAGA,EAHF,MAGeA,EAC3BH,EAASG,GAAK,IAAId,EAAA,EAAQ,CACxBe,SAAY,IAAIZ,EAAA,EACd,CAAC,EAAIU,EAAIG,KAAKC,SAAWJ,EAAG,EAAIA,EAAIG,KAAKC,SAAWJ,IACtDC,EAAKA,EACLI,KAAQJ,EAAI,EAAI,GAAK,KAIzBK,IAAMC,EAAS,CACbC,GAAM,IAAId,EAAA,EAAM,CACde,MAAO,IAAId,EAAA,EAAY,CACrBe,OAAQ,EACRC,KAAM,IAAIf,EAAA,EAAK,CAACgB,MAAO,YACvBC,OAAQ,IAAIhB,EAAA,EAAO,CAACe,MAAO,UAAWE,MAAO,QAGjDC,GAAM,IAAIrB,EAAA,EAAM,CACde,MAAO,IAAId,EAAA,EAAY,CACrBe,OAAQ,GACRC,KAAM,IAAIf,EAAA,EAAK,CAACgB,MAAO,YACvBC,OAAQ,IAAIhB,EAAA,EAAO,CAACe,MAAO,UAAWE,MAAO,SAK7CE,EAAe,IAAIvB,EAAA,EAAa,CACpCK,SAAUA,EACVmB,OAAO,IAEHC,EAAS,IAAI1B,EAAA,EAAY,CAC7B2B,OAAQH,EACRI,MAAO,SAASC,GACd,OAAOd,EAAOc,EAAQC,IAAI,YAIxBC,EAAM,IAAInC,EAAA,EAAI,CAClBoC,OAAQ,CAACN,GACTO,OAAQC,SAASC,eAAe,OAChCC,KAAM,IAAIvC,EAAA,EAAK,CACbwC,OAAQ,CAAC,EAAG,GACZC,KAAM,MAINC,EAAQ,KACRC,EAAO,KACLC,EAAc,SAASC,GAC3B5B,IAAM6B,EAAiBnB,EAAaoB,8BAA8BF,GAClE,GAAuB,OAAnBC,EAEFH,EADAD,EAAQ,SAEH,CACLzB,IACM+B,EADWF,EAAeG,cACFC,gBAAgBL,GAChC,OAAVH,EACFA,EAAQ,IAAIzC,EAAA,EAAM+C,GAElBN,EAAMS,eAAeH,GAEV,OAATL,EACFA,EAAO,IAAIzC,EAAA,EAAW,CAAC2C,EAAYG,IAEnCL,EAAKQ,eAAe,CAACN,EAAYG,IAGrCd,EAAIkB,UAGNlB,EAAImB,GAAG,cAAe,SAASC,GAC7B,IAAIA,EAAIC,SAAR,CAGAtC,IAAM4B,EAAaX,EAAIsB,mBAAmBF,EAAIG,eAC9Cb,EAAYC,MAGdX,EAAImB,GAAG,QAAS,SAASC,GACvBV,EAAYU,EAAIT,cAGlB5B,IAAMO,EAAS,IAAIhB,EAAA,EAAO,CACxBe,MAAO,sBACPE,MAAO,IAEHM,EAAQ,IAAI1B,EAAA,EAAM,CACtBmB,OAAQA,EACRJ,MAAO,IAAId,EAAA,EAAY,CACrBe,OAAQ,GACRG,OAAQA,MAIZU,EAAImB,GAAG,cAAe,SAASC,GAC7BrC,IAAMyC,EAAgBJ,EAAII,cAC1BA,EAAcC,SAAS5B,GACT,OAAVW,GACFgB,EAAcE,aAAalB,GAEhB,OAATC,GACFe,EAAcE,aAAajB,KAI/BT,EAAImB,GAAG,cAAe,SAASC,GAC7B,IAAIA,EAAIC,SAAR,CAGAtC,IAAM4C,EAAQ3B,EAAI4B,cAAcR,EAAIG,eAC9BM,EAAM7B,EAAI8B,kBAAkBH,GAEhC3B,EAAI+B,YAAYlC,MAAMmC,OADpBH,EAC6B,UAEA","file":"synthetic-points.js","sourcesContent":["import Feature from '../src/ol/Feature.js';\nimport Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport {LineString, Point} from '../src/ol/geom.js';\nimport VectorLayer from '../src/ol/layer/Vector.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport {Circle as CircleStyle, Fill, Stroke, Style} from '../src/ol/style.js';\n\n\nconst count = 20000;\nconst features = new Array(count);\nconst e = 18000000;\nfor (let i = 0; i < count; ++i) {\n  features[i] = new Feature({\n    'geometry': new Point(\n      [2 * e * Math.random() - e, 2 * e * Math.random() - e]),\n    'i': i,\n    'size': i % 2 ? 10 : 20\n  });\n}\n\nconst styles = {\n  '10': new Style({\n    image: new CircleStyle({\n      radius: 5,\n      fill: new Fill({color: '#666666'}),\n      stroke: new Stroke({color: '#bada55', width: 1})\n    })\n  }),\n  '20': new Style({\n    image: new CircleStyle({\n      radius: 10,\n      fill: new Fill({color: '#666666'}),\n      stroke: new Stroke({color: '#bada55', width: 1})\n    })\n  })\n};\n\nconst vectorSource = new VectorSource({\n  features: features,\n  wrapX: false\n});\nconst vector = new VectorLayer({\n  source: vectorSource,\n  style: function(feature) {\n    return styles[feature.get('size')];\n  }\n});\n\nconst map = new Map({\n  layers: [vector],\n  target: document.getElementById('map'),\n  view: new View({\n    center: [0, 0],\n    zoom: 2\n  })\n});\n\nlet point = null;\nlet line = null;\nconst displaySnap = function(coordinate) {\n  const closestFeature = vectorSource.getClosestFeatureToCoordinate(coordinate);\n  if (closestFeature === null) {\n    point = null;\n    line = null;\n  } else {\n    const geometry = closestFeature.getGeometry();\n    const closestPoint = geometry.getClosestPoint(coordinate);\n    if (point === null) {\n      point = new Point(closestPoint);\n    } else {\n      point.setCoordinates(closestPoint);\n    }\n    if (line === null) {\n      line = new LineString([coordinate, closestPoint]);\n    } else {\n      line.setCoordinates([coordinate, closestPoint]);\n    }\n  }\n  map.render();\n};\n\nmap.on('pointermove', function(evt) {\n  if (evt.dragging) {\n    return;\n  }\n  const coordinate = map.getEventCoordinate(evt.originalEvent);\n  displaySnap(coordinate);\n});\n\nmap.on('click', function(evt) {\n  displaySnap(evt.coordinate);\n});\n\nconst stroke = new Stroke({\n  color: 'rgba(255,255,0,0.9)',\n  width: 3\n});\nconst style = new Style({\n  stroke: stroke,\n  image: new CircleStyle({\n    radius: 10,\n    stroke: stroke\n  })\n});\n\nmap.on('postcompose', function(evt) {\n  const vectorContext = evt.vectorContext;\n  vectorContext.setStyle(style);\n  if (point !== null) {\n    vectorContext.drawGeometry(point);\n  }\n  if (line !== null) {\n    vectorContext.drawGeometry(line);\n  }\n});\n\nmap.on('pointermove', function(evt) {\n  if (evt.dragging) {\n    return;\n  }\n  const pixel = map.getEventPixel(evt.originalEvent);\n  const hit = map.hasFeatureAtPixel(pixel);\n  if (hit) {\n    map.getTarget().style.cursor = 'pointer';\n  } else {\n    map.getTarget().style.cursor = '';\n  }\n});\n"],"sourceRoot":""}