{"version":3,"sources":["webpack:///./kml-earthquakes.js"],"names":["__webpack_require__","r","__webpack_exports__","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_0__","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_1__","_src_ol_format_KML_js__WEBPACK_IMPORTED_MODULE_2__","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_3__","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_4__","_src_ol_source_Stamen_js__WEBPACK_IMPORTED_MODULE_5__","_src_ol_source_Vector_js__WEBPACK_IMPORTED_MODULE_6__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_7__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_8__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_9__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_10__","styleCache","vector","source","url","format","extractStyles","style","feature","const","name","get","radius","parseFloat","substr","image","fill","color","stroke","width","raster","layer","map","layers","target","view","center","zoom","info","$","tooltip","animation","trigger","displayFeatureInfo","pixel","css","left","top","forEachFeatureAtPixel","attr","on","evt","dragging","getEventPixel","originalEvent"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,GAAAI,EAAAJ,EAAA,GAAAK,EAAAL,EAAA,KAAAM,EAAAN,EAAA,IAAAO,EAAAP,EAAA,GAAAQ,EAAAR,EAAA,IAAAS,EAAAT,EAAA,IAAAU,EAAAV,EAAA,IAAAW,EAAAX,EAAA,IAAAY,EAAAZ,EAAA,IAAAa,EAAAb,EAAA,IASMc,EAAa,GA2BbC,EAAS,IAAIT,EAAA,EAAY,CAC7BU,OAAQ,IAAIP,EAAA,EAAa,CACvBQ,IAAK,qCACLC,OAAQ,IAAIb,EAAA,EAAI,CACdc,eAAe,MAGnBC,MAjCoB,SAASC,GAI7BC,IAAMC,EAAOF,EAAQG,IAAI,QAEnBC,EAAS,EAAI,IADDC,WAAWH,EAAKI,OAAO,IACJ,GACjCP,EAAQN,EAAWW,GAgBvB,OAfKL,IACHA,EAAQ,IAAIV,EAAA,EAAM,CAChBkB,MAAO,IAAIjB,EAAA,EAAY,CACrBc,OAAQA,EACRI,KAAM,IAAIjB,EAAA,EAAK,CACbkB,MAAO,2BAETC,OAAQ,IAAIlB,EAAA,EAAO,CACjBiB,MAAO,yBACPE,MAAO,QAIblB,EAAWW,GAAUL,GAEhBA,KAaHa,EAAS,IAAI1B,EAAA,EAAU,CAC3BS,OAAQ,IAAIR,EAAA,EAAO,CACjB0B,MAAO,YAILC,EAAM,IAAIhC,EAAA,EAAI,CAClBiC,OAAQ,CAACH,EAAQlB,GACjBsB,OAAQ,MACRC,KAAM,IAAIlC,EAAA,EAAK,CACbmC,OAAQ,CAAC,EAAG,GACZC,KAAM,MAIJC,EAAOC,EAAE,SACfD,EAAKE,QAAQ,CACXC,WAAW,EACXC,QAAS,WAGXvB,IAAMwB,EAAqB,SAASC,GAClCN,EAAKO,IAAI,CACPC,KAAMF,EAAM,GAAK,KACjBG,IAAMH,EAAM,GAAK,GAAM,OAEzBzB,IAAMD,EAAUc,EAAIgB,sBAAsBJ,EAAO,SAAS1B,GACxD,OAAOA,IAELA,EACFoB,EAAKE,QAAQ,QACVS,KAAK,sBAAuB/B,EAAQG,IAAI,SACxCmB,QAAQ,YACRA,QAAQ,QAEXF,EAAKE,QAAQ,SAIjBR,EAAIkB,GAAG,cAAe,SAASC,GACzBA,EAAIC,SACNd,EAAKE,QAAQ,QAGfG,EAAmBX,EAAIqB,cAAcF,EAAIG,kBAG3CtB,EAAIkB,GAAG,QAAS,SAASC,GACvBR,EAAmBQ,EAAIP","file":"kml-earthquakes.js","sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport KML from '../src/ol/format/KML.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\nimport Stamen from '../src/ol/source/Stamen.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport {Circle as CircleStyle, Fill, Stroke, Style} from '../src/ol/style.js';\n\n\nconst styleCache = {};\nconst styleFunction = function(feature) {\n  // 2012_Earthquakes_Mag5.kml stores the magnitude of each earthquake in a\n  // standards-violating <magnitude> tag in each Placemark.  We extract it from\n  // the Placemark's name instead.\n  const name = feature.get('name');\n  const magnitude = parseFloat(name.substr(2));\n  const radius = 5 + 20 * (magnitude - 5);\n  let style = styleCache[radius];\n  if (!style) {\n    style = new Style({\n      image: new CircleStyle({\n        radius: radius,\n        fill: new Fill({\n          color: 'rgba(255, 153, 0, 0.4)'\n        }),\n        stroke: new Stroke({\n          color: 'rgba(255, 204, 0, 0.2)',\n          width: 1\n        })\n      })\n    });\n    styleCache[radius] = style;\n  }\n  return style;\n};\n\nconst vector = new VectorLayer({\n  source: new VectorSource({\n    url: 'data/kml/2012_Earthquakes_Mag5.kml',\n    format: new KML({\n      extractStyles: false\n    })\n  }),\n  style: styleFunction\n});\n\nconst raster = new TileLayer({\n  source: new Stamen({\n    layer: 'toner'\n  })\n});\n\nconst map = new Map({\n  layers: [raster, vector],\n  target: 'map',\n  view: new View({\n    center: [0, 0],\n    zoom: 2\n  })\n});\n\nconst info = $('#info');\ninfo.tooltip({\n  animation: false,\n  trigger: 'manual'\n});\n\nconst displayFeatureInfo = function(pixel) {\n  info.css({\n    left: pixel[0] + 'px',\n    top: (pixel[1] - 15) + 'px'\n  });\n  const feature = map.forEachFeatureAtPixel(pixel, function(feature) {\n    return feature;\n  });\n  if (feature) {\n    info.tooltip('hide')\n      .attr('data-original-title', feature.get('name'))\n      .tooltip('fixTitle')\n      .tooltip('show');\n  } else {\n    info.tooltip('hide');\n  }\n};\n\nmap.on('pointermove', function(evt) {\n  if (evt.dragging) {\n    info.tooltip('hide');\n    return;\n  }\n  displayFeatureInfo(map.getEventPixel(evt.originalEvent));\n});\n\nmap.on('click', function(evt) {\n  displayFeatureInfo(evt.pixel);\n});\n"],"sourceRoot":""}