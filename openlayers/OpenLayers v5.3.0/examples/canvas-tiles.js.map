{"version":3,"sources":["webpack:///../src/ol/source/TileDebug.js","webpack:///./canvas-tiles.js"],"names":["TileDebug_LabeledTile","Tile","LabeledTile","tileCoord","tileSize","text","super","this","TileState","LOADED","tileSize_","text_","canvas_","getImage","const","context","Object","dom","strokeStyle","strokeRect","fillStyle","textAlign","textBaseline","font","fillText","canvas","load","ol_Tile","source_TileDebug","TileSource","TileDebug","options","opaque","projection","tileGrid","wrapX","undefined","getTile","z","x","y","tileCoordKey","tilecoord","tileCache","containsKey","get","size","getTileSize","textTileCoord","getTileCoordForTileUrlFunction","toString","tile","set","source_Tile","osmSource","OSM","Map","layers","layer_Tile","source","getTileGrid","target","view","View","center","proj","zoom"],"mappings":"4LAYMA,EAAwB,SAAAC,GAM5B,SAAAC,EAAYC,EAAWC,EAAUC,GAE/BC,OAAKC,KAACJ,EAAWK,EAAA,EAAUC,QAM3BF,KAAKG,UAAYN,EAMjBG,KAAKI,MAAQN,EAMbE,KAAKK,QAAU,qGAQjBC,SAAA,WACE,GAAIN,KAAKK,QACP,OAAOL,KAAKK,QAEZE,IAAMV,EAAWG,KAAKG,UAChBK,EAAUC,OAAAC,EAAA,EAAAD,CAAsBZ,EAAS,GAAIA,EAAS,IAY5D,OAVAW,EAAQG,YAAc,QACtBH,EAAQI,WAAW,GAAK,GAAKf,EAAS,GAAK,GAAKA,EAAS,GAAK,IAE9DW,EAAQK,UAAY,QACpBL,EAAQM,UAAY,SACpBN,EAAQO,aAAe,SACvBP,EAAQQ,KAAO,kBACfR,EAAQS,SAASjB,KAAKI,MAAOP,EAAS,GAAK,EAAGA,EAAS,GAAK,GAE5DG,KAAKK,QAAUG,EAAQU,OAChBV,EAAQU,oBAOnBC,KAAA,eA1D4B,CAAJC,EAAA,GAmHXC,EApCmB,SAAAC,GAIhC,SAAAC,EAAYC,GAEVzB,OAAKC,KAAC,CACJyB,QAAQ,EACRC,WAAYF,EAAQE,WACpBC,SAAUH,EAAQG,SAClBC,WAAyBC,IAAlBL,EAAQI,OAAsBJ,EAAQI,wGAQjDE,QAAA,SAAQC,EAAGC,EAAGC,GACZ1B,IAAM2B,EAAezB,OAAA0B,EAAA,EAAA1B,CAAUsB,EAAGC,EAAGC,GACrC,GAAIjC,KAAKoC,UAAUC,YAAYH,GAC7B,OAAoClC,KAAKoC,UAAUE,IAAIJ,GAEvD3B,IAAMV,EAAWY,OAAA8B,EAAA,EAAA9B,CAAOT,KAAK2B,SAASa,YAAYT,IAC5CnC,EAAY,CAACmC,EAAGC,EAAGC,GACnBQ,EAAgBzC,KAAK0C,+BAA+B9C,GACpDE,EAAQ2C,EACZzC,KAAK0C,+BAA+BD,GAAeE,WADvB,GAExBC,EAAO,IAAInD,EAAYG,EAAWC,EAAUC,GAElD,OADAE,KAAKoC,UAAUS,IAAIX,EAAcU,GAC1BA,KA9BqB,CAAVE,EAAA,GCpFlBC,EAAY,IAAIC,EAAA,EACV,IAAIC,EAAA,EAAI,CAClBC,OAAQ,CACN,IAAIC,EAAA,EAAU,CACZC,OAAQL,IAEV,IAAII,EAAA,EAAU,CACZC,OAAQ,IAAI/B,EAAU,CACpBK,WAAY,YACZC,SAAUoB,EAAUM,mBAI1BC,OAAQ,MACRC,KAAM,IAAIC,EAAA,EAAK,CACbC,OAAQhD,OAAAiD,EAAA,EAAAjD,CAAW,EAAE,MAAQ,YAC7BkD,KAAM","file":"canvas-tiles.js","sourcesContent":["/**\n * @module ol/source/TileDebug\n */\n\nimport Tile from '../Tile.js';\nimport TileState from '../TileState.js';\nimport {createCanvasContext2D} from '../dom.js';\nimport {toSize} from '../size.js';\nimport TileSource from './Tile.js';\nimport {getKeyZXY} from '../tilecoord.js';\n\n\nclass LabeledTile extends Tile {\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../size.js\").Size} tileSize Tile size.\n   * @param {string} text Text.\n   */\n  constructor(tileCoord, tileSize, text) {\n\n    super(tileCoord, TileState.LOADED);\n\n    /**\n    * @private\n    * @type {import(\"../size.js\").Size}\n    */\n    this.tileSize_ = tileSize;\n\n    /**\n    * @private\n    * @type {string}\n    */\n    this.text_ = text;\n\n    /**\n    * @private\n    * @type {HTMLCanvasElement}\n    */\n    this.canvas_ = null;\n\n  }\n\n  /**\n  * Get the image element for this tile.\n  * @return {HTMLCanvasElement} Image.\n  */\n  getImage() {\n    if (this.canvas_) {\n      return this.canvas_;\n    } else {\n      const tileSize = this.tileSize_;\n      const context = createCanvasContext2D(tileSize[0], tileSize[1]);\n\n      context.strokeStyle = 'black';\n      context.strokeRect(0.5, 0.5, tileSize[0] + 0.5, tileSize[1] + 0.5);\n\n      context.fillStyle = 'black';\n      context.textAlign = 'center';\n      context.textBaseline = 'middle';\n      context.font = '24px sans-serif';\n      context.fillText(this.text_, tileSize[0] / 2, tileSize[1] / 2);\n\n      this.canvas_ = context.canvas;\n      return context.canvas;\n    }\n  }\n\n  /**\n  * @override\n  */\n  load() {}\n}\n\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../proj.js\").ProjectionLike} projection Projection.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n */\n\n\n/**\n * @classdesc\n * A pseudo tile source, which does not fetch tiles from a server, but renders\n * a grid outline for the tile grid/projection along with the coordinates for\n * each tile. See examples/canvas-tiles for an example.\n *\n * Uses Canvas context2d, so requires Canvas support.\n * @api\n */\nclass TileDebug extends TileSource {\n  /**\n   * @param {Options} options Debug tile options.\n   */\n  constructor(options) {\n\n    super({\n      opaque: false,\n      projection: options.projection,\n      tileGrid: options.tileGrid,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true\n    });\n\n  }\n\n  /**\n  * @inheritDoc\n  */\n  getTile(z, x, y) {\n    const tileCoordKey = getKeyZXY(z, x, y);\n    if (this.tileCache.containsKey(tileCoordKey)) {\n      return /** @type {!LabeledTile} */ (this.tileCache.get(tileCoordKey));\n    } else {\n      const tileSize = toSize(this.tileGrid.getTileSize(z));\n      const tileCoord = [z, x, y];\n      const textTileCoord = this.getTileCoordForTileUrlFunction(tileCoord);\n      const text = !textTileCoord ? '' :\n        this.getTileCoordForTileUrlFunction(textTileCoord).toString();\n      const tile = new LabeledTile(tileCoord, tileSize, text);\n      this.tileCache.set(tileCoordKey, tile);\n      return tile;\n    }\n  }\n}\n\n\nexport default TileDebug;\n","import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport {fromLonLat} from '../src/ol/proj.js';\nimport {OSM, TileDebug} from '../src/ol/source.js';\n\n\nconst osmSource = new OSM();\nconst map = new Map({\n  layers: [\n    new TileLayer({\n      source: osmSource\n    }),\n    new TileLayer({\n      source: new TileDebug({\n        projection: 'EPSG:3857',\n        tileGrid: osmSource.getTileGrid()\n      })\n    })\n  ],\n  target: 'map',\n  view: new View({\n    center: fromLonLat([-0.1275, 51.507222]),\n    zoom: 10\n  })\n});\n"],"sourceRoot":""}