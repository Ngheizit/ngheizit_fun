{"version":3,"sources":["webpack:///../src/ol/source/Zoomify.js","webpack:///./zoomify.js"],"names":["TierSizeCalculation","Zoomify_CustomTile","ImageTile","CustomTile","tileGrid","tileCoord","state","src","crossOrigin","tileLoadFunction","opt_options","super","this","zoomifyImage_","tileSize_","Object","ol_size","getTileSize","getImage","const","image","call","TileState","LOADED","tileSize","width","height","context","dom","drawImage","canvas","ol_ImageTile","source_Zoomify","TileImage","Zoomify","options","size","tierSizeCalculation","undefined","imageWidth","imageHeight","extent","tierSizeInTiles","common","tileSizeForTierSizeCalculation","push","Math","ceil","let","asserts","reverse","resolutions","tileCountUpToTier","i","ii","length","TileGrid","origin","ol_extent","url","indexOf","urls","tileurlfunction","tileUrlFunction","map","template","pixelRatio","projection","tileCoordZ","tileCoordX","tileCoordY","tileIndex","tileWidth","Array","isArray","localContext","z","x","y","TileGroup","replace","m","p","ZoomifyTileClass","bind","attributions","cacheSize","reprojectionErrorThreshold","tileClass","transition","constructor","source_TileImage","imgWidth","imgHeight","zoomifyUrl","zoomify_layer","Tile","source","zoomify_extent","Map","layers","target","view","View","getSource","getTileGrid","getResolutions","getView","fit","document","getElementById","addEventListener","event","value","currentTarget","setSource"],"mappings":"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","file":"zoomify.js","sourcesContent":["/**\n * @module ol/source/Zoomify\n */\nimport {DEFAULT_TILE_SIZE} from '../tilegrid/common.js';\n\nimport ImageTile from '../ImageTile.js';\nimport TileState from '../TileState.js';\nimport {expandUrl, createFromTileUrlFunctions} from '../tileurlfunction.js';\nimport {assert} from '../asserts.js';\nimport {createCanvasContext2D} from '../dom.js';\nimport {getTopLeft} from '../extent.js';\nimport {toSize} from '../size.js';\nimport TileImage from './TileImage.js';\nimport TileGrid from '../tilegrid/TileGrid.js';\n\n\n/**\n * @enum {string}\n */\nconst TierSizeCalculation = {\n  DEFAULT: 'default',\n  TRUNCATED: 'truncated'\n};\n\n\nexport class CustomTile extends ImageTile {\n\n  /**\n   * @param {import(\"../tilegrid/TileGrid.js\").default} tileGrid TileGrid that the tile belongs to.\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {TileState} state State.\n   * @param {string} src Image source URI.\n   * @param {?string} crossOrigin Cross origin.\n   * @param {import(\"../Tile.js\").LoadFunction} tileLoadFunction Tile load function.\n   * @param {import(\"../Tile.js\").Options=} opt_options Tile options.\n   */\n  constructor(tileGrid, tileCoord, state, src, crossOrigin, tileLoadFunction, opt_options) {\n\n    super(tileCoord, state, src, crossOrigin, tileLoadFunction, opt_options);\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement}\n     */\n    this.zoomifyImage_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.tileSize_ = toSize(tileGrid.getTileSize(tileCoord[0]));\n\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getImage() {\n    if (this.zoomifyImage_) {\n      return this.zoomifyImage_;\n    }\n    const image = super.getImage();\n    if (this.state == TileState.LOADED) {\n      const tileSize = this.tileSize_;\n      if (image.width == tileSize[0] && image.height == tileSize[1]) {\n        this.zoomifyImage_ = image;\n        return image;\n      } else {\n        const context = createCanvasContext2D(tileSize[0], tileSize[1]);\n        context.drawImage(image, 0, 0);\n        this.zoomifyImage_ = context.canvas;\n        return context.canvas;\n      }\n    } else {\n      return image;\n    }\n  }\n\n}\n\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize=2048] Cache size.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you are using the WebGL renderer or if you want to\n * access pixel data with the Canvas renderer.  See\n * https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {string} [url] URL template or base URL of the Zoomify service.\n * A base URL is the fixed part\n * of the URL, excluding the tile group, z, x, and y folder structure, e.g.\n * `http://my.zoomify.info/IMAGE.TIF/`. A URL template must include\n * `{TileGroup}`, `{x}`, `{y}`, and `{z}` placeholders, e.g.\n * `http://my.zoomify.info/IMAGE.TIF/{TileGroup}/{z}-{x}-{y}.jpg`.\n * Internet Imaging Protocol (IIP) with JTL extension can be also used with\n * `{tileIndex}` and `{z}` placeholders, e.g.\n * `http://my.zoomify.info?FIF=IMAGE.TIF&JTL={z},{tileIndex}`.\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\n * used instead of defining each one separately in the `urls` option.\n * @property {string} [tierSizeCalculation] Tier size calculation method: `default` or `truncated`.\n * @property {import(\"../size.js\").Size} [size] Size of the image.\n * @property {import(\"../extent.js\").Extent} [extent] Extent for the TileGrid that is created.\n * Default sets the TileGrid in the\n * fourth quadrant, meaning extent is `[0, -height, width, 0]`. To change the\n * extent to the first quadrant (the default for OpenLayers 2) set the extent\n * as `[0, 0, width, height]`.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number} [tileSize=256] Tile size. Same tile size is used for all zoom levels.\n */\n\n\n/**\n * @classdesc\n * Layer source for tile data in Zoomify format (both Zoomify and Internet\n * Imaging Protocol are supported).\n * @api\n */\nclass Zoomify extends TileImage {\n\n  /**\n   * @param {Options=} opt_options Options.\n   */\n  constructor(opt_options) {\n\n    const options = opt_options || {};\n\n    const size = options.size;\n    const tierSizeCalculation = options.tierSizeCalculation !== undefined ?\n      options.tierSizeCalculation :\n      TierSizeCalculation.DEFAULT;\n\n    const imageWidth = size[0];\n    const imageHeight = size[1];\n    const extent = options.extent || [0, -size[1], size[0], 0];\n    const tierSizeInTiles = [];\n    const tileSize = options.tileSize || DEFAULT_TILE_SIZE;\n    let tileSizeForTierSizeCalculation = tileSize;\n\n    switch (tierSizeCalculation) {\n      case TierSizeCalculation.DEFAULT:\n        while (imageWidth > tileSizeForTierSizeCalculation || imageHeight > tileSizeForTierSizeCalculation) {\n          tierSizeInTiles.push([\n            Math.ceil(imageWidth / tileSizeForTierSizeCalculation),\n            Math.ceil(imageHeight / tileSizeForTierSizeCalculation)\n          ]);\n          tileSizeForTierSizeCalculation += tileSizeForTierSizeCalculation;\n        }\n        break;\n      case TierSizeCalculation.TRUNCATED:\n        let width = imageWidth;\n        let height = imageHeight;\n        while (width > tileSizeForTierSizeCalculation || height > tileSizeForTierSizeCalculation) {\n          tierSizeInTiles.push([\n            Math.ceil(width / tileSizeForTierSizeCalculation),\n            Math.ceil(height / tileSizeForTierSizeCalculation)\n          ]);\n          width >>= 1;\n          height >>= 1;\n        }\n        break;\n      default:\n        assert(false, 53); // Unknown `tierSizeCalculation` configured\n        break;\n    }\n\n    tierSizeInTiles.push([1, 1]);\n    tierSizeInTiles.reverse();\n\n    const resolutions = [1];\n    const tileCountUpToTier = [0];\n    for (let i = 1, ii = tierSizeInTiles.length; i < ii; i++) {\n      resolutions.push(1 << i);\n      tileCountUpToTier.push(\n        tierSizeInTiles[i - 1][0] * tierSizeInTiles[i - 1][1] +\n          tileCountUpToTier[i - 1]\n      );\n    }\n    resolutions.reverse();\n\n    const tileGrid = new TileGrid({\n      tileSize: tileSize,\n      extent: extent,\n      origin: getTopLeft(extent),\n      resolutions: resolutions\n    });\n\n    let url = options.url;\n    if (url && url.indexOf('{TileGroup}') == -1 && url.indexOf('{tileIndex}') == -1) {\n      url += '{TileGroup}/{z}-{x}-{y}.jpg';\n    }\n    const urls = expandUrl(url);\n\n    /**\n     * @param {string} template Template.\n     * @return {import(\"../Tile.js\").UrlFunction} Tile URL function.\n     */\n    function createFromTemplate(template) {\n\n      return (\n        /**\n         * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile Coordinate.\n         * @param {number} pixelRatio Pixel ratio.\n         * @param {import(\"../proj/Projection.js\").default} projection Projection.\n         * @return {string|undefined} Tile URL.\n         */\n        function(tileCoord, pixelRatio, projection) {\n          if (!tileCoord) {\n            return undefined;\n          } else {\n            const tileCoordZ = tileCoord[0];\n            const tileCoordX = tileCoord[1];\n            const tileCoordY = -tileCoord[2] - 1;\n            const tileIndex =\n                tileCoordX +\n                tileCoordY * tierSizeInTiles[tileCoordZ][0];\n            const tileSize = tileGrid.getTileSize(tileCoordZ);\n            const tileWidth = Array.isArray(tileSize) ? tileSize[0] : tileSize;\n            const tileGroup = ((tileIndex + tileCountUpToTier[tileCoordZ]) / tileWidth) | 0;\n            const localContext = {\n              'z': tileCoordZ,\n              'x': tileCoordX,\n              'y': tileCoordY,\n              'tileIndex': tileIndex,\n              'TileGroup': 'TileGroup' + tileGroup\n            };\n            return template.replace(/\\{(\\w+?)\\}/g, function(m, p) {\n              return localContext[p];\n            });\n          }\n        }\n      );\n    }\n\n    const tileUrlFunction = createFromTileUrlFunctions(urls.map(createFromTemplate));\n\n    const ZoomifyTileClass = CustomTile.bind(null, tileGrid);\n\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      projection: options.projection,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileClass: ZoomifyTileClass,\n      tileGrid: tileGrid,\n      tileUrlFunction: tileUrlFunction,\n      transition: options.transition\n    });\n\n  }\n\n}\n\nexport default Zoomify;\n","import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport Zoomify from '../src/ol/source/Zoomify.js';\n\nconst imgWidth = 9911;\nconst imgHeight = 6100;\n\nconst zoomifyUrl = 'http://vips.vtech.fr/cgi-bin/iipsrv.fcgi?zoomify=' +\n    '/mnt/MD1/AD00/plan_CHU-4HD-01/FOND.TIF/';\nconst iipUrl = 'http://vips.vtech.fr/cgi-bin/iipsrv.fcgi?FIF=' + '/mnt/MD1/AD00/plan_CHU-4HD-01/FOND.TIF' + '&JTL={z},{tileIndex}';\n\nconst layer = new TileLayer({\n  source: new Zoomify({\n    url: zoomifyUrl,\n    size: [imgWidth, imgHeight],\n    crossOrigin: 'anonymous'\n  })\n});\n\nconst extent = [0, -imgHeight, imgWidth, 0];\n\nconst map = new Map({\n  layers: [layer],\n  target: 'map',\n  view: new View({\n    // adjust zoom levels to those provided by the source\n    resolutions: layer.getSource().getTileGrid().getResolutions(),\n    // constrain the center: center cannot be set outside this extent\n    extent: extent\n  })\n});\nmap.getView().fit(extent);\n\nconst control = document.getElementById('zoomifyProtocol');\ncontrol.addEventListener('change', function(event) {\n  const value = event.currentTarget.value;\n  if (value === 'iip') {\n    layer.setSource(new Zoomify({\n      url: iipUrl,\n      size: [imgWidth, imgHeight],\n      crossOrigin: 'anonymous'\n    }));\n  } else if (value === 'zoomify') {\n    layer.setSource(new Zoomify({\n      url: zoomifyUrl,\n      size: [imgWidth, imgHeight],\n      crossOrigin: 'anonymous'\n    }));\n  }\n\n});\n"],"sourceRoot":""}