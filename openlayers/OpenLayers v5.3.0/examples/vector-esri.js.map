{"version":3,"sources":["webpack:///./vector-esri.js"],"names":["__webpack_require__","r","__webpack_exports__","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_0__","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_1__","_src_ol_format_EsriJSON_js__WEBPACK_IMPORTED_MODULE_2__","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_3__","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_4__","_src_ol_loadingstrategy_js__WEBPACK_IMPORTED_MODULE_5__","_src_ol_proj_js__WEBPACK_IMPORTED_MODULE_6__","_src_ol_source_Vector_js__WEBPACK_IMPORTED_MODULE_7__","_src_ol_source_XYZ_js__WEBPACK_IMPORTED_MODULE_8__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_9__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_10__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_11__","_src_ol_tilegrid_js__WEBPACK_IMPORTED_MODULE_12__","esrijsonFormat","styleCache","ABANDONED","fill","color","stroke","width","GAS","OIL","OILGAS","vectorSource","loader","extent","resolution","projection","const","url","serviceUrl","encodeURIComponent","$","ajax","dataType","success","response","error","alert","message","details","join","features","readFeatures","featureProjection","length","addFeatures","strategy","Object","tileSize","vector","source","style","feature","classify","get","raster","attributions","map","layers","target","document","getElementById","view","center","zoom","displayFeatureInfo","pixel","forEachFeatureAtPixel","push","i","ii","info","innerHTML","getTarget","cursor","on","evt","dragging","getEventPixel","originalEvent"],"mappings":"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","file":"vector-esri.js","sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport EsriJSON from '../src/ol/format/EsriJSON.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\nimport {tile as tileStrategy} from '../src/ol/loadingstrategy.js';\nimport {fromLonLat} from '../src/ol/proj.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport XYZ from '../src/ol/source/XYZ.js';\nimport {Fill, Stroke, Style} from '../src/ol/style.js';\nimport {createXYZ} from '../src/ol/tilegrid.js';\n\n\nconst serviceUrl = 'https://sampleserver3.arcgisonline.com/ArcGIS/rest/services/' +\n    'Petroleum/KSFields/FeatureServer/';\nconst layer = '0';\n\nconst esrijsonFormat = new EsriJSON();\n\nconst styleCache = {\n  'ABANDONED': new Style({\n    fill: new Fill({\n      color: 'rgba(225, 225, 225, 255)'\n    }),\n    stroke: new Stroke({\n      color: 'rgba(0, 0, 0, 255)',\n      width: 0.4\n    })\n  }),\n  'GAS': new Style({\n    fill: new Fill({\n      color: 'rgba(255, 0, 0, 255)'\n    }),\n    stroke: new Stroke({\n      color: 'rgba(110, 110, 110, 255)',\n      width: 0.4\n    })\n  }),\n  'OIL': new Style({\n    fill: new Fill({\n      color: 'rgba(56, 168, 0, 255)'\n    }),\n    stroke: new Stroke({\n      color: 'rgba(110, 110, 110, 255)',\n      width: 0\n    })\n  }),\n  'OILGAS': new Style({\n    fill: new Fill({\n      color: 'rgba(168, 112, 0, 255)'\n    }),\n    stroke: new Stroke({\n      color: 'rgba(110, 110, 110, 255)',\n      width: 0.4\n    })\n  })\n};\n\nconst vectorSource = new VectorSource({\n  loader: function(extent, resolution, projection) {\n    const url = serviceUrl + layer + '/query/?f=json&' +\n        'returnGeometry=true&spatialRel=esriSpatialRelIntersects&geometry=' +\n        encodeURIComponent('{\"xmin\":' + extent[0] + ',\"ymin\":' +\n            extent[1] + ',\"xmax\":' + extent[2] + ',\"ymax\":' + extent[3] +\n            ',\"spatialReference\":{\"wkid\":102100}}') +\n        '&geometryType=esriGeometryEnvelope&inSR=102100&outFields=*' +\n        '&outSR=102100';\n    $.ajax({url: url, dataType: 'jsonp', success: function(response) {\n      if (response.error) {\n        alert(response.error.message + '\\n' +\n            response.error.details.join('\\n'));\n      } else {\n        // dataProjection will be read from document\n        const features = esrijsonFormat.readFeatures(response, {\n          featureProjection: projection\n        });\n        if (features.length > 0) {\n          vectorSource.addFeatures(features);\n        }\n      }\n    }});\n  },\n  strategy: tileStrategy(createXYZ({\n    tileSize: 512\n  }))\n});\n\nconst vector = new VectorLayer({\n  source: vectorSource,\n  style: function(feature) {\n    const classify = feature.get('activeprod');\n    return styleCache[classify];\n  }\n});\n\nconst raster = new TileLayer({\n  source: new XYZ({\n    attributions: 'Tiles Â© <a href=\"https://services.arcgisonline.com/ArcGIS/' +\n        'rest/services/World_Topo_Map/MapServer\">ArcGIS</a>',\n    url: 'https://server.arcgisonline.com/ArcGIS/rest/services/' +\n        'World_Topo_Map/MapServer/tile/{z}/{y}/{x}'\n  })\n});\n\nconst map = new Map({\n  layers: [raster, vector],\n  target: document.getElementById('map'),\n  view: new View({\n    center: fromLonLat([-97.6114, 38.8403]),\n    zoom: 7\n  })\n});\n\nconst displayFeatureInfo = function(pixel) {\n  const features = [];\n  map.forEachFeatureAtPixel(pixel, function(feature) {\n    features.push(feature);\n  });\n  if (features.length > 0) {\n    const info = [];\n    let i, ii;\n    for (i = 0, ii = features.length; i < ii; ++i) {\n      info.push(features[i].get('field_name'));\n    }\n    document.getElementById('info').innerHTML = info.join(', ') || '(unknown)';\n    map.getTarget().style.cursor = 'pointer';\n  } else {\n    document.getElementById('info').innerHTML = '&nbsp;';\n    map.getTarget().style.cursor = '';\n  }\n};\n\nmap.on('pointermove', function(evt) {\n  if (evt.dragging) {\n    return;\n  }\n  const pixel = map.getEventPixel(evt.originalEvent);\n  displayFeatureInfo(pixel);\n});\n\nmap.on('click', function(evt) {\n  displayFeatureInfo(evt.pixel);\n});\n"],"sourceRoot":""}