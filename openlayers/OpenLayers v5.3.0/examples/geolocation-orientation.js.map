{"version":3,"sources":["webpack:///./geolocation-orientation.js"],"names":["__webpack_require__","r","__webpack_exports__","_src_ol_Geolocation_js__WEBPACK_IMPORTED_MODULE_0__","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_1__","_src_ol_Overlay_js__WEBPACK_IMPORTED_MODULE_2__","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_3__","_src_ol_geom_LineString_js__WEBPACK_IMPORTED_MODULE_4__","_src_ol_layer_Tile_js__WEBPACK_IMPORTED_MODULE_5__","_src_ol_proj_js__WEBPACK_IMPORTED_MODULE_6__","_src_ol_source_OSM_js__WEBPACK_IMPORTED_MODULE_7__","view","center","Object","zoom","map","layers","source","target","markerEl","document","getElementById","marker","positioning","element","stopEvent","addOverlay","const","positions","geolocation","projection","getProjection","trackingOptions","maximumAge","enableHighAccuracy","timeout","deltaMean","on","position","getPosition","accuracy","getAccuracy","heading","getHeading","speed","getSpeed","m","x","y","fCoords","getCoordinates","previous","length","prevHeading","let","headingDiff","Math","PI","abs","sign","appendCoordinate","setCoordinates","slice","src","addPosition","Date","now","coords","len","rad","html","toFixed","round","join","innerHTML","alert","previousM","updateView","max","rotation","resolution","height","c","getCoordinateAtM","setCenter","getResolution","getSize","sin","cos","setRotation","setPosition","simulationData","geolocateBtn","addEventListener","setTracking","render","disableButtons","client","XMLHttpRequest","open","onload","JSON","parse","responseText","data","send","simulateBtn","simulatePositionChange","set","projectedPosition","longitude","latitude","changed","disabled","coordinates","first","shift","prevDate","timestamp","geolocate","newDate","window","setTimeout"],"mappings":"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","file":"geolocation-orientation.js","sourcesContent":["import Geolocation from '../src/ol/Geolocation.js';\nimport Map from '../src/ol/Map.js';\nimport Overlay from '../src/ol/Overlay.js';\nimport View from '../src/ol/View.js';\nimport LineString from '../src/ol/geom/LineString.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport {fromLonLat} from '../src/ol/proj.js';\nimport OSM from '../src/ol/source/OSM.js';\n\n// creating the view\nconst view = new View({\n  center: fromLonLat([5.8713, 45.6452]),\n  zoom: 19\n});\n\n// creating the map\nconst map = new Map({\n  layers: [\n    new TileLayer({\n      source: new OSM()\n    })\n  ],\n  target: 'map',\n  view: view\n});\n\n// Geolocation marker\nconst markerEl = document.getElementById('geolocation_marker');\nconst marker = new Overlay({\n  positioning: 'center-center',\n  element: markerEl,\n  stopEvent: false\n});\nmap.addOverlay(marker);\n\n// LineString to store the different geolocation positions. This LineString\n// is time aware.\n// The Z dimension is actually used to store the rotation (heading).\nconst positions = new LineString([], /** @type {module:ol/geom/GeometryLayout} */ ('XYZM'));\n\n// Geolocation Control\nconst geolocation = new Geolocation({\n  projection: view.getProjection(),\n  trackingOptions: {\n    maximumAge: 10000,\n    enableHighAccuracy: true,\n    timeout: 600000\n  }\n});\n\nlet deltaMean = 500; // the geolocation sampling period mean in ms\n\n// Listen to position changes\ngeolocation.on('change', function() {\n  const position = geolocation.getPosition();\n  const accuracy = geolocation.getAccuracy();\n  const heading = geolocation.getHeading() || 0;\n  const speed = geolocation.getSpeed() || 0;\n  const m = Date.now();\n\n  addPosition(position, heading, m, speed);\n\n  const coords = positions.getCoordinates();\n  const len = coords.length;\n  if (len >= 2) {\n    deltaMean = (coords[len - 1][3] - coords[0][3]) / (len - 1);\n  }\n\n  const html = [\n    'Position: ' + position[0].toFixed(2) + ', ' + position[1].toFixed(2),\n    'Accuracy: ' + accuracy,\n    'Heading: ' + Math.round(radToDeg(heading)) + '&deg;',\n    'Speed: ' + (speed * 3.6).toFixed(1) + ' km/h',\n    'Delta: ' + Math.round(deltaMean) + 'ms'\n  ].join('<br />');\n  document.getElementById('info').innerHTML = html;\n});\n\ngeolocation.on('error', function() {\n  alert('geolocation error');\n  // FIXME we should remove the coordinates in positions\n});\n\n// convert radians to degrees\nfunction radToDeg(rad) {\n  return rad * 360 / (Math.PI * 2);\n}\n// convert degrees to radians\nfunction degToRad(deg) {\n  return deg * Math.PI * 2 / 360;\n}\n// modulo for negative values\nfunction mod(n) {\n  return ((n % (2 * Math.PI)) + (2 * Math.PI)) % (2 * Math.PI);\n}\n\nfunction addPosition(position, heading, m, speed) {\n  const x = position[0];\n  const y = position[1];\n  const fCoords = positions.getCoordinates();\n  const previous = fCoords[fCoords.length - 1];\n  const prevHeading = previous && previous[2];\n  if (prevHeading) {\n    let headingDiff = heading - mod(prevHeading);\n\n    // force the rotation change to be less than 180Â°\n    if (Math.abs(headingDiff) > Math.PI) {\n      const sign = (headingDiff >= 0) ? 1 : -1;\n      headingDiff = -sign * (2 * Math.PI - Math.abs(headingDiff));\n    }\n    heading = prevHeading + headingDiff;\n  }\n  positions.appendCoordinate([x, y, heading, m]);\n\n  // only keep the 20 last coordinates\n  positions.setCoordinates(positions.getCoordinates().slice(-20));\n\n  // FIXME use speed instead\n  if (heading && speed) {\n    markerEl.src = 'data/geolocation_marker_heading.png';\n  } else {\n    markerEl.src = 'data/geolocation_marker.png';\n  }\n}\n\n// recenters the view by putting the given coordinates at 3/4 from the top or\n// the screen\nfunction getCenterWithHeading(position, rotation, resolution) {\n  const size = map.getSize();\n  const height = size[1];\n\n  return [\n    position[0] - Math.sin(rotation) * height * resolution * 1 / 4,\n    position[1] + Math.cos(rotation) * height * resolution * 1 / 4\n  ];\n}\n\nlet previousM = 0;\nfunction updateView() {\n  // use sampling period to get a smooth transition\n  let m = Date.now() - deltaMean * 1.5;\n  m = Math.max(m, previousM);\n  previousM = m;\n  // interpolate position along positions LineString\n  const c = positions.getCoordinateAtM(m, true);\n  if (c) {\n    view.setCenter(getCenterWithHeading(c, -c[2], view.getResolution()));\n    view.setRotation(-c[2]);\n    marker.setPosition(c);\n  }\n}\n\n// geolocate device\nconst geolocateBtn = document.getElementById('geolocate');\ngeolocateBtn.addEventListener('click', function() {\n  geolocation.setTracking(true); // Start position tracking\n\n  map.on('postcompose', updateView);\n  map.render();\n\n  disableButtons();\n}, false);\n\n// simulate device move\nlet simulationData;\nconst client = new XMLHttpRequest();\nclient.open('GET', 'data/geolocation-orientation.json');\n\n\n/**\n * Handle data loading.\n */\nclient.onload = function() {\n  simulationData = JSON.parse(client.responseText).data;\n};\nclient.send();\n\nconst simulateBtn = document.getElementById('simulate');\nsimulateBtn.addEventListener('click', function() {\n  const coordinates = simulationData;\n\n  const first = coordinates.shift();\n  simulatePositionChange(first);\n\n  let prevDate = first.timestamp;\n  function geolocate() {\n    const position = coordinates.shift();\n    if (!position) {\n      return;\n    }\n    const newDate = position.timestamp;\n    simulatePositionChange(position);\n    window.setTimeout(function() {\n      prevDate = newDate;\n      geolocate();\n    }, (newDate - prevDate) / 0.5);\n  }\n  geolocate();\n\n  map.on('postcompose', updateView);\n  map.render();\n\n  disableButtons();\n}, false);\n\nfunction simulatePositionChange(position) {\n  const coords = position.coords;\n  geolocation.set('accuracy', coords.accuracy);\n  geolocation.set('heading', degToRad(coords.heading));\n  const projectedPosition = fromLonLat([coords.longitude, coords.latitude]);\n  geolocation.set('position', projectedPosition);\n  geolocation.set('speed', coords.speed);\n  geolocation.changed();\n}\n\nfunction disableButtons() {\n  geolocateBtn.disabled = 'disabled';\n  simulateBtn.disabled = 'disabled';\n}\n"],"sourceRoot":""}