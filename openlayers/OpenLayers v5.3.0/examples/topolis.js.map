{"version":3,"sources":["webpack:///./topolis.js"],"names":["__webpack_require__","r","__webpack_exports__","_src_ol_Feature_js__WEBPACK_IMPORTED_MODULE_0__","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_1__","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_2__","_src_ol_geom_js__WEBPACK_IMPORTED_MODULE_3__","_src_ol_geom_js__WEBPACK_IMPORTED_MODULE_4__","_src_ol_geom_js__WEBPACK_IMPORTED_MODULE_5__","_src_ol_interaction_js__WEBPACK_IMPORTED_MODULE_6__","_src_ol_interaction_js__WEBPACK_IMPORTED_MODULE_7__","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_8__","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_9__","_src_ol_source_js__WEBPACK_IMPORTED_MODULE_10__","_src_ol_source_js__WEBPACK_IMPORTED_MODULE_11__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_12__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_13__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_14__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_15__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_16__","_src_ol_control_MousePosition_js__WEBPACK_IMPORTED_MODULE_17__","raster","source","nodes","wrapX","nodesLayer","style","f","image","radius","fill","color","stroke","width","text","get","id","toString","edges","edgesLayer","faces","facesLayer","font","map","layers","target","view","center","zoom","topo","topolis","createTopology","removeElementFeature","element","const","feature","getFeatureById","removeFeature","createNode","coord","let","existingEdge","getEdgeByPoint","modEdgeSplit","addIsoNode","on","node","geometry","coordinate","setId","addFeature","e","edge","coordinates","setGeometry","face","getFaceGeometry","draw","type","start","end","edgeGeom","getGeometry","getCoordinates","startCoord","endCoord","length","getNodeByPoint","edgesAtStart","edgesAtEnd","crossing","getEdgesByLine","remEdgeNewFace","removeIsoNode","addEdgeNewFaces","toastr","warning","addInteraction","snap","addControl"],"mappings":"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","file":"topolis.js","sourcesContent":["import Feature from '../src/ol/Feature.js';\nimport Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport {Point, LineString, Polygon} from '../src/ol/geom.js';\nimport {Draw, Snap} from '../src/ol/interaction.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\nimport {OSM, Vector as VectorSource} from '../src/ol/source.js';\nimport {Fill, Circle as CircleStyle, Stroke, Style, Text} from '../src/ol/style.js';\nimport MousePosition from '../src/ol/control/MousePosition.js';\n\nconst raster = new TileLayer({\n  source: new OSM()\n});\n\nconst nodes = new VectorSource({wrapX: false});\nconst nodesLayer = new VectorLayer({\n  source: nodes,\n  style: function(f) {\n    const style = new Style({\n      image: new CircleStyle({\n        radius: 8,\n        fill: new Fill({color: 'rgba(255, 0, 0, 0.2)'}),\n        stroke: new Stroke({color: 'red', width: 1})\n      }),\n      text: new Text({\n        text: f.get('node').id.toString(),\n        fill: new Fill({color: 'red'}),\n        stroke: new Stroke({\n          color: 'white',\n          width: 3\n        })\n      })\n    });\n    return [style];\n  }\n});\n\nconst edges = new VectorSource({wrapX: false});\nconst edgesLayer = new VectorLayer({\n  source: edges,\n  style: function(f) {\n    const style = new Style({\n      stroke: new Stroke({\n        color: 'blue',\n        width: 1\n      }),\n      text: new Text({\n        text: f.get('edge').id.toString(),\n        fill: new Fill({color: 'blue'}),\n        stroke: new Stroke({\n          color: 'white',\n          width: 2\n        })\n      })\n    });\n    return [style];\n  }\n});\n\nconst faces = new VectorSource({wrapX: false});\nconst facesLayer = new VectorLayer({\n  source: faces,\n  style: function(f) {\n    const style = new Style({\n      stroke: new Stroke({\n        color: 'black',\n        width: 1\n      }),\n      fill: new Fill({\n        color: 'rgba(0, 255, 0, 0.2)'\n      }),\n      text: new Text({\n        font: 'bold 12px sans-serif',\n        text: f.get('face').id.toString(),\n        fill: new Fill({color: 'green'}),\n        stroke: new Stroke({\n          color: 'white',\n          width: 2\n        })\n      })\n    });\n    return [style];\n  }\n});\n\nconst map = new Map({\n  layers: [raster, facesLayer, edgesLayer, nodesLayer],\n  target: 'map',\n  view: new View({\n    center: [-11000000, 4600000],\n    zoom: 16\n  })\n});\n\nconst topo = topolis.createTopology();\n\ntopo.on('addnode', nodeToFeature);\ntopo.on('removenode', function(e) {\n  removeElementFeature(nodes, e);\n});\ntopo.on('addedge', edgeToFeature);\ntopo.on('modedge', function(e) {\n  const feature = edges.getFeatureById(e.id);\n  feature.setGeometry(new LineString(e.coordinates));\n});\ntopo.on('removeedge', function(e) {\n  removeElementFeature(edges, e);\n});\ntopo.on('addface', faceToFeature);\ntopo.on('removeface', function(e) {\n  removeElementFeature(faces, e);\n});\n\nfunction removeElementFeature(source, element) {\n  const feature = source.getFeatureById(element.id);\n  source.removeFeature(feature);\n}\n\nfunction nodeToFeature(node) {\n  const feature = new Feature({\n    geometry: new Point(node.coordinate),\n    node: node\n  });\n  feature.setId(node.id);\n  nodes.addFeature(feature);\n}\n\nfunction edgeToFeature(edge) {\n  const feature = new Feature({\n    geometry: new LineString(edge.coordinates),\n    edge: edge\n  });\n  feature.setId(edge.id);\n  edges.addFeature(feature);\n}\n\nfunction faceToFeature(face) {\n  const coordinates = topo.getFaceGeometry(face);\n  const feature = new Feature({\n    geometry: new Polygon(coordinates),\n    face: face\n  });\n  feature.setId(face.id);\n  faces.addFeature(feature);\n}\n\nfunction createNode(topo, coord) {\n  let node;\n  const existingEdge = topo.getEdgeByPoint(coord, 5)[0];\n  if (existingEdge) {\n    node = topo.modEdgeSplit(existingEdge, coord);\n  } else {\n    node = topo.addIsoNode(coord);\n  }\n  return node;\n}\n\nfunction onDrawend(e) {\n  const edgeGeom = e.feature.getGeometry().getCoordinates();\n  const startCoord = edgeGeom[0];\n  const endCoord = edgeGeom[edgeGeom.length - 1];\n  let start, end;\n  try {\n    start = topo.getNodeByPoint(startCoord);\n    end = topo.getNodeByPoint(endCoord);\n    const edgesAtStart = topo.getEdgeByPoint(startCoord, 5);\n    const edgesAtEnd = topo.getEdgeByPoint(endCoord, 5);\n    const crossing = topo.getEdgesByLine(edgeGeom);\n    if (crossing.length === 1 && !start && !end && edgesAtStart.length === 0 && edgesAtEnd.length === 0) {\n      topo.remEdgeNewFace(crossing[0]);\n      start = crossing[0].start;\n      if (start.face) {\n        topo.removeIsoNode(start);\n      }\n      end = crossing[0].end;\n      if (end.face) {\n        topo.removeIsoNode(end);\n      }\n      return;\n    }\n    if (!start) {\n      start = createNode(topo, startCoord);\n      edgeGeom[0] = start.coordinate;\n    }\n    if (!end) {\n      end = createNode(topo, endCoord);\n      edgeGeom[edgeGeom.length - 1] = end.coordinate;\n    }\n    topo.addEdgeNewFaces(start, end, edgeGeom);\n  } catch (e) {\n    toastr.warning(e.toString());\n  }\n}\n\nconst draw = new Draw({\n  type: 'LineString'\n});\ndraw.on('drawend', onDrawend);\nmap.addInteraction(draw);\nconst snap = new Snap({\n  source: edges\n});\nmap.addInteraction(snap);\nmap.addControl(new MousePosition());\n"],"sourceRoot":""}