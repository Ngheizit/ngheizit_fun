{"version":3,"sources":["webpack:///./kml-timezones.js"],"names":["__webpack_require__","r","__webpack_exports__","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_0__","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_1__","_src_ol_format_KML_js__WEBPACK_IMPORTED_MODULE_2__","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_3__","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_4__","_src_ol_source_Stamen_js__WEBPACK_IMPORTED_MODULE_5__","_src_ol_source_Vector_js__WEBPACK_IMPORTED_MODULE_6__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_7__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_8__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_9__","vector","source","url","format","extractStyles","style","feature","let","offset","match","get","parseInt","const","date","Date","local","getTime","getTimezoneOffset","delta","Math","abs","getHours","getMinutes","opacity","fill","color","stroke","raster","layer","map","layers","target","view","center","zoom","info","$","tooltip","animation","trigger","displayFeatureInfo","pixel","css","left","top","forEachFeatureAtPixel","attr","on","evt","dragging","getEventPixel","originalEvent"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,GAAAI,EAAAJ,EAAA,GAAAK,EAAAL,EAAA,KAAAM,EAAAN,EAAA,IAAAO,EAAAP,EAAA,GAAAQ,EAAAR,EAAA,IAAAS,EAAAT,EAAA,IAAAU,EAAAV,EAAA,IAAAW,EAAAX,EAAA,IAAAY,EAAAZ,EAAA,IA4CMa,EAAS,IAAIP,EAAA,EAAY,CAC7BQ,OAAQ,IAAIL,EAAA,EAAa,CACvBM,IAAK,yBACLC,OAAQ,IAAIX,EAAA,EAAI,CACdY,eAAe,MAGnBC,MAnCoB,SAASC,GAC7BC,IAAIC,EAAS,EAEPC,EADOH,EAAQI,IAAI,QACND,MAAM,yBACrBA,IAGFD,EAAS,GAFKG,SAASF,EAAM,GAAI,IACjBE,SAASF,EAAM,GAAI,KAGrCG,IAAMC,EAAO,IAAIC,KACXC,EAAQ,IAAID,KAAKD,EAAKG,UACc,KAArCH,EAAKI,oBAAsBT,IAE5BU,EAAQC,KAAKC,IAAI,GAAKL,EAAMM,WAAcN,EAAMO,aAAe,IACvD,GAARJ,IACFA,EAAQ,GAAKA,GAEfN,IAAMW,EAAU,KAAQ,EAAIL,EAAQ,IACpC,OAAO,IAAIrB,EAAA,EAAM,CACf2B,KAAM,IAAI1B,EAAA,EAAK,CACb2B,MAAO,CAAC,IAAM,IAAM,GAAMF,KAE5BG,OAAQ,IAAI3B,EAAA,EAAO,CACjB0B,MAAO,iBAePE,EAAS,IAAIjC,EAAA,EAAU,CAC3BO,OAAQ,IAAIN,EAAA,EAAO,CACjBiC,MAAO,YAILC,EAAM,IAAIvC,EAAA,EAAI,CAClBwC,OAAQ,CAACH,EAAQ3B,GACjB+B,OAAQ,MACRC,KAAM,IAAIzC,EAAA,EAAK,CACb0C,OAAQ,CAAC,EAAG,GACZC,KAAM,MAIJC,EAAOC,EAAE,SACfD,EAAKE,QAAQ,CACXC,WAAW,EACXC,QAAS,WAGX3B,IAAM4B,EAAqB,SAASC,GAClCN,EAAKO,IAAI,CACPC,KAAMF,EAAM,GAAK,KACjBG,IAAMH,EAAM,GAAK,GAAM,OAEzB7B,IAAMN,EAAUuB,EAAIgB,sBAAsBJ,EAAO,SAASnC,GACxD,OAAOA,IAELA,EACF6B,EAAKE,QAAQ,QACVS,KAAK,sBAAuBxC,EAAQI,IAAI,SACxC2B,QAAQ,YACRA,QAAQ,QAEXF,EAAKE,QAAQ,SAIjBR,EAAIkB,GAAG,cAAe,SAASC,GACzBA,EAAIC,SACNd,EAAKE,QAAQ,QAGfG,EAAmBX,EAAIqB,cAAcF,EAAIG,kBAG3CtB,EAAIkB,GAAG,QAAS,SAASC,GACvBR,EAAmBQ,EAAIP","file":"kml-timezones.js","sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport KML from '../src/ol/format/KML.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\nimport Stamen from '../src/ol/source/Stamen.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport {Fill, Stroke, Style} from '../src/ol/style.js';\n\n\n/*\n * Compute the style of the feature.  Here we want the opacity of polygons to\n * be based on the offset from local noon.  For example, a timezone where it is\n * currently noon would have an opacity of 0.75.  And a timezone where it is\n * currently midnight would have an opacity of 0.  This doesn't account for\n * daylight savings, so don't use it to plan your vacation.\n */\nconst styleFunction = function(feature) {\n  let offset = 0;\n  const name = feature.get('name'); // e.g. GMT -08:30\n  const match = name.match(/([\\-+]\\d{2}):(\\d{2})$/);\n  if (match) {\n    const hours = parseInt(match[1], 10);\n    const minutes = parseInt(match[2], 10);\n    offset = 60 * hours + minutes;\n  }\n  const date = new Date();\n  const local = new Date(date.getTime() +\n      (date.getTimezoneOffset() + offset) * 60000);\n  // offset from local noon (in hours)\n  let delta = Math.abs(12 - local.getHours() + (local.getMinutes() / 60));\n  if (delta > 12) {\n    delta = 24 - delta;\n  }\n  const opacity = 0.75 * (1 - delta / 12);\n  return new Style({\n    fill: new Fill({\n      color: [0xff, 0xff, 0x33, opacity]\n    }),\n    stroke: new Stroke({\n      color: '#ffffff'\n    })\n  });\n};\n\nconst vector = new VectorLayer({\n  source: new VectorSource({\n    url: 'data/kml/timezones.kml',\n    format: new KML({\n      extractStyles: false\n    })\n  }),\n  style: styleFunction\n});\n\nconst raster = new TileLayer({\n  source: new Stamen({\n    layer: 'toner'\n  })\n});\n\nconst map = new Map({\n  layers: [raster, vector],\n  target: 'map',\n  view: new View({\n    center: [0, 0],\n    zoom: 2\n  })\n});\n\nconst info = $('#info');\ninfo.tooltip({\n  animation: false,\n  trigger: 'manual'\n});\n\nconst displayFeatureInfo = function(pixel) {\n  info.css({\n    left: pixel[0] + 'px',\n    top: (pixel[1] - 15) + 'px'\n  });\n  const feature = map.forEachFeatureAtPixel(pixel, function(feature) {\n    return feature;\n  });\n  if (feature) {\n    info.tooltip('hide')\n      .attr('data-original-title', feature.get('name'))\n      .tooltip('fixTitle')\n      .tooltip('show');\n  } else {\n    info.tooltip('hide');\n  }\n};\n\nmap.on('pointermove', function(evt) {\n  if (evt.dragging) {\n    info.tooltip('hide');\n    return;\n  }\n  displayFeatureInfo(map.getEventPixel(evt.originalEvent));\n});\n\nmap.on('click', function(evt) {\n  displayFeatureInfo(evt.pixel);\n});\n"],"sourceRoot":""}