{"version":3,"sources":["webpack:///./raster.js"],"names":["const","let"],"mappings":"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","file":"raster.js","sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport {Image as ImageLayer, Tile as TileLayer} from '../src/ol/layer.js';\nimport BingMaps from '../src/ol/source/BingMaps.js';\nimport RasterSource from '../src/ol/source/Raster.js';\n\nconst minVgi = 0;\nconst maxVgi = 0.25;\nconst bins = 10;\n\n\n/**\n * Calculate the Vegetation Greenness Index (VGI) from an input pixel.  This\n * is a rough estimate assuming that pixel values correspond to reflectance.\n * @param {Array<number>} pixel An array of [R, G, B, A] values.\n * @return {number} The VGI value for the given pixel.\n */\nfunction vgi(pixel) {\n  const r = pixel[0] / 255;\n  const g = pixel[1] / 255;\n  const b = pixel[2] / 255;\n  return (2 * g - r - b) / (2 * g + r + b);\n}\n\n\n/**\n * Summarize values for a histogram.\n * @param {numver} value A VGI value.\n * @param {Object} counts An object for keeping track of VGI counts.\n */\nfunction summarize(value, counts) {\n  const min = counts.min;\n  const max = counts.max;\n  const num = counts.values.length;\n  if (value < min) {\n    // do nothing\n  } else if (value >= max) {\n    counts.values[num - 1] += 1;\n  } else {\n    const index = Math.floor((value - min) / counts.delta);\n    counts.values[index] += 1;\n  }\n}\n\n\n/**\n * Use aerial imagery as the input data for the raster source.\n */\nconst bing = new BingMaps({\n  key: 'As1HiMj1PvLPlqc_gtM7AqZfBL8ZL3VrjaS3zIb22Uvb9WKhuJObROC-qUpa81U5',\n  imagerySet: 'Aerial'\n});\n\n\n/**\n * Create a raster source where pixels with VGI values above a threshold will\n * be colored green.\n */\nconst raster = new RasterSource({\n  sources: [bing],\n  /**\n   * Run calculations on pixel data.\n   * @param {Array} pixels List of pixels (one per source).\n   * @param {Object} data User data object.\n   * @return {Array} The output pixel.\n   */\n  operation: function(pixels, data) {\n    const pixel = pixels[0];\n    const value = vgi(pixel);\n    summarize(value, data.counts);\n    if (value >= data.threshold) {\n      pixel[0] = 0;\n      pixel[1] = 255;\n      pixel[2] = 0;\n      pixel[3] = 128;\n    } else {\n      pixel[3] = 0;\n    }\n    return pixel;\n  },\n  lib: {\n    vgi: vgi,\n    summarize: summarize\n  }\n});\nraster.set('threshold', 0.1);\n\nfunction createCounts(min, max, num) {\n  const values = new Array(num);\n  for (let i = 0; i < num; ++i) {\n    values[i] = 0;\n  }\n  return {\n    min: min,\n    max: max,\n    values: values,\n    delta: (max - min) / num\n  };\n}\n\nraster.on('beforeoperations', function(event) {\n  event.data.counts = createCounts(minVgi, maxVgi, bins);\n  event.data.threshold = raster.get('threshold');\n});\n\nraster.on('afteroperations', function(event) {\n  schedulePlot(event.resolution, event.data.counts, event.data.threshold);\n});\n\nconst map = new Map({\n  layers: [\n    new TileLayer({\n      source: bing\n    }),\n    new ImageLayer({\n      source: raster\n    })\n  ],\n  target: 'map',\n  view: new View({\n    center: [-9651695, 4937351],\n    zoom: 13,\n    minZoom: 12,\n    maxZoom: 19\n  })\n});\n\n\nlet timer = null;\nfunction schedulePlot(resolution, counts, threshold) {\n  if (timer) {\n    clearTimeout(timer);\n    timer = null;\n  }\n  timer = setTimeout(plot.bind(null, resolution, counts, threshold), 1000 / 60);\n}\n\nconst barWidth = 15;\nconst plotHeight = 150;\nconst chart = d3.select('#plot').append('svg')\n  .attr('width', barWidth * bins)\n  .attr('height', plotHeight);\n\nconst chartRect = chart.node().getBoundingClientRect();\n\nconst tip = d3.select(document.body).append('div')\n  .attr('class', 'tip');\n\nfunction plot(resolution, counts, threshold) {\n  const yScale = d3.scaleLinear()\n    .domain([0, d3.max(counts.values)])\n    .range([0, plotHeight]);\n\n  const bar = chart.selectAll('rect').data(counts.values);\n\n  bar.enter().append('rect');\n\n  bar.attr('class', function(count, index) {\n    const value = counts.min + (index * counts.delta);\n    return 'bar' + (value >= threshold ? ' selected' : '');\n  })\n    .attr('width', barWidth - 2);\n\n  bar.transition().attr('transform', function(value, index) {\n    return 'translate(' + (index * barWidth) + ', ' +\n        (plotHeight - yScale(value)) + ')';\n  })\n    .attr('height', yScale);\n\n  bar.on('mousemove', function(count, index) {\n    const threshold = counts.min + (index * counts.delta);\n    if (raster.get('threshold') !== threshold) {\n      raster.set('threshold', threshold);\n      raster.changed();\n    }\n  });\n\n  bar.on('mouseover', function(count, index) {\n    let area = 0;\n    for (let i = counts.values.length - 1; i >= index; --i) {\n      area += resolution * resolution * counts.values[i];\n    }\n    tip.html(message(counts.min + (index * counts.delta), area));\n    tip.style('display', 'block');\n    tip.transition().style({\n      left: (chartRect.left + (index * barWidth) + (barWidth / 2)) + 'px',\n      top: (d3.event.y - 60) + 'px',\n      opacity: 1\n    });\n  });\n\n  bar.on('mouseout', function() {\n    tip.transition().style('opacity', 0).each('end', function() {\n      tip.style('display', 'none');\n    });\n  });\n\n}\n\nfunction message(value, area) {\n  const acres = (area / 4046.86).toFixed(0).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n  return acres + ' acres at<br>' + value.toFixed(2) + ' VGI or above';\n}\n"],"sourceRoot":""}